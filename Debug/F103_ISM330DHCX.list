
F103_ISM330DHCX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010678  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08010788  08010788  00020788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d2c  08010d2c  00030350  2**0
                  CONTENTS
  4 .ARM          00000000  08010d2c  08010d2c  00030350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d2c  08010d2c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d2c  08010d2c  00020d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d30  08010d30  00020d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08010d34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000175c  20000350  08011084  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08011084  00031aac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa8a  00000000  00000000  00030379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003805  00000000  00000000  0004fe03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00053608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f8  00000000  00000000  00055160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bae6  00000000  00000000  00056b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5f5  00000000  00000000  0007263e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009388b  00000000  00000000  0008cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001204be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000899c  00000000  00000000  00120510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	08010770 	.word	0x08010770

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	08010770 	.word	0x08010770

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f001 fd04 	bl	8002aa4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	481c      	ldr	r0, [pc, #112]	; (8001114 <main+0x80>)
 80010a4:	f002 f8e2 	bl	800326c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010a8:	2064      	movs	r0, #100	; 0x64
 80010aa:	f001 fd5d 	bl	8002b68 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <main+0x80>)
 80010b6:	f002 f8d9 	bl	800326c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f001 fd54 	bl	8002b68 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <main+0x80>)
 80010c8:	f002 f8d0 	bl	800326c <HAL_GPIO_WritePin>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f824 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 f916 	bl	8001300 <MX_GPIO_Init>
  MX_CRC_Init();
 80010d4:	f000 f87a 	bl	80011cc <MX_CRC_Init>
  MX_USART1_UART_Init();
 80010d8:	f000 f8e8 	bl	80012ac <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010dc:	f00a f9b4 	bl	800b448 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80010e0:	f000 f888 	bl	80011f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010e4:	f000 f8b4 	bl	8001250 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  I2C_Scanner();
 80010e8:	f000 f956 	bl	8001398 <I2C_Scanner>
  ism330dhcx_read_data_polling();
 80010ec:	f000 fa2e 	bl	800154c <ism330dhcx_read_data_polling>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2102      	movs	r1, #2
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <main+0x80>)
 80010f6:	f002 f8b9 	bl	800326c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80010fa:	2064      	movs	r0, #100	; 0x64
 80010fc:	f001 fd34 	bl	8002b68 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2102      	movs	r1, #2
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <main+0x80>)
 8001106:	f002 f8b1 	bl	800326c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f001 fd2c 	bl	8002b68 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8001110:	e7ee      	b.n	80010f0 <main+0x5c>
 8001112:	bf00      	nop
 8001114:	40010c00 	.word	0x40010c00

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00a fec4 	bl	800beb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	2301      	movs	r3, #1
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001164:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fe86 	bl	8005e80 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800117a:	f000 fb91 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f005 f8f2 	bl	8006384 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011a6:	f000 fb7b 	bl	80018a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011aa:	2310      	movs	r3, #16
 80011ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fa7d 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011c0:	f000 fb6e 	bl	80018a0 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_CRC_Init+0x20>)
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <MX_CRC_Init+0x24>)
 80011d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_CRC_Init+0x20>)
 80011d8:	f001 fdf7 	bl	8002dca <HAL_CRC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011e2:	f000 fb5d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000036c 	.word	0x2000036c
 80011f0:	40023000 	.word	0x40023000

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f002 f833 	bl	800329c <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f000 fb30 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000374 	.word	0x20000374
 8001248:	40005400 	.word	0x40005400
 800124c:	000186a0 	.word	0x000186a0

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C2_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_I2C2_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_I2C2_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_I2C2_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C2_Init+0x50>)
 800128e:	f002 f805 	bl	800329c <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fb02 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003c8 	.word	0x200003c8
 80012a4:	40005800 	.word	0x40005800
 80012a8:	000186a0 	.word	0x000186a0

080012ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_USART1_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f005 fa9c 	bl	8006820 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 fad7 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000041c 	.word	0x2000041c
 80012fc:	40013800 	.word	0x40013800

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_GPIO_Init+0x90>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <MX_GPIO_Init+0x90>)
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_GPIO_Init+0x90>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0x90>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <MX_GPIO_Init+0x90>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_GPIO_Init+0x90>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_GPIO_Init+0x90>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <MX_GPIO_Init+0x90>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_GPIO_Init+0x90>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDWH_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f240 2102 	movw	r1, #514	; 0x202
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_GPIO_Init+0x94>)
 8001364:	f001 ff82 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDWH_Pin PB9 */
  GPIO_InitStruct.Pin = LEDWH_Pin|GPIO_PIN_9;
 8001368:	f240 2302 	movw	r3, #514	; 0x202
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2302      	movs	r3, #2
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4619      	mov	r1, r3
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_GPIO_Init+0x94>)
 8001382:	f001 fdef 	bl	8002f64 <HAL_GPIO_Init>

}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40010c00 	.word	0x40010c00

08001398 <I2C_Scanner>:

/* USER CODE BEGIN 4 */

void I2C_Scanner(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	b09a      	sub	sp, #104	; 0x68
 800139c:	af00      	add	r7, sp, #0
	char buffer[100];
	uint8_t i,n;
	  HAL_GPIO_WritePin(LEDWH_GPIO_Port, LEDWH_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2102      	movs	r1, #2
 80013a2:	4861      	ldr	r0, [pc, #388]	; (8001528 <I2C_Scanner+0x190>)
 80013a4:	f001 ff62 	bl	800326c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80013a8:	20c8      	movs	r0, #200	; 0xc8
 80013aa:	f001 fbdd 	bl	8002b68 <HAL_Delay>
	  HAL_GPIO_WritePin(LEDWH_GPIO_Port, LEDWH_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2102      	movs	r1, #2
 80013b2:	485d      	ldr	r0, [pc, #372]	; (8001528 <I2C_Scanner+0x190>)
 80013b4:	f001 ff5a 	bl	800326c <HAL_GPIO_WritePin>
	  n=snprintf(buffer,U1_BUFFER_SIZE-1,"\r\nI2C BUS #:");
 80013b8:	463b      	mov	r3, r7
 80013ba:	4a5c      	ldr	r2, [pc, #368]	; (800152c <I2C_Scanner+0x194>)
 80013bc:	2163      	movs	r1, #99	; 0x63
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b fbf2 	bl	800cba8 <sniprintf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 80013ca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4639      	mov	r1, r7
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	4856      	ldr	r0, [pc, #344]	; (8001530 <I2C_Scanner+0x198>)
 80013d6:	f005 fa70 	bl	80068ba <HAL_UART_Transmit>
	 	for (i=1; i<128; i++)
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013e0:	e03d      	b.n	800145e <I2C_Scanner+0xc6>
	 	{
	 	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80013e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b299      	uxth	r1, r3
 80013ec:	2302      	movs	r3, #2
 80013ee:	2202      	movs	r2, #2
 80013f0:	4850      	ldr	r0, [pc, #320]	; (8001534 <I2C_Scanner+0x19c>)
 80013f2:	f002 fbf9 	bl	8003be8 <HAL_I2C_IsDeviceReady>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <I2C_Scanner+0x1a0>)
 80013fc:	701a      	strb	r2, [r3, #0]
	 	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80013fe:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <I2C_Scanner+0x1a0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <I2C_Scanner+0x90>
	 	  {
	 		  n=snprintf(buffer,U1_BUFFER_SIZE-1,".");
 8001406:	463b      	mov	r3, r7
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <I2C_Scanner+0x1a4>)
 800140a:	2163      	movs	r1, #99	; 0x63
 800140c:	4618      	mov	r0, r3
 800140e:	f00b fbcb 	bl	800cba8 <sniprintf>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 		  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 8001418:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800141c:	b29a      	uxth	r2, r3
 800141e:	4639      	mov	r1, r7
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	4843      	ldr	r0, [pc, #268]	; (8001530 <I2C_Scanner+0x198>)
 8001424:	f005 fa49 	bl	80068ba <HAL_UART_Transmit>
	 		  // No ACK received at that address
	 	  }
	 	  if (result == HAL_OK)
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <I2C_Scanner+0x1a0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <I2C_Scanner+0xbc>
	 	  {
	 		  n=snprintf(buffer,U1_BUFFER_SIZE-1,"[0x%X]", i);
 8001430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001434:	4638      	mov	r0, r7
 8001436:	4a42      	ldr	r2, [pc, #264]	; (8001540 <I2C_Scanner+0x1a8>)
 8001438:	2163      	movs	r1, #99	; 0x63
 800143a:	f00b fbb5 	bl	800cba8 <sniprintf>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 		  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 8001444:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001448:	b29a      	uxth	r2, r3
 800144a:	4639      	mov	r1, r7
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	4838      	ldr	r0, [pc, #224]	; (8001530 <I2C_Scanner+0x198>)
 8001450:	f005 fa33 	bl	80068ba <HAL_UART_Transmit>
	 	for (i=1; i<128; i++)
 8001454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001458:	3301      	adds	r3, #1
 800145a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800145e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001462:	2b00      	cmp	r3, #0
 8001464:	dabd      	bge.n	80013e2 <I2C_Scanner+0x4a>
	 		  // Received an ACK at that address
	 	  }
	 	}
	 	n=snprintf(buffer,U1_BUFFER_SIZE-1,"\r\nI2C BUS #2:");
 8001466:	463b      	mov	r3, r7
 8001468:	4a36      	ldr	r2, [pc, #216]	; (8001544 <I2C_Scanner+0x1ac>)
 800146a:	2163      	movs	r1, #99	; 0x63
 800146c:	4618      	mov	r0, r3
 800146e:	f00b fb9b 	bl	800cba8 <sniprintf>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 8001478:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800147c:	b29a      	uxth	r2, r3
 800147e:	4639      	mov	r1, r7
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <I2C_Scanner+0x198>)
 8001484:	f005 fa19 	bl	80068ba <HAL_UART_Transmit>
	 	HAL_Delay(200);
 8001488:	20c8      	movs	r0, #200	; 0xc8
 800148a:	f001 fb6d 	bl	8002b68 <HAL_Delay>
	 	for (i=1; i<128; i++)
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001494:	e03d      	b.n	8001512 <I2C_Scanner+0x17a>
	 	{
	 	  result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8001496:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800149a:	b29b      	uxth	r3, r3
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b299      	uxth	r1, r3
 80014a0:	2302      	movs	r3, #2
 80014a2:	2202      	movs	r2, #2
 80014a4:	4828      	ldr	r0, [pc, #160]	; (8001548 <I2C_Scanner+0x1b0>)
 80014a6:	f002 fb9f 	bl	8003be8 <HAL_I2C_IsDeviceReady>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <I2C_Scanner+0x1a0>)
 80014b0:	701a      	strb	r2, [r3, #0]
	 	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <I2C_Scanner+0x1a0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <I2C_Scanner+0x144>
	 	  {
	 		  n=snprintf(buffer,U1_BUFFER_SIZE-1,".");
 80014ba:	463b      	mov	r3, r7
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <I2C_Scanner+0x1a4>)
 80014be:	2163      	movs	r1, #99	; 0x63
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00b fb71 	bl	800cba8 <sniprintf>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 		  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 80014cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4639      	mov	r1, r7
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <I2C_Scanner+0x198>)
 80014d8:	f005 f9ef 	bl	80068ba <HAL_UART_Transmit>
	 		  // No ACK received at that address
	 	  }
	 	  if (result == HAL_OK)
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <I2C_Scanner+0x1a0>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <I2C_Scanner+0x170>
	 	  {
	 		  n=snprintf(buffer,U1_BUFFER_SIZE-1,"[0x%X]", i);
 80014e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014e8:	4638      	mov	r0, r7
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <I2C_Scanner+0x1a8>)
 80014ec:	2163      	movs	r1, #99	; 0x63
 80014ee:	f00b fb5b 	bl	800cba8 <sniprintf>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	 		  HAL_UART_Transmit(&huart1, (uint8_t *) buffer, n, 100);
 80014f8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4639      	mov	r1, r7
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <I2C_Scanner+0x198>)
 8001504:	f005 f9d9 	bl	80068ba <HAL_UART_Transmit>
	 	for (i=1; i<128; i++)
 8001508:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800150c:	3301      	adds	r3, #1
 800150e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001512:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001516:	2b00      	cmp	r3, #0
 8001518:	dabd      	bge.n	8001496 <I2C_Scanner+0xfe>
	 		  // Received an ACK at that address
	 	  }
	 	}
	 	HAL_Delay(200);
 800151a:	20c8      	movs	r0, #200	; 0xc8
 800151c:	f001 fb24 	bl	8002b68 <HAL_Delay>

}
 8001520:	bf00      	nop
 8001522:	3768      	adds	r7, #104	; 0x68
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40010c00 	.word	0x40010c00
 800152c:	08010788 	.word	0x08010788
 8001530:	2000041c 	.word	0x2000041c
 8001534:	20000374 	.word	0x20000374
 8001538:	20000878 	.word	0x20000878
 800153c:	08010798 	.word	0x08010798
 8001540:	0801079c 	.word	0x0801079c
 8001544:	080107a4 	.word	0x080107a4
 8001548:	200003c8 	.word	0x200003c8

0800154c <ism330dhcx_read_data_polling>:


void ism330dhcx_read_data_polling(void)
{
 800154c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001550:	b08d      	sub	sp, #52	; 0x34
 8001552:	af06      	add	r7, sp, #24
uint8_t led_state=GPIO_PIN_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	75fb      	strb	r3, [r7, #23]

  stmdev_ctx_t dev_ctx;

  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001558:	4ba4      	ldr	r3, [pc, #656]	; (80017ec <ism330dhcx_read_data_polling+0x2a0>)
 800155a:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 800155c:	4ba4      	ldr	r3, [pc, #656]	; (80017f0 <ism330dhcx_read_data_polling+0x2a4>)
 800155e:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c2;
 8001560:	4ba4      	ldr	r3, [pc, #656]	; (80017f4 <ism330dhcx_read_data_polling+0x2a8>)
 8001562:	613b      	str	r3, [r7, #16]
  /* Wait sensor boot time */
  HAL_Delay(BOOT_TIME);
 8001564:	200a      	movs	r0, #10
 8001566:	f001 faff 	bl	8002b68 <HAL_Delay>
  /* Check device ID */
  ism330dhcx_device_id_get(&dev_ctx, &whoamI);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	49a2      	ldr	r1, [pc, #648]	; (80017f8 <ism330dhcx_read_data_polling+0x2ac>)
 8001570:	4618      	mov	r0, r3
 8001572:	f001 f903 	bl	800277c <ism330dhcx_device_id_get>

  if (whoamI != ISM330DHCX_ID)
 8001576:	4ba0      	ldr	r3, [pc, #640]	; (80017f8 <ism330dhcx_read_data_polling+0x2ac>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b6b      	cmp	r3, #107	; 0x6b
 800157c:	d000      	beq.n	8001580 <ism330dhcx_read_data_polling+0x34>
    while (1);
 800157e:	e7fe      	b.n	800157e <ism330dhcx_read_data_polling+0x32>

  /* Restore default configuration */
  ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f909 	bl	800279e <ism330dhcx_reset_set>

  do {
    ism330dhcx_reset_get(&dev_ctx, &rst);
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	499a      	ldr	r1, [pc, #616]	; (80017fc <ism330dhcx_read_data_polling+0x2b0>)
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f929 	bl	80027ea <ism330dhcx_reset_get>
  } while (rst);
 8001598:	4b98      	ldr	r3, [pc, #608]	; (80017fc <ism330dhcx_read_data_polling+0x2b0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f5      	bne.n	800158c <ism330dhcx_read_data_polling+0x40>

  /* Start device configuration. */
  ism330dhcx_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f89c 	bl	80026e4 <ism330dhcx_device_conf_set>
  /* Enable Block Data Update */
  ism330dhcx_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ff6c 	bl	8002490 <ism330dhcx_block_data_update_set>
  /* Set Output Data Rate 52Hz; shall I increase? */
  ism330dhcx_xl_data_rate_set(&dev_ctx, ISM330DHCX_XL_ODR_52Hz);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	2103      	movs	r1, #3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fc60 	bl	8001e84 <ism330dhcx_xl_data_rate_set>
  ism330dhcx_gy_data_rate_set(&dev_ctx, ISM330DHCX_GY_ODR_52Hz);
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	2103      	movs	r1, #3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fdf0 	bl	80021b0 <ism330dhcx_gy_data_rate_set>
  /* Set full scale;Csabi needs most sensitive settings-to be revised */
  ism330dhcx_xl_full_scale_set(&dev_ctx, ISM330DHCX_2g);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc2e 	bl	8001e38 <ism330dhcx_xl_full_scale_set>
  ism330dhcx_gy_full_scale_set(&dev_ctx, ISM330DHCX_4000dps);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fdbe 	bl	8002164 <ism330dhcx_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * What is it?
   * Accelerometer - LPF1 + LPF2 path
   * What is it?
   */
  ism330dhcx_xl_hp_path_on_out_set(&dev_ctx, ISM330DHCX_LP_ODR_DIV_100);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	2104      	movs	r1, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f93a 	bl	8002868 <ism330dhcx_xl_hp_path_on_out_set>
  ism330dhcx_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	2101      	movs	r1, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f90e 	bl	800281c <ism330dhcx_xl_filter_lp2_set>

  /* Read samples in polling mode (no int) (TODO: INT driven data aquisition/RTOS thread?) */
  while (1) {
    uint8_t reg;
    /*Easy to determine actual data reading frequency*/
    HAL_GPIO_WritePin(LEDWH_GPIO_Port, LEDWH_Pin, led_state);
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	461a      	mov	r2, r3
 8001604:	2102      	movs	r1, #2
 8001606:	487e      	ldr	r0, [pc, #504]	; (8001800 <ism330dhcx_read_data_polling+0x2b4>)
 8001608:	f001 fe30 	bl	800326c <HAL_GPIO_WritePin>
    led_state=!led_state;
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(20); /*20ms ensures success if 52Hz is chosen! */
 800161a:	2014      	movs	r0, #20
 800161c:	f001 faa4 	bl	8002b68 <HAL_Delay>
    /* Read output only if new xl value is available */
    ism330dhcx_xl_flag_data_ready_get(&dev_ctx, &reg);
 8001620:	1dfa      	adds	r2, r7, #7
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f000 ff57 	bl	80024dc <ism330dhcx_xl_flag_data_ready_get>

    if (reg) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d051      	beq.n	80016d8 <ism330dhcx_read_data_polling+0x18c>
      /* Read acceleration field data */

      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001634:	2206      	movs	r2, #6
 8001636:	2100      	movs	r1, #0
 8001638:	4872      	ldr	r0, [pc, #456]	; (8001804 <ism330dhcx_read_data_polling+0x2b8>)
 800163a:	f00a fc3b 	bl	800beb4 <memset>
      ism330dhcx_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4970      	ldr	r1, [pc, #448]	; (8001804 <ism330dhcx_read_data_polling+0x2b8>)
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f802 	bl	800264e <ism330dhcx_acceleration_raw_get>
      acceleration_mg[0] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
 800164a:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <ism330dhcx_read_data_polling+0x2b8>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fba9 	bl	8001da8 <ism330dhcx_from_fs2g_to_mg>
 8001656:	4603      	mov	r3, r0
      acceleration_mg[0] =
 8001658:	4a6b      	ldr	r2, [pc, #428]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 800165a:	6013      	str	r3, [r2, #0]
      acceleration_mg[1] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[1]);
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <ism330dhcx_read_data_polling+0x2b8>)
 800165e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fba0 	bl	8001da8 <ism330dhcx_from_fs2g_to_mg>
 8001668:	4603      	mov	r3, r0
      acceleration_mg[1] =
 800166a:	4a67      	ldr	r2, [pc, #412]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 800166c:	6053      	str	r3, [r2, #4]
      acceleration_mg[2] =
        ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[2]);
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <ism330dhcx_read_data_polling+0x2b8>)
 8001670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fb97 	bl	8001da8 <ism330dhcx_from_fs2g_to_mg>
 800167a:	4603      	mov	r3, r0
      acceleration_mg[2] =
 800167c:	4a62      	ldr	r2, [pc, #392]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 800167e:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
 8001680:	f001 fa68 	bl	8002b54 <HAL_GetTick>
 8001684:	4606      	mov	r6, r0
              "%012lu,%6.2f,%6.2f,%6.2f,",HAL_GetTick(),
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fecc 	bl	8000428 <__aeabi_f2d>
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001694:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 8001696:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fec5 	bl	8000428 <__aeabi_f2d>
 800169e:	4680      	mov	r8, r0
 80016a0:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80016a2:	4b59      	ldr	r3, [pc, #356]	; (8001808 <ism330dhcx_read_data_polling+0x2bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe febe 	bl	8000428 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016b8:	e9cd 4500 	strd	r4, r5, [sp]
 80016bc:	4632      	mov	r2, r6
 80016be:	4953      	ldr	r1, [pc, #332]	; (800180c <ism330dhcx_read_data_polling+0x2c0>)
 80016c0:	4853      	ldr	r0, [pc, #332]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80016c2:	f00b faa5 	bl	800cc10 <siprintf>
      //tx_com(tx_buffer, strlen((char const *)tx_buffer)); //UART output version if no USB is present
      CDC_Transmit_FS(tx_buffer, strlen((char const *)tx_buffer));
 80016c6:	4852      	ldr	r0, [pc, #328]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80016c8:	f7fe fd42 	bl	8000150 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	484f      	ldr	r0, [pc, #316]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80016d4:	f009 ffd8 	bl	800b688 <CDC_Transmit_FS>
    }

    ism330dhcx_gy_flag_data_ready_get(&dev_ctx, &reg);
 80016d8:	1dfa      	adds	r2, r7, #7
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 ff14 	bl	800250e <ism330dhcx_gy_flag_data_ready_get>

    if (reg) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d04d      	beq.n	8001788 <ism330dhcx_read_data_polling+0x23c>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80016ec:	2206      	movs	r2, #6
 80016ee:	2100      	movs	r1, #0
 80016f0:	4848      	ldr	r0, [pc, #288]	; (8001814 <ism330dhcx_read_data_polling+0x2c8>)
 80016f2:	f00a fbdf 	bl	800beb4 <memset>
      ism330dhcx_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4946      	ldr	r1, [pc, #280]	; (8001814 <ism330dhcx_read_data_polling+0x2c8>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 ff5b 	bl	80025b8 <ism330dhcx_angular_rate_raw_get>
      angular_rate_mdps[0] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <ism330dhcx_read_data_polling+0x2c8>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fb63 	bl	8001dd4 <ism330dhcx_from_fs2000dps_to_mdps>
 800170e:	4603      	mov	r3, r0
      angular_rate_mdps[0] =
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 8001712:	6013      	str	r3, [r2, #0]
      angular_rate_mdps[1] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <ism330dhcx_read_data_polling+0x2c8>)
 8001716:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fb5a 	bl	8001dd4 <ism330dhcx_from_fs2000dps_to_mdps>
 8001720:	4603      	mov	r3, r0
      angular_rate_mdps[1] =
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 8001724:	6053      	str	r3, [r2, #4]
      angular_rate_mdps[2] =
        ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <ism330dhcx_read_data_polling+0x2c8>)
 8001728:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fb51 	bl	8001dd4 <ism330dhcx_from_fs2000dps_to_mdps>
 8001732:	4603      	mov	r3, r0
      angular_rate_mdps[2] =
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 8001736:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
              "%6.2f,%6.2f,%6.2f,",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 800173a:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fe73 	bl	8000428 <__aeabi_f2d>
 8001742:	4680      	mov	r8, r0
 8001744:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 8001748:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe6c 	bl	8000428 <__aeabi_f2d>
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <ism330dhcx_read_data_polling+0x2cc>)
 8001756:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fe65 	bl	8000428 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001766:	e9cd 4500 	strd	r4, r5, [sp]
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	492b      	ldr	r1, [pc, #172]	; (800181c <ism330dhcx_read_data_polling+0x2d0>)
 8001770:	4827      	ldr	r0, [pc, #156]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 8001772:	f00b fa4d 	bl	800cc10 <siprintf>
      //tx_com(tx_buffer, strlen((char const *)tx_buffer)); //UART output version if no USB is present
      CDC_Transmit_FS(tx_buffer, strlen((char const *)tx_buffer));
 8001776:	4826      	ldr	r0, [pc, #152]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 8001778:	f7fe fcea 	bl	8000150 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29b      	uxth	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 8001784:	f009 ff80 	bl	800b688 <CDC_Transmit_FS>
    }

    ism330dhcx_temp_flag_data_ready_get(&dev_ctx, &reg);
 8001788:	1dfa      	adds	r2, r7, #7
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fed5 	bl	8002540 <ism330dhcx_temp_flag_data_ready_get>

    if (reg) {
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f43f af31 	beq.w	8001600 <ism330dhcx_read_data_polling+0xb4>
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <ism330dhcx_read_data_polling+0x2d4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      ism330dhcx_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	491d      	ldr	r1, [pc, #116]	; (8001820 <ism330dhcx_read_data_polling+0x2d4>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fee1 	bl	8002572 <ism330dhcx_temperature_raw_get>
      temperature_degC = ism330dhcx_from_lsb_to_celsius(
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <ism330dhcx_read_data_polling+0x2d4>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fb22 	bl	8001e00 <ism330dhcx_from_lsb_to_celsius>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a19      	ldr	r2, [pc, #100]	; (8001824 <ism330dhcx_read_data_polling+0x2d8>)
 80017c0:	6013      	str	r3, [r2, #0]
                           data_raw_temperature);
      sprintf((char *)tx_buffer,
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <ism330dhcx_read_data_polling+0x2d8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe2e 	bl	8000428 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <ism330dhcx_read_data_polling+0x2dc>)
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80017d4:	f00b fa1c 	bl	800cc10 <siprintf>
              "%06.2f\r\n", temperature_degC);
      //tx_com(tx_buffer, strlen((char const *)tx_buffer)); //UART output version if no USB is present
      CDC_Transmit_FS(tx_buffer, strlen((char const *)tx_buffer));
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80017da:	f7fe fcb9 	bl	8000150 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	480a      	ldr	r0, [pc, #40]	; (8001810 <ism330dhcx_read_data_polling+0x2c4>)
 80017e6:	f009 ff4f 	bl	800b688 <CDC_Transmit_FS>
  while (1) {
 80017ea:	e709      	b.n	8001600 <ism330dhcx_read_data_polling+0xb4>
 80017ec:	0800182d 	.word	0x0800182d
 80017f0:	08001867 	.word	0x08001867
 80017f4:	200003c8 	.word	0x200003c8
 80017f8:	2000048c 	.word	0x2000048c
 80017fc:	2000048d 	.word	0x2000048d
 8001800:	40010c00 	.word	0x40010c00
 8001804:	20000460 	.word	0x20000460
 8001808:	20000470 	.word	0x20000470
 800180c:	080107b4 	.word	0x080107b4
 8001810:	20000490 	.word	0x20000490
 8001814:	20000468 	.word	0x20000468
 8001818:	2000047c 	.word	0x2000047c
 800181c:	080107d0 	.word	0x080107d0
 8001820:	2000046e 	.word	0x2000046e
 8001824:	20000488 	.word	0x20000488
 8001828:	080107e4 	.word	0x080107e4

0800182c <platform_write>:
}


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af04      	add	r7, sp, #16
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	72fb      	strb	r3, [r7, #11]
 800183c:	4613      	mov	r3, r2
 800183e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, ISM330DHCX_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	b29a      	uxth	r2, r3
 8001844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	893b      	ldrh	r3, [r7, #8]
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	21d7      	movs	r1, #215	; 0xd7
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f001 fe64 	bl	8003524 <HAL_I2C_Mem_Write>

  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b088      	sub	sp, #32
 800186a:	af04      	add	r7, sp, #16
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	461a      	mov	r2, r3
 8001872:	460b      	mov	r3, r1
 8001874:	72fb      	strb	r3, [r7, #11]
 8001876:	4613      	mov	r3, r2
 8001878:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, ISM330DHCX_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	b29a      	uxth	r2, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	893b      	ldrh	r3, [r7, #8]
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	21d7      	movs	r1, #215	; 0xd7
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f001 ff41 	bl	8003718 <HAL_I2C_Mem_Read>

  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <Error_Handler>:


/* USER CODE END 4 */

void Error_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
      sprintf((char *)tx_buffer,"Ooooop, something went wrong %012lu", HAL_GetTick());
 80018a4:	f001 f956 	bl	8002b54 <HAL_GetTick>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4908      	ldr	r1, [pc, #32]	; (80018d0 <Error_Handler+0x30>)
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <Error_Handler+0x34>)
 80018b0:	f00b f9ae 	bl	800cc10 <siprintf>
      CDC_Transmit_FS(tx_buffer, strlen((char const *)tx_buffer));
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <Error_Handler+0x34>)
 80018b6:	f7fe fc4b 	bl	8000150 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <Error_Handler+0x34>)
 80018c2:	f009 fee1 	bl	800b688 <CDC_Transmit_FS>
      HAL_Delay(500);
 80018c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ca:	f001 f94d 	bl	8002b68 <HAL_Delay>
      sprintf((char *)tx_buffer,"Ooooop, something went wrong %012lu", HAL_GetTick());
 80018ce:	e7e9      	b.n	80018a4 <Error_Handler+0x4>
 80018d0:	080107f0 	.word	0x080107f0
 80018d4:	20000490 	.word	0x20000490

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_MspInit+0x5c>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_MspInit+0x5c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6193      	str	r3, [r2, #24]
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_MspInit+0x5c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_MspInit+0x5c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_MspInit+0x5c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	61d3      	str	r3, [r2, #28]
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_MspInit+0x60>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_MspInit+0x60>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000

0800193c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_CRC_MspInit+0x34>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10b      	bne.n	8001966 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_CRC_MspInit+0x38>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_CRC_MspInit+0x38>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6153      	str	r3, [r2, #20]
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_CRC_MspInit+0x38>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40023000 	.word	0x40023000
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2b      	ldr	r2, [pc, #172]	; (8001a40 <HAL_I2C_MspInit+0xc8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d124      	bne.n	80019e2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b0:	23c0      	movs	r3, #192	; 0xc0
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4821      	ldr	r0, [pc, #132]	; (8001a48 <HAL_I2C_MspInit+0xd0>)
 80019c4:	f001 face 	bl	8002f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d2:	61d3      	str	r3, [r2, #28]
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019e0:	e029      	b.n	8001a36 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_I2C_MspInit+0xd4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d124      	bne.n	8001a36 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	4619      	mov	r1, r3
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <HAL_I2C_MspInit+0xd0>)
 8001a1a:	f001 faa3 	bl	8002f64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_I2C_MspInit+0xcc>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40005400 	.word	0x40005400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40005800 	.word	0x40005800

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d139      	bne.n	8001ae4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <HAL_UART_MspInit+0xa4>)
 8001ab6:	f001 fa55 	bl	8002f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <HAL_UART_MspInit+0xa4>)
 8001ad0:	f001 fa48 	bl	8002f64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2025      	movs	r0, #37	; 0x25
 8001ada:	f001 f940 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ade:	2025      	movs	r0, #37	; 0x25
 8001ae0:	f001 f959 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 fff7 	bl	8002b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b4e:	f002 fe04 	bl	800475a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20001590 	.word	0x20001590

08001b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART1_IRQHandler+0x10>)
 8001b62:	f004 ff3d 	bl	80069e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000041c 	.word	0x2000041c

08001b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <_kill>:

int _kill(int pid, int sig)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b88:	f00a f95c 	bl	800be44 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2216      	movs	r2, #22
 8001b90:	601a      	str	r2, [r3, #0]
	return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_exit>:

void _exit (int status)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffe7 	bl	8001b7e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bb0:	e7fe      	b.n	8001bb0 <_exit+0x12>

08001bb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e00a      	b.n	8001bda <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	4601      	mov	r1, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	60ba      	str	r2, [r7, #8]
 8001bd0:	b2ca      	uxtb	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbf0      	blt.n	8001bc4 <_read+0x12>
	}

return len;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e009      	b.n	8001c12 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	60ba      	str	r2, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbf1      	blt.n	8001bfe <_write+0x12>
	}
	return len;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_close>:

int _close(int file)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <_isatty>:

int _isatty(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f00a f8c6 	bl	800be44 <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20005000 	.word	0x20005000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	2000087c 	.word	0x2000087c
 8001cec:	20001ab0 	.word	0x20001ab0

08001cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	; (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d22:	f7ff ffe5 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f00a f893 	bl	800be50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d2a:	f7ff f9b3 	bl	8001094 <main>
  bx lr
 8001d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001d38:	08010d34 	.word	0x08010d34
  ldr r2, =_sbss
 8001d3c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001d40:	20001aac 	.word	0x20001aac

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>

08001d46 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001d46:	b590      	push	{r4, r7, lr}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	461a      	mov	r2, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	72fb      	strb	r3, [r7, #11]
 8001d56:	4613      	mov	r3, r2
 8001d58:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685c      	ldr	r4, [r3, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6898      	ldr	r0, [r3, #8]
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	7af9      	ldrb	r1, [r7, #11]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	47a0      	blx	r4
 8001d6a:	6178      	str	r0, [r7, #20]

  return ret;
 8001d6c:	697b      	ldr	r3, [r7, #20]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}

08001d76 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8001d76:	b590      	push	{r4, r7, lr}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	461a      	mov	r2, r3
 8001d82:	460b      	mov	r3, r1
 8001d84:	72fb      	strb	r3, [r7, #11]
 8001d86:	4613      	mov	r3, r2
 8001d88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681c      	ldr	r4, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6898      	ldr	r0, [r3, #8]
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	7af9      	ldrb	r1, [r7, #11]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	47a0      	blx	r4
 8001d9a:	6178      	str	r0, [r7, #20]

  return ret;
 8001d9c:	697b      	ldr	r3, [r7, #20]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd90      	pop	{r4, r7, pc}
	...

08001da8 <ism330dhcx_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ff90 	bl	8000cdc <__aeabi_i2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <ism330dhcx_from_fs2g_to_mg+0x28>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe ffdf 	bl	8000d84 <__aeabi_fmul>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	3d79db23 	.word	0x3d79db23

08001dd4 <ism330dhcx_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t ism330dhcx_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff7a 	bl	8000cdc <__aeabi_i2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4904      	ldr	r1, [pc, #16]	; (8001dfc <ism330dhcx_from_fs2000dps_to_mdps+0x28>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffc9 	bl	8000d84 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	428c0000 	.word	0x428c0000

08001e00 <ism330dhcx_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t ism330dhcx_from_lsb_to_celsius(int16_t lsb)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff64 	bl	8000cdc <__aeabi_i2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f866 	bl	8000eec <__aeabi_fdiv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4904      	ldr	r1, [pc, #16]	; (8001e34 <ism330dhcx_from_lsb_to_celsius+0x34>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fea5 	bl	8000b74 <__addsf3>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	41c80000 	.word	0x41c80000

08001e38 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001e44:	f107 0208 	add.w	r2, r7, #8
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff7a 	bl	8001d46 <ism330dhcx_read_reg>
 8001e52:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	7a3b      	ldrb	r3, [r7, #8]
 8001e64:	f362 0383 	bfi	r3, r2, #2, #2
 8001e68:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2110      	movs	r1, #16
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff7f 	bl	8001d76 <ism330dhcx_write_reg>
 8001e78:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fd1c 	bl	80028d8 <ism330dhcx_fsm_enable_get>
 8001ea0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 80c4 	bne.w	8002032 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001eaa:	7b3b      	ldrb	r3, [r7, #12]
 8001eac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001eb0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001eb2:	7b3b      	ldrb	r3, [r7, #12]
 8001eb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001eb8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001ebe:	7b3b      	ldrb	r3, [r7, #12]
 8001ec0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ec4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ed0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001edc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ee8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001eee:	7b3b      	ldrb	r3, [r7, #12]
 8001ef0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ef4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001efa:	7b3b      	ldrb	r3, [r7, #12]
 8001efc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001f06:	7b7b      	ldrb	r3, [r7, #13]
 8001f08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001f12:	7b7b      	ldrb	r3, [r7, #13]
 8001f14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001f1e:	7b7b      	ldrb	r3, [r7, #13]
 8001f20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001f36:	7b7b      	ldrb	r3, [r7, #13]
 8001f38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001f42:	7b7b      	ldrb	r3, [r7, #13]
 8001f44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001f54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001f5a:	7b7b      	ldrb	r3, [r7, #13]
 8001f5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d163      	bne.n	8002032 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001f6a:	f107 030b 	add.w	r3, r7, #11
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fcdd 	bl	8002930 <ism330dhcx_fsm_data_rate_get>
 8001f76:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d159      	bne.n	8002032 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d853      	bhi.n	800202c <ism330dhcx_xl_data_rate_set+0x1a8>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <ism330dhcx_xl_data_rate_set+0x108>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001faf 	.word	0x08001faf
 8001f94:	08001fcd 	.word	0x08001fcd
 8001f98:	08001ff7 	.word	0x08001ff7
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001fa6:	e045      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	75fb      	strb	r3, [r7, #23]
            break;
 8001fac:	e042      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001fb8:	e03c      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	75fb      	strb	r3, [r7, #23]
            break;
 8001fc4:	e036      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	75fb      	strb	r3, [r7, #23]
            break;
 8001fca:	e033      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001fd6:	e02d      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	75fb      	strb	r3, [r7, #23]
            break;
 8001fe2:	e027      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001fea:	2303      	movs	r3, #3
 8001fec:	75fb      	strb	r3, [r7, #23]
            break;
 8001fee:	e021      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8001ff4:	e01e      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002000:	e018      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d102      	bne.n	800200e <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002008:	2304      	movs	r3, #4
 800200a:	75fb      	strb	r3, [r7, #23]
            break;
 800200c:	e012      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d102      	bne.n	800201a <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002014:	2304      	movs	r3, #4
 8002016:	75fb      	strb	r3, [r7, #23]
            break;
 8002018:	e00c      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d102      	bne.n	8002026 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002020:	2304      	movs	r3, #4
 8002022:	75fb      	strb	r3, [r7, #23]
            break;
 8002024:	e006      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	75fb      	strb	r3, [r7, #23]
            break;
 800202a:	e003      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	75fb      	strb	r3, [r7, #23]
            break;
 8002030:	e000      	b.n	8002034 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8002032:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d16d      	bne.n	800211a <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800203e:	f107 030a 	add.w	r3, r7, #10
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fcbb 	bl	80029c0 <ism330dhcx_mlc_get>
 800204a:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800204c:	7abb      	ldrb	r3, [r7, #10]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d163      	bne.n	800211a <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8002052:	f107 0309 	add.w	r3, r7, #9
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fcdb 	bl	8002a14 <ism330dhcx_mlc_data_rate_get>
 800205e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d159      	bne.n	800211a <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8002066:	7a7b      	ldrb	r3, [r7, #9]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d853      	bhi.n	8002114 <ism330dhcx_xl_data_rate_set+0x290>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	08002097 	.word	0x08002097
 800207c:	080020b5 	.word	0x080020b5
 8002080:	080020df 	.word	0x080020df
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800208e:	e045      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	75fb      	strb	r3, [r7, #23]
            break;
 8002094:	e042      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800209c:	2302      	movs	r3, #2
 800209e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80020a0:	e03c      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d102      	bne.n	80020ae <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80020a8:	2302      	movs	r3, #2
 80020aa:	75fb      	strb	r3, [r7, #23]
            break;
 80020ac:	e036      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	75fb      	strb	r3, [r7, #23]
            break;
 80020b2:	e033      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80020ba:	2303      	movs	r3, #3
 80020bc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80020be:	e02d      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80020c6:	2303      	movs	r3, #3
 80020c8:	75fb      	strb	r3, [r7, #23]
            break;
 80020ca:	e027      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d102      	bne.n	80020d8 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80020d2:	2303      	movs	r3, #3
 80020d4:	75fb      	strb	r3, [r7, #23]
            break;
 80020d6:	e021      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	75fb      	strb	r3, [r7, #23]
            break;
 80020dc:	e01e      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80020e4:	2304      	movs	r3, #4
 80020e6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80020e8:	e018      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80020f0:	2304      	movs	r3, #4
 80020f2:	75fb      	strb	r3, [r7, #23]
            break;
 80020f4:	e012      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d102      	bne.n	8002102 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80020fc:	2304      	movs	r3, #4
 80020fe:	75fb      	strb	r3, [r7, #23]
            break;
 8002100:	e00c      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d102      	bne.n	800210e <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002108:	2304      	movs	r3, #4
 800210a:	75fb      	strb	r3, [r7, #23]
            break;
 800210c:	e006      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	75fb      	strb	r3, [r7, #23]
            break;
 8002112:	e003      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	75fb      	strb	r3, [r7, #23]
            break;
 8002118:	e000      	b.n	800211c <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 800211a:	bf00      	nop
    }
  }

  if (ret == 0)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002122:	f107 0208 	add.w	r2, r7, #8
 8002126:	2301      	movs	r3, #1
 8002128:	2110      	movs	r1, #16
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fe0b 	bl	8001d46 <ism330dhcx_read_reg>
 8002130:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	b2da      	uxtb	r2, r3
 8002140:	7a3b      	ldrb	r3, [r7, #8]
 8002142:	f362 1307 	bfi	r3, r2, #4, #4
 8002146:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002148:	f107 0208 	add.w	r2, r7, #8
 800214c:	2301      	movs	r3, #1
 800214e:	2110      	movs	r1, #16
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fe10 	bl	8001d76 <ism330dhcx_write_reg>
 8002156:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002158:	693b      	ldr	r3, [r7, #16]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop

08002164 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8002170:	f107 0208 	add.w	r2, r7, #8
 8002174:	2301      	movs	r3, #1
 8002176:	2111      	movs	r1, #17
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fde4 	bl	8001d46 <ism330dhcx_read_reg>
 800217e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	b2da      	uxtb	r2, r3
 800218e:	7a3b      	ldrb	r3, [r7, #8]
 8002190:	f362 0303 	bfi	r3, r2, #0, #4
 8002194:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002196:	f107 0208 	add.w	r2, r7, #8
 800219a:	2301      	movs	r3, #1
 800219c:	2111      	movs	r1, #17
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fde9 	bl	8001d76 <ism330dhcx_write_reg>
 80021a4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fb86 	bl	80028d8 <ism330dhcx_fsm_enable_get>
 80021cc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80c4 	bne.w	800235e <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80021d6:	7b3b      	ldrb	r3, [r7, #12]
 80021d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80021de:	7b3b      	ldrb	r3, [r7, #12]
 80021e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021e4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80021ea:	7b3b      	ldrb	r3, [r7, #12]
 80021ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80021f6:	7b3b      	ldrb	r3, [r7, #12]
 80021f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002202:	7b3b      	ldrb	r3, [r7, #12]
 8002204:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800220a:	4313      	orrs	r3, r2
 800220c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800220e:	7b3b      	ldrb	r3, [r7, #12]
 8002210:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002214:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002216:	4313      	orrs	r3, r2
 8002218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800221a:	7b3b      	ldrb	r3, [r7, #12]
 800221c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002222:	4313      	orrs	r3, r2
 8002224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002226:	7b3b      	ldrb	r3, [r7, #12]
 8002228:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800222c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800222e:	4313      	orrs	r3, r2
 8002230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002232:	7b7b      	ldrb	r3, [r7, #13]
 8002234:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800223a:	4313      	orrs	r3, r2
 800223c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800223e:	7b7b      	ldrb	r3, [r7, #13]
 8002240:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002246:	4313      	orrs	r3, r2
 8002248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800224a:	7b7b      	ldrb	r3, [r7, #13]
 800224c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002252:	4313      	orrs	r3, r2
 8002254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002256:	7b7b      	ldrb	r3, [r7, #13]
 8002258:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800225c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800225e:	4313      	orrs	r3, r2
 8002260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002262:	7b7b      	ldrb	r3, [r7, #13]
 8002264:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800226a:	4313      	orrs	r3, r2
 800226c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800226e:	7b7b      	ldrb	r3, [r7, #13]
 8002270:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002276:	4313      	orrs	r3, r2
 8002278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002282:	4313      	orrs	r3, r2
 8002284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800228c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800228e:	4313      	orrs	r3, r2
 8002290:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002292:	2b01      	cmp	r3, #1
 8002294:	d163      	bne.n	800235e <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8002296:	f107 030b 	add.w	r3, r7, #11
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb47 	bl	8002930 <ism330dhcx_fsm_data_rate_get>
 80022a2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d159      	bne.n	800235e <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d853      	bhi.n	8002358 <ism330dhcx_gy_data_rate_set+0x1a8>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <ism330dhcx_gy_data_rate_set+0x108>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022db 	.word	0x080022db
 80022c0:	080022f9 	.word	0x080022f9
 80022c4:	08002323 	.word	0x08002323
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80022d2:	e045      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	75fb      	strb	r3, [r7, #23]
            break;
 80022d8:	e042      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80022e0:	2302      	movs	r3, #2
 80022e2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80022e4:	e03c      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d102      	bne.n	80022f2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80022ec:	2302      	movs	r3, #2
 80022ee:	75fb      	strb	r3, [r7, #23]
            break;
 80022f0:	e036      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	75fb      	strb	r3, [r7, #23]
            break;
 80022f6:	e033      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80022fe:	2303      	movs	r3, #3
 8002300:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002302:	e02d      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800230a:	2303      	movs	r3, #3
 800230c:	75fb      	strb	r3, [r7, #23]
            break;
 800230e:	e027      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d102      	bne.n	800231c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002316:	2303      	movs	r3, #3
 8002318:	75fb      	strb	r3, [r7, #23]
            break;
 800231a:	e021      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	75fb      	strb	r3, [r7, #23]
            break;
 8002320:	e01e      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002328:	2304      	movs	r3, #4
 800232a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800232c:	e018      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002334:	2304      	movs	r3, #4
 8002336:	75fb      	strb	r3, [r7, #23]
            break;
 8002338:	e012      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d102      	bne.n	8002346 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002340:	2304      	movs	r3, #4
 8002342:	75fb      	strb	r3, [r7, #23]
            break;
 8002344:	e00c      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d102      	bne.n	8002352 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800234c:	2304      	movs	r3, #4
 800234e:	75fb      	strb	r3, [r7, #23]
            break;
 8002350:	e006      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	75fb      	strb	r3, [r7, #23]
            break;
 8002356:	e003      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	75fb      	strb	r3, [r7, #23]
            break;
 800235c:	e000      	b.n	8002360 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800235e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d16d      	bne.n	8002446 <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800236a:	f107 030a 	add.w	r3, r7, #10
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb25 	bl	80029c0 <ism330dhcx_mlc_get>
 8002376:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8002378:	7abb      	ldrb	r3, [r7, #10]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d163      	bne.n	8002446 <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800237e:	f107 0309 	add.w	r3, r7, #9
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fb45 	bl	8002a14 <ism330dhcx_mlc_data_rate_get>
 800238a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d159      	bne.n	8002446 <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8002392:	7a7b      	ldrb	r3, [r7, #9]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d853      	bhi.n	8002440 <ism330dhcx_gy_data_rate_set+0x290>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <ism330dhcx_gy_data_rate_set+0x1f0>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023e1 	.word	0x080023e1
 80023ac:	0800240b 	.word	0x0800240b
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80023ba:	e045      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	75fb      	strb	r3, [r7, #23]
            break;
 80023c0:	e042      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80023c8:	2302      	movs	r3, #2
 80023ca:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80023cc:	e03c      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80023d4:	2302      	movs	r3, #2
 80023d6:	75fb      	strb	r3, [r7, #23]
            break;
 80023d8:	e036      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	75fb      	strb	r3, [r7, #23]
            break;
 80023de:	e033      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80023e6:	2303      	movs	r3, #3
 80023e8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80023ea:	e02d      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80023f2:	2303      	movs	r3, #3
 80023f4:	75fb      	strb	r3, [r7, #23]
            break;
 80023f6:	e027      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d102      	bne.n	8002404 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80023fe:	2303      	movs	r3, #3
 8002400:	75fb      	strb	r3, [r7, #23]
            break;
 8002402:	e021      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	75fb      	strb	r3, [r7, #23]
            break;
 8002408:	e01e      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002410:	2304      	movs	r3, #4
 8002412:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002414:	e018      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800241c:	2304      	movs	r3, #4
 800241e:	75fb      	strb	r3, [r7, #23]
            break;
 8002420:	e012      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d102      	bne.n	800242e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002428:	2304      	movs	r3, #4
 800242a:	75fb      	strb	r3, [r7, #23]
            break;
 800242c:	e00c      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d102      	bne.n	800243a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002434:	2304      	movs	r3, #4
 8002436:	75fb      	strb	r3, [r7, #23]
            break;
 8002438:	e006      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	75fb      	strb	r3, [r7, #23]
            break;
 800243e:	e003      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	75fb      	strb	r3, [r7, #23]
            break;
 8002444:	e000      	b.n	8002448 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8002446:	bf00      	nop
    }
  }

  if (ret == 0)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	2301      	movs	r3, #1
 8002454:	2111      	movs	r1, #17
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fc75 	bl	8001d46 <ism330dhcx_read_reg>
 800245c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	7a3b      	ldrb	r3, [r7, #8]
 800246e:	f362 1307 	bfi	r3, r2, #4, #4
 8002472:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002474:	f107 0208 	add.w	r2, r7, #8
 8002478:	2301      	movs	r3, #1
 800247a:	2111      	movs	r1, #17
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fc7a 	bl	8001d76 <ism330dhcx_write_reg>
 8002482:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8002484:	693b      	ldr	r3, [r7, #16]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop

08002490 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800249c:	f107 0208 	add.w	r2, r7, #8
 80024a0:	2301      	movs	r3, #1
 80024a2:	2112      	movs	r1, #18
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fc4e 	bl	8001d46 <ism330dhcx_read_reg>
 80024aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	7a3b      	ldrb	r3, [r7, #8]
 80024bc:	f362 1386 	bfi	r3, r2, #6, #1
 80024c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80024c2:	f107 0208 	add.w	r2, r7, #8
 80024c6:	2301      	movs	r3, #1
 80024c8:	2112      	movs	r1, #18
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fc53 	bl	8001d76 <ism330dhcx_write_reg>
 80024d0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <ism330dhcx_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  ism330dhcx_status_reg_t status_reg;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
 80024e6:	f107 0208 	add.w	r2, r7, #8
 80024ea:	2301      	movs	r3, #1
 80024ec:	211e      	movs	r1, #30
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fc29 	bl	8001d46 <ism330dhcx_read_reg>
 80024f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80024f6:	7a3b      	ldrb	r3, [r7, #8]
 80024f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	701a      	strb	r2, [r3, #0]

  return ret;
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <ism330dhcx_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  ism330dhcx_status_reg_t status_reg;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
 8002518:	f107 0208 	add.w	r2, r7, #8
 800251c:	2301      	movs	r3, #1
 800251e:	211e      	movs	r1, #30
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fc10 	bl	8001d46 <ism330dhcx_read_reg>
 8002526:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8002528:	7a3b      	ldrb	r3, [r7, #8]
 800252a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	701a      	strb	r2, [r3, #0]

  return ret;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <ism330dhcx_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                            uint8_t *val)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  ism330dhcx_status_reg_t status_reg;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
 800254a:	f107 0208 	add.w	r2, r7, #8
 800254e:	2301      	movs	r3, #1
 8002550:	211e      	movs	r1, #30
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fbf7 	bl	8001d46 <ism330dhcx_read_reg>
 8002558:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800255a:	7a3b      	ldrb	r3, [r7, #8]
 800255c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	701a      	strb	r2, [r3, #0]

  return ret;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ism330dhcx_temperature_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_temperature_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUT_TEMP_L, buff, 2);
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	2302      	movs	r3, #2
 8002582:	2120      	movs	r1, #32
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fbde 	bl	8001d46 <ism330dhcx_read_reg>
 800258a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800258c:	7a7b      	ldrb	r3, [r7, #9]
 800258e:	b21a      	sxth	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259a:	b29b      	uxth	r3, r3
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b29a      	uxth	r2, r3
 80025a0:	7a3b      	ldrb	r3, [r7, #8]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80025c2:	f107 020c 	add.w	r2, r7, #12
 80025c6:	2306      	movs	r3, #6
 80025c8:	2122      	movs	r1, #34	; 0x22
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fbbb 	bl	8001d46 <ism330dhcx_read_reg>
 80025d0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80025d2:	7b7b      	ldrb	r3, [r7, #13]
 80025d4:	b21a      	sxth	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	7b3b      	ldrb	r3, [r7, #12]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3302      	adds	r3, #2
 80025fa:	b212      	sxth	r2, r2
 80025fc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	3302      	adds	r3, #2
 8002602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002606:	b29b      	uxth	r3, r3
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	b29a      	uxth	r2, r3
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b29a      	uxth	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3302      	adds	r3, #2
 8002618:	b212      	sxth	r2, r2
 800261a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800261c:	7c7a      	ldrb	r2, [r7, #17]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	3304      	adds	r3, #4
 8002622:	b212      	sxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262e:	b29b      	uxth	r3, r3
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	b29a      	uxth	r2, r3
 8002634:	7c3b      	ldrb	r3, [r7, #16]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4413      	add	r3, r2
 800263a:	b29a      	uxth	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	3304      	adds	r3, #4
 8002640:	b212      	sxth	r2, r2
 8002642:	801a      	strh	r2, [r3, #0]

  return ret;
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8002658:	f107 020c 	add.w	r2, r7, #12
 800265c:	2306      	movs	r3, #6
 800265e:	2128      	movs	r1, #40	; 0x28
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fb70 	bl	8001d46 <ism330dhcx_read_reg>
 8002666:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002668:	7b7b      	ldrb	r3, [r7, #13]
 800266a:	b21a      	sxth	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002676:	b29b      	uxth	r3, r3
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b29a      	uxth	r2, r3
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4413      	add	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	b21a      	sxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3302      	adds	r3, #2
 8002690:	b212      	sxth	r2, r2
 8002692:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3302      	adds	r3, #2
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	b29b      	uxth	r3, r3
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	7bbb      	ldrb	r3, [r7, #14]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3302      	adds	r3, #2
 80026ae:	b212      	sxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80026b2:	7c7a      	ldrb	r2, [r7, #17]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3304      	adds	r3, #4
 80026b8:	b212      	sxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3304      	adds	r3, #4
 80026c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	7c3b      	ldrb	r3, [r7, #16]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3304      	adds	r3, #4
 80026d6:	b212      	sxth	r2, r2
 80026d8:	801a      	strh	r2, [r3, #0]

  return ret;
 80026da:	697b      	ldr	r3, [r7, #20]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80026f0:	f107 0208 	add.w	r2, r7, #8
 80026f4:	2301      	movs	r3, #1
 80026f6:	2118      	movs	r1, #24
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fb24 	bl	8001d46 <ism330dhcx_read_reg>
 80026fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	7a3b      	ldrb	r3, [r7, #8]
 8002710:	f362 0341 	bfi	r3, r2, #1, #1
 8002714:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8002716:	f107 0208 	add.w	r2, r7, #8
 800271a:	2301      	movs	r3, #1
 800271c:	2118      	movs	r1, #24
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fb29 	bl	8001d76 <ism330dhcx_write_reg>
 8002724:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800273c:	f107 0208 	add.w	r2, r7, #8
 8002740:	2301      	movs	r3, #1
 8002742:	2101      	movs	r1, #1
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fafe 	bl	8001d46 <ism330dhcx_read_reg>
 800274a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	7a3b      	ldrb	r3, [r7, #8]
 800275c:	f362 1387 	bfi	r3, r2, #6, #2
 8002760:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002762:	f107 0208 	add.w	r2, r7, #8
 8002766:	2301      	movs	r3, #1
 8002768:	2101      	movs	r1, #1
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fb03 	bl	8001d76 <ism330dhcx_write_reg>
 8002770:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8002786:	2301      	movs	r3, #1
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	210f      	movs	r1, #15
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fada 	bl	8001d46 <ism330dhcx_read_reg>
 8002792:	60f8      	str	r0, [r7, #12]

  return ret;
 8002794:	68fb      	ldr	r3, [r7, #12]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80027aa:	f107 0208 	add.w	r2, r7, #8
 80027ae:	2301      	movs	r3, #1
 80027b0:	2112      	movs	r1, #18
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fac7 	bl	8001d46 <ism330dhcx_read_reg>
 80027b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	7a3b      	ldrb	r3, [r7, #8]
 80027ca:	f362 0300 	bfi	r3, r2, #0, #1
 80027ce:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80027d0:	f107 0208 	add.w	r2, r7, #8
 80027d4:	2301      	movs	r3, #1
 80027d6:	2112      	movs	r1, #18
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff facc 	bl	8001d76 <ism330dhcx_write_reg>
 80027de:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80027e0:	68fb      	ldr	r3, [r7, #12]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80027f4:	f107 0208 	add.w	r2, r7, #8
 80027f8:	2301      	movs	r3, #1
 80027fa:	2112      	movs	r1, #18
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff faa2 	bl	8001d46 <ism330dhcx_read_reg>
 8002802:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8002804:	7a3b      	ldrb	r3, [r7, #8]
 8002806:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	701a      	strb	r2, [r3, #0]

  return ret;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <ism330dhcx_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8002828:	f107 0208 	add.w	r2, r7, #8
 800282c:	2301      	movs	r3, #1
 800282e:	2110      	movs	r1, #16
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fa88 	bl	8001d46 <ism330dhcx_read_reg>
 8002836:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <ism330dhcx_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	7a3b      	ldrb	r3, [r7, #8]
 8002848:	f362 0341 	bfi	r3, r2, #1, #1
 800284c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	2301      	movs	r3, #1
 8002854:	2110      	movs	r1, #16
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fa8d 	bl	8001d76 <ism330dhcx_write_reg>
 800285c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <ism330dhcx_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                         ism330dhcx_hp_slope_xl_en_t val)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
 8002874:	f107 0208 	add.w	r2, r7, #8
 8002878:	2301      	movs	r3, #1
 800287a:	2117      	movs	r1, #23
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fa62 	bl	8001d46 <ism330dhcx_read_reg>
 8002882:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d121      	bne.n	80028ce <ism330dhcx_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	7a3b      	ldrb	r3, [r7, #8]
 8002896:	f362 0382 	bfi	r3, r2, #2, #1
 800289a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	7a3b      	ldrb	r3, [r7, #8]
 80028a8:	f362 1304 	bfi	r3, r2, #4, #1
 80028ac:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	7a3b      	ldrb	r3, [r7, #8]
 80028b8:	f362 1347 	bfi	r3, r2, #5, #3
 80028bc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL8_XL,
 80028be:	f107 0208 	add.w	r2, r7, #8
 80028c2:	2301      	movs	r3, #1
 80028c4:	2117      	movs	r1, #23
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fa55 	bl	8001d76 <ism330dhcx_write_reg>
 80028cc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80028e2:	2102      	movs	r1, #2
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff23 	bl	8002730 <ism330dhcx_mem_bank_set>
 80028ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80028f2:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80028f4:	2301      	movs	r3, #1
 80028f6:	2146      	movs	r1, #70	; 0x46
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fa24 	bl	8001d46 <ism330dhcx_read_reg>
 80028fe:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800290a:	2301      	movs	r3, #1
 800290c:	2147      	movs	r1, #71	; 0x47
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fa19 	bl	8001d46 <ism330dhcx_read_reg>
 8002914:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800291c:	2100      	movs	r1, #0
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff06 	bl	8002730 <ism330dhcx_mem_bank_set>
 8002924:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800293a:	2102      	movs	r1, #2
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fef7 	bl	8002730 <ism330dhcx_mem_bank_set>
 8002942:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800294a:	f107 0208 	add.w	r2, r7, #8
 800294e:	2301      	movs	r3, #1
 8002950:	215f      	movs	r1, #95	; 0x5f
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff f9f7 	bl	8001d46 <ism330dhcx_read_reg>
 8002958:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fee4 	bl	8002730 <ism330dhcx_mem_bank_set>
 8002968:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800296a:	7a3b      	ldrb	r3, [r7, #8]
 800296c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b03      	cmp	r3, #3
 8002974:	d81a      	bhi.n	80029ac <ism330dhcx_fsm_data_rate_get+0x7c>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002995 	.word	0x08002995
 8002984:	0800299d 	.word	0x0800299d
 8002988:	080029a5 	.word	0x080029a5
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
      break;
 8002992:	e00f      	b.n	80029b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
      break;
 800299a:	e00b      	b.n	80029b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
      break;
 80029a2:	e007      	b.n	80029b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2203      	movs	r2, #3
 80029a8:	701a      	strb	r2, [r3, #0]
      break;
 80029aa:	e003      	b.n	80029b4 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
      break;
 80029b2:	bf00      	nop
  }

  return ret;
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop

080029c0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80029ca:	2102      	movs	r1, #2
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff feaf 	bl	8002730 <ism330dhcx_mem_bank_set>
 80029d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80029da:	f107 0208 	add.w	r2, r7, #8
 80029de:	2301      	movs	r3, #1
 80029e0:	2105      	movs	r1, #5
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff f9af 	bl	8001d46 <ism330dhcx_read_reg>
 80029e8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80029f0:	2100      	movs	r1, #0
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fe9c 	bl	8002730 <ism330dhcx_mem_bank_set>
 80029f8:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80029fa:	7a3b      	ldrb	r3, [r7, #8]
 80029fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002a1e:	2102      	movs	r1, #2
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe85 	bl	8002730 <ism330dhcx_mem_bank_set>
 8002a26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8002a2e:	f107 0208 	add.w	r2, r7, #8
 8002a32:	2301      	movs	r3, #1
 8002a34:	2160      	movs	r1, #96	; 0x60
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff f985 	bl	8001d46 <ism330dhcx_read_reg>
 8002a3c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d12a      	bne.n	8002a9a <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8002a44:	7a3b      	ldrb	r3, [r7, #8]
 8002a46:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d81b      	bhi.n	8002a88 <ism330dhcx_mlc_data_rate_get+0x74>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <ism330dhcx_mlc_data_rate_get+0x44>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a79 	.word	0x08002a79
 8002a64:	08002a81 	.word	0x08002a81
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
        break;
 8002a6e:	e00f      	b.n	8002a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
        break;
 8002a76:	e00b      	b.n	8002a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
        break;
 8002a7e:	e007      	b.n	8002a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2203      	movs	r2, #3
 8002a84:	701a      	strb	r2, [r3, #0]
        break;
 8002a86:	e003      	b.n	8002a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
        break;
 8002a8e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002a90:	2100      	movs	r1, #0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fe4c 	bl	8002730 <ism330dhcx_mem_bank_set>
 8002a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_Init+0x28>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_Init+0x28>)
 8002aae:	f043 0310 	orr.w	r3, r3, #16
 8002ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f947 	bl	8002d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aba:	200f      	movs	r0, #15
 8002abc:	f000 f808 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac0:	f7fe ff0a 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000

08002ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x54>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x58>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f95f 	bl	8002db2 <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b0c:	f000 f927 	bl	8002d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <HAL_InitTick+0x5c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_IncTick+0x1c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x20>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_IncTick+0x20>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000880 	.word	0x20000880

08002b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return uwTick;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_GetTick+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000880 	.word	0x20000880

08002b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff fff0 	bl	8002b54 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffe0 	bl	8002b54 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
  {
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__NVIC_EnableIRQ+0x34>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	; (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	; (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
         );
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d14:	d301      	bcc.n	8002d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00f      	b.n	8002d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <SysTick_Config+0x40>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d22:	210f      	movs	r1, #15
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d28:	f7ff ff90 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SysTick_Config+0x40>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <SysTick_Config+0x40>)
 8002d34:	2207      	movs	r2, #7
 8002d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	e000e010 	.word	0xe000e010

08002d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff2d 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff42 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff90 	bl	8002ca0 <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5f 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff35 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa2 	bl	8002d04 <SysTick_Config>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00e      	b.n	8002dfa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	795b      	ldrb	r3, [r3, #5]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fe fda5 	bl	800193c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e020      	b.n	8002e6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 020e 	bic.w	r2, r2, #14
 8002e38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d005      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2204      	movs	r2, #4
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e051      	b.n	8002f3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 020e 	bic.w	r2, r2, #14
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_DMA_Abort_IT+0xd0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d029      	beq.n	8002f18 <HAL_DMA_Abort_IT+0xa0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_DMA_Abort_IT+0xd4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x9c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <HAL_DMA_Abort_IT+0xd8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d01a      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x96>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <HAL_DMA_Abort_IT+0xdc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d012      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x90>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_DMA_Abort_IT+0xe0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00a      	beq.n	8002f02 <HAL_DMA_Abort_IT+0x8a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_DMA_Abort_IT+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d102      	bne.n	8002efc <HAL_DMA_Abort_IT+0x84>
 8002ef6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002efa:	e00e      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f00:	e00b      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f06:	e008      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0c:	e005      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	e002      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002f14:	2310      	movs	r3, #16
 8002f16:	e000      	b.n	8002f1a <HAL_DMA_Abort_IT+0xa2>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_DMA_Abort_IT+0xe8>)
 8002f1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
    } 
  }
  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40020008 	.word	0x40020008
 8002f4c:	4002001c 	.word	0x4002001c
 8002f50:	40020030 	.word	0x40020030
 8002f54:	40020044 	.word	0x40020044
 8002f58:	40020058 	.word	0x40020058
 8002f5c:	4002006c 	.word	0x4002006c
 8002f60:	40020000 	.word	0x40020000

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b08b      	sub	sp, #44	; 0x2c
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f76:	e169      	b.n	800324c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 8158 	bne.w	8003246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a9a      	ldr	r2, [pc, #616]	; (8003204 <HAL_GPIO_Init+0x2a0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d05e      	beq.n	800305e <HAL_GPIO_Init+0xfa>
 8002fa0:	4a98      	ldr	r2, [pc, #608]	; (8003204 <HAL_GPIO_Init+0x2a0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d875      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fa6:	4a98      	ldr	r2, [pc, #608]	; (8003208 <HAL_GPIO_Init+0x2a4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d058      	beq.n	800305e <HAL_GPIO_Init+0xfa>
 8002fac:	4a96      	ldr	r2, [pc, #600]	; (8003208 <HAL_GPIO_Init+0x2a4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d86f      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fb2:	4a96      	ldr	r2, [pc, #600]	; (800320c <HAL_GPIO_Init+0x2a8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d052      	beq.n	800305e <HAL_GPIO_Init+0xfa>
 8002fb8:	4a94      	ldr	r2, [pc, #592]	; (800320c <HAL_GPIO_Init+0x2a8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d869      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fbe:	4a94      	ldr	r2, [pc, #592]	; (8003210 <HAL_GPIO_Init+0x2ac>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d04c      	beq.n	800305e <HAL_GPIO_Init+0xfa>
 8002fc4:	4a92      	ldr	r2, [pc, #584]	; (8003210 <HAL_GPIO_Init+0x2ac>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d863      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fca:	4a92      	ldr	r2, [pc, #584]	; (8003214 <HAL_GPIO_Init+0x2b0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d046      	beq.n	800305e <HAL_GPIO_Init+0xfa>
 8002fd0:	4a90      	ldr	r2, [pc, #576]	; (8003214 <HAL_GPIO_Init+0x2b0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d85d      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fd6:	2b12      	cmp	r3, #18
 8002fd8:	d82a      	bhi.n	8003030 <HAL_GPIO_Init+0xcc>
 8002fda:	2b12      	cmp	r3, #18
 8002fdc:	d859      	bhi.n	8003092 <HAL_GPIO_Init+0x12e>
 8002fde:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <HAL_GPIO_Init+0x80>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	0800305f 	.word	0x0800305f
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	0800304b 	.word	0x0800304b
 8002ff0:	0800308d 	.word	0x0800308d
 8002ff4:	08003093 	.word	0x08003093
 8002ff8:	08003093 	.word	0x08003093
 8002ffc:	08003093 	.word	0x08003093
 8003000:	08003093 	.word	0x08003093
 8003004:	08003093 	.word	0x08003093
 8003008:	08003093 	.word	0x08003093
 800300c:	08003093 	.word	0x08003093
 8003010:	08003093 	.word	0x08003093
 8003014:	08003093 	.word	0x08003093
 8003018:	08003093 	.word	0x08003093
 800301c:	08003093 	.word	0x08003093
 8003020:	08003093 	.word	0x08003093
 8003024:	08003093 	.word	0x08003093
 8003028:	08003041 	.word	0x08003041
 800302c:	08003055 	.word	0x08003055
 8003030:	4a79      	ldr	r2, [pc, #484]	; (8003218 <HAL_GPIO_Init+0x2b4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003036:	e02c      	b.n	8003092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e029      	b.n	8003094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	3304      	adds	r3, #4
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e024      	b.n	8003094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	3308      	adds	r3, #8
 8003050:	623b      	str	r3, [r7, #32]
          break;
 8003052:	e01f      	b.n	8003094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	330c      	adds	r3, #12
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e01a      	b.n	8003094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003066:	2304      	movs	r3, #4
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e013      	b.n	8003094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003074:	2308      	movs	r3, #8
 8003076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	611a      	str	r2, [r3, #16]
          break;
 800307e:	e009      	b.n	8003094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003080:	2308      	movs	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	615a      	str	r2, [r3, #20]
          break;
 800308a:	e003      	b.n	8003094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	e000      	b.n	8003094 <HAL_GPIO_Init+0x130>
          break;
 8003092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2bff      	cmp	r3, #255	; 0xff
 8003098:	d801      	bhi.n	800309e <HAL_GPIO_Init+0x13a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	e001      	b.n	80030a2 <HAL_GPIO_Init+0x13e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d802      	bhi.n	80030b0 <HAL_GPIO_Init+0x14c>
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_Init+0x152>
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3b08      	subs	r3, #8
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	210f      	movs	r1, #15
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80b1 	beq.w	8003246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_GPIO_Init+0x2b8>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x2b8>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6193      	str	r3, [r2, #24]
 80030f0:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_GPIO_Init+0x2b8>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030fc:	4a48      	ldr	r2, [pc, #288]	; (8003220 <HAL_GPIO_Init+0x2bc>)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a40      	ldr	r2, [pc, #256]	; (8003224 <HAL_GPIO_Init+0x2c0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_GPIO_Init+0x1ec>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <HAL_GPIO_Init+0x2c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00d      	beq.n	800314c <HAL_GPIO_Init+0x1e8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3e      	ldr	r2, [pc, #248]	; (800322c <HAL_GPIO_Init+0x2c8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <HAL_GPIO_Init+0x1e4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <HAL_GPIO_Init+0x2cc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_GPIO_Init+0x1e0>
 8003140:	2303      	movs	r3, #3
 8003142:	e006      	b.n	8003152 <HAL_GPIO_Init+0x1ee>
 8003144:	2304      	movs	r3, #4
 8003146:	e004      	b.n	8003152 <HAL_GPIO_Init+0x1ee>
 8003148:	2302      	movs	r3, #2
 800314a:	e002      	b.n	8003152 <HAL_GPIO_Init+0x1ee>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_GPIO_Init+0x1ee>
 8003150:	2300      	movs	r3, #0
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	f002 0203 	and.w	r2, r2, #3
 8003158:	0092      	lsls	r2, r2, #2
 800315a:	4093      	lsls	r3, r2
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003162:	492f      	ldr	r1, [pc, #188]	; (8003220 <HAL_GPIO_Init+0x2bc>)
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	3302      	adds	r3, #2
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	492c      	ldr	r1, [pc, #176]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	43db      	mvns	r3, r3
 8003192:	4928      	ldr	r1, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 8003194:	4013      	ands	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	e006      	b.n	80031c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	491e      	ldr	r1, [pc, #120]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031bc:	4013      	ands	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	4918      	ldr	r1, [pc, #96]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
 80031d8:	e006      	b.n	80031e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	4914      	ldr	r1, [pc, #80]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d021      	beq.n	8003238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_GPIO_Init+0x2d0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
 8003200:	e021      	b.n	8003246 <HAL_GPIO_Init+0x2e2>
 8003202:	bf00      	nop
 8003204:	10320000 	.word	0x10320000
 8003208:	10310000 	.word	0x10310000
 800320c:	10220000 	.word	0x10220000
 8003210:	10210000 	.word	0x10210000
 8003214:	10120000 	.word	0x10120000
 8003218:	10110000 	.word	0x10110000
 800321c:	40021000 	.word	0x40021000
 8003220:	40010000 	.word	0x40010000
 8003224:	40010800 	.word	0x40010800
 8003228:	40010c00 	.word	0x40010c00
 800322c:	40011000 	.word	0x40011000
 8003230:	40011400 	.word	0x40011400
 8003234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_GPIO_Init+0x304>)
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	43db      	mvns	r3, r3
 8003240:	4909      	ldr	r1, [pc, #36]	; (8003268 <HAL_GPIO_Init+0x304>)
 8003242:	4013      	ands	r3, r2
 8003244:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	3301      	adds	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	f47f ae8e 	bne.w	8002f78 <HAL_GPIO_Init+0x14>
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	372c      	adds	r7, #44	; 0x2c
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40010400 	.word	0x40010400

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fb58 	bl	8001978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f003 f992 	bl	8006628 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	; (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353e:	f7ff fb09 	bl	8002b54 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	f040 80d9 	bne.w	8003704 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2319      	movs	r3, #25
 8003558:	2201      	movs	r2, #1
 800355a:	496d      	ldr	r1, [pc, #436]	; (8003710 <HAL_I2C_Mem_Write+0x1ec>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fdef 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Write+0x56>
 8003576:	2302      	movs	r3, #2
 8003578:	e0c5      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d007      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2221      	movs	r2, #33	; 0x21
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_I2C_Mem_Write+0x1f0>)
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e2:	88f8      	ldrh	r0, [r7, #6]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4603      	mov	r3, r0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fc26 	bl	8003e44 <I2C_RequestMemoryWrite>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d052      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e081      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fe70 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x180>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1aa      	bne.n	8003602 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fe5c 	bl	800436e <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e016      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003736:	f7ff fa0d 	bl	8002b54 <HAL_GetTick>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	f040 8244 	bne.w	8003bd2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2319      	movs	r3, #25
 8003750:	2201      	movs	r2, #1
 8003752:	4982      	ldr	r1, [pc, #520]	; (800395c <HAL_I2C_Mem_Read+0x244>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fcf3 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003760:	2302      	movs	r3, #2
 8003762:	e237      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_I2C_Mem_Read+0x5a>
 800376e:	2302      	movs	r3, #2
 8003770:	e230      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d007      	beq.n	8003798 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2222      	movs	r2, #34	; 0x22
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a62      	ldr	r2, [pc, #392]	; (8003960 <HAL_I2C_Mem_Read+0x248>)
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037da:	88f8      	ldrh	r0, [r7, #6]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4603      	mov	r3, r0
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fbc0 	bl	8003f70 <I2C_RequestMemoryRead>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1ec      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d113      	bne.n	800382a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e1c0      	b.n	8003bac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	2b01      	cmp	r3, #1
 8003830:	d11e      	bne.n	8003870 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003842:	b672      	cpsid	i
}
 8003844:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800386c:	b662      	cpsie	i
}
 800386e:	e035      	b.n	80038dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11e      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003886:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003888:	b672      	cpsid	i
}
 800388a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b2:	b662      	cpsie	i
}
 80038b4:	e012      	b.n	80038dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038dc:	e166      	b.n	8003bac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	f200 811f 	bhi.w	8003b26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d123      	bne.n	8003938 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fd7b 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e167      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003936:	e139      	b.n	8003bac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b02      	cmp	r3, #2
 800393e:	d152      	bne.n	80039e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2200      	movs	r2, #0
 8003948:	4906      	ldr	r1, [pc, #24]	; (8003964 <HAL_I2C_Mem_Read+0x24c>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fbf8 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e13c      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
 800395a:	bf00      	nop
 800395c:	00100002 	.word	0x00100002
 8003960:	ffff0000 	.word	0xffff0000
 8003964:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003968:	b672      	cpsid	i
}
 800396a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ae:	b662      	cpsie	i
}
 80039b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e4:	e0e2      	b.n	8003bac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2200      	movs	r2, #0
 80039ee:	497b      	ldr	r1, [pc, #492]	; (8003bdc <HAL_I2C_Mem_Read+0x4c4>)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fba5 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0e9      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a46:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_I2C_Mem_Read+0x4c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	08db      	lsrs	r3, r3, #3
 8003a4c:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <HAL_I2C_Mem_Read+0x4cc>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a1a      	lsrs	r2, r3, #8
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00da      	lsls	r2, r3, #3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d118      	bne.n	8003a9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a8e:	b662      	cpsie	i
}
 8003a90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e09a      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d1d9      	bne.n	8003a60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aee:	b662      	cpsie	i
}
 8003af0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b24:	e042      	b.n	8003bac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fc60 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e04c      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d118      	bne.n	8003bac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f47f ae94 	bne.w	80038de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
  }
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	; 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	00010004 	.word	0x00010004
 8003be0:	20000000 	.word	0x20000000
 8003be4:	14f8b589 	.word	0x14f8b589

08003be8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7fe ffac 	bl	8002b54 <HAL_GetTick>
 8003bfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 8111 	bne.w	8003e32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	4988      	ldr	r1, [pc, #544]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa90 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	e104      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2C_IsDeviceReady+0x50>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0fd      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <HAL_I2C_IsDeviceReady+0x258>)
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa4e 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	d103      	bne.n	8003cc2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0b6      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe ff3d 	bl	8002b54 <HAL_GetTick>
 8003cda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d0a:	e025      	b.n	8003d58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d0c:	f7fe ff22 	bl	8002b54 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <HAL_I2C_IsDeviceReady+0x13a>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22a0      	movs	r2, #160	; 0xa0
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2ba0      	cmp	r3, #160	; 0xa0
 8003d62:	d005      	beq.n	8003d70 <HAL_I2C_IsDeviceReady+0x188>
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_I2C_IsDeviceReady+0x188>
 8003d6a:	7dbb      	ldrb	r3, [r7, #22]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0cd      	beq.n	8003d0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d129      	bne.n	8003dda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	4921      	ldr	r1, [pc, #132]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9c2 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e036      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e02c      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2319      	movs	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	490f      	ldr	r1, [pc, #60]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f99e 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e012      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f4ff af32 	bcc.w	8003c82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	00100002 	.word	0x00100002
 8003e40:	ffff0000 	.word	0xffff0000

08003e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f960 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d103      	bne.n	8003e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e05f      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	492d      	ldr	r1, [pc, #180]	; (8003f6c <I2C_RequestMemoryWrite+0x128>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f998 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e04c      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa02 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02b      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e021      	b.n	8003f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f9dc 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e005      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f8c2 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd0:	d103      	bne.n	8003fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0aa      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	4952      	ldr	r1, [pc, #328]	; (800413c <I2C_RequestMemoryRead+0x1cc>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f8fa 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e097      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f964 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e076      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404c:	893b      	ldrh	r3, [r7, #8]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e021      	b.n	800409c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	b29b      	uxth	r3, r3
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f93e 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e050      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004092:	893b      	ldrh	r3, [r7, #8]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	6a39      	ldr	r1, [r7, #32]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f923 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d107      	bne.n	80040c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e035      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2200      	movs	r2, #0
 80040e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f82b 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	d103      	bne.n	8004108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e013      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	4906      	ldr	r1, [pc, #24]	; (800413c <I2C_RequestMemoryRead+0x1cc>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f863 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e025      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004158:	d021      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fcfb 	bl	8002b54 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e023      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10d      	bne.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	e00c      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0b6      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fc:	e051      	b.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d123      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e046      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fc79 	bl	8002b54 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e020      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e00b      	b.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d18d      	bne.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8ce 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fc1f 	bl	8002b54 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d1ca      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437a:	e02d      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f88d 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e02d      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d021      	beq.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fbde 	bl	8002b54 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d1ca      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fc:	e042      	b.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d119      	bne.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e029      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fe fb88 	bl	8002b54 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d1b5      	bne.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d11b      	bne.n	80044ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af06      	add	r7, sp, #24
 80044fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0fd      	b.n	8004706 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f007 f9e6 	bl	800b8f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2203      	movs	r2, #3
 8004528:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f002 fe73 	bl	800721c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	687e      	ldr	r6, [r7, #4]
 800453e:	466d      	mov	r5, sp
 8004540:	f106 0410 	add.w	r4, r6, #16
 8004544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	1d33      	adds	r3, r6, #4
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	6838      	ldr	r0, [r7, #0]
 8004552:	f002 fe3d 	bl	80071d0 <USB_CoreInit>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0ce      	b.n	8004706 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f002 fe6e 	bl	8007250 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e04c      	b.n	8004614 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	440b      	add	r3, r1
 800458a:	3301      	adds	r3, #1
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	b298      	uxth	r0, r3
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	440b      	add	r3, r1
 80045b6:	3336      	adds	r3, #54	; 0x36
 80045b8:	4602      	mov	r2, r0
 80045ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3303      	adds	r3, #3
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	3338      	adds	r3, #56	; 0x38
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	333c      	adds	r3, #60	; 0x3c
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	3340      	adds	r3, #64	; 0x40
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	3301      	adds	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d3ad      	bcc.n	800457a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e044      	b.n	80046ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	440b      	add	r3, r1
 800468a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	440b      	add	r3, r1
 80046a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	3301      	adds	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d3b5      	bcc.n	8004624 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	687e      	ldr	r6, [r7, #4]
 80046c0:	466d      	mov	r5, sp
 80046c2:	f106 0410 	add.w	r4, r6, #16
 80046c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	602b      	str	r3, [r5, #0]
 80046ce:	1d33      	adds	r3, r6, #4
 80046d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f002 fdc8 	bl	8007268 <USB_DevInit>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00d      	b.n	8004706 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f005 fa7a 	bl	8009bf8 <USB_DevDisconnect>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_PCD_Start+0x16>
 8004720:	2302      	movs	r3, #2
 8004722:	e016      	b.n	8004752 <HAL_PCD_Start+0x44>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f002 fd5d 	bl	80071f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004736:	2101      	movs	r1, #1
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f007 fb4c 	bl	800bdd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f005 fa4e 	bl	8009be4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b088      	sub	sp, #32
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f005 fa50 	bl	8009c0c <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d102      	bne.n	800477e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb5f 	bl	8004e3c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f005 fa42 	bl	8009c0c <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004792:	d112      	bne.n	80047ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a6:	b292      	uxth	r2, r2
 80047a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f007 f91a 	bl	800b9e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047b2:	2100      	movs	r1, #0
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f923 	bl	8004a00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f005 fa24 	bl	8009c0c <USB_ReadInterrupts>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ce:	d10b      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047e2:	b292      	uxth	r2, r2
 80047e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f005 fa0d 	bl	8009c0c <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fc:	d10b      	bne.n	8004816 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004810:	b292      	uxth	r2, r2
 8004812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f005 f9f6 	bl	8009c0c <USB_ReadInterrupts>
 8004820:	4603      	mov	r3, r0
 8004822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d126      	bne.n	800487a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	b292      	uxth	r2, r2
 8004840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0208 	bic.w	r2, r2, #8
 8004856:	b292      	uxth	r2, r2
 8004858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f007 f8fb 	bl	800ba58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004874:	b292      	uxth	r2, r2
 8004876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f005 f9c4 	bl	8009c0c <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488e:	f040 8082 	bne.w	8004996 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e010      	b.n	80048ba <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	8812      	ldrh	r2, [r2, #0]
 80048a8:	b292      	uxth	r2, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	3320      	adds	r3, #32
 80048ae:	443b      	add	r3, r7
 80048b0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	3301      	adds	r3, #1
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
 80048bc:	2b07      	cmp	r3, #7
 80048be:	d9eb      	bls.n	8004898 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	b292      	uxth	r2, r2
 80048d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	b292      	uxth	r2, r2
 80048ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80048f0:	bf00      	nop
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f6      	beq.n	80048f2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	b292      	uxth	r2, r2
 8004918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800491c:	2300      	movs	r3, #0
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e00f      	b.n	8004942 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004922:	7ffb      	ldrb	r3, [r7, #31]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	4611      	mov	r1, r2
 800492a:	7ffa      	ldrb	r2, [r7, #31]
 800492c:	0092      	lsls	r2, r2, #2
 800492e:	440a      	add	r2, r1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	3320      	adds	r3, #32
 8004934:	443b      	add	r3, r7
 8004936:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800493a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800493c:	7ffb      	ldrb	r3, [r7, #31]
 800493e:	3301      	adds	r3, #1
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b07      	cmp	r3, #7
 8004946:	d9ec      	bls.n	8004922 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	b292      	uxth	r2, r2
 800495c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004972:	b292      	uxth	r2, r2
 8004974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0204 	orr.w	r2, r2, #4
 800498a:	b292      	uxth	r2, r2
 800498c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f007 f847 	bl	800ba24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f005 f936 	bl	8009c0c <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049aa:	d10e      	bne.n	80049ca <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049be:	b292      	uxth	r2, r2
 80049c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f007 f800 	bl	800b9ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f005 f91c 	bl	8009c0c <USB_ReadInterrupts>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d10b      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f2:	b292      	uxth	r2, r2
 80049f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_PCD_SetAddress+0x1a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e013      	b.n	8004a42 <HAL_PCD_SetAddress+0x42>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f005 f8c3 	bl	8009bbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	4608      	mov	r0, r1
 8004a54:	4611      	mov	r1, r2
 8004a56:	461a      	mov	r2, r3
 8004a58:	4603      	mov	r3, r0
 8004a5a:	70fb      	strb	r3, [r7, #3]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	803b      	strh	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	da0e      	bge.n	8004a8e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	705a      	strb	r2, [r3, #1]
 8004a8c:	e00e      	b.n	8004aac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 0207 	and.w	r2, r3, #7
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ab8:	883a      	ldrh	r2, [r7, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	78ba      	ldrb	r2, [r7, #2]
 8004ac2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ad6:	78bb      	ldrb	r3, [r7, #2]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d102      	bne.n	8004ae2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_PCD_EP_Open+0xa6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e00e      	b.n	8004b0e <HAL_PCD_EP_Open+0xc4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f002 fbd2 	bl	80072a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da0e      	bge.n	8004b48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	705a      	strb	r2, [r3, #1]
 8004b46:	e00e      	b.n	8004b66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 0207 	and.w	r2, r3, #7
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_PCD_EP_Close+0x6a>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e00e      	b.n	8004b9e <HAL_PCD_EP_Close+0x88>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 fef4 	bl	800797c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	f003 0207 	and.w	r2, r3, #7
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2200      	movs	r2, #0
 8004be4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be6:	7afb      	ldrb	r3, [r7, #11]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bf2:	7afb      	ldrb	r3, [r7, #11]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 f8a6 	bl	8007d54 <USB_EPStartXfer>
 8004c08:	e005      	b.n	8004c16 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 f89f 	bl	8007d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	f003 0207 	and.w	r2, r3, #7
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2201      	movs	r2, #1
 8004c98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9a:	7afb      	ldrb	r3, [r7, #11]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 f84c 	bl	8007d54 <USB_EPStartXfer>
 8004cbc:	e005      	b.n	8004cca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f003 f845 	bl	8007d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	f003 0207 	and.w	r2, r3, #7
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d901      	bls.n	8004cf2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e04c      	b.n	8004d8c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0e      	bge.n	8004d18 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	705a      	strb	r2, [r3, #1]
 8004d16:	e00c      	b.n	8004d32 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_PCD_EP_SetStall+0x7e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e01c      	b.n	8004d8c <HAL_PCD_EP_SetStall+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f004 fe2f 	bl	80099c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d108      	bne.n	8004d82 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f004 ff54 	bl	8009c2a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d901      	bls.n	8004db2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e040      	b.n	8004e34 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0e      	bge.n	8004dd8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
 8004dd6:	e00e      	b.n	8004df6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_PCD_EP_ClrStall+0x82>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e00e      	b.n	8004e34 <HAL_PCD_EP_ClrStall+0xa0>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fe1d 	bl	8009a64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e44:	e2ec      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 8161 	bne.w	8005128 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d152      	bne.n	8004f16 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	81fb      	strh	r3, [r7, #14]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	89fb      	ldrh	r3, [r7, #14]
 8004e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3328      	adds	r3, #40	; 0x28
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	3302      	adds	r3, #2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	441a      	add	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f006 fd5d 	bl	800b996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 829b 	beq.w	8005420 <PCD_EP_ISR_Handler+0x5e4>
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8296 	bne.w	8005420 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	b292      	uxth	r2, r2
 8004f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f14:	e284      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d034      	beq.n	8004f9a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4413      	add	r3, r2
 8004f44:	3306      	adds	r3, #6
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f004 feab 	bl	8009cca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f80:	4013      	ands	r3, r2
 8004f82:	823b      	strh	r3, [r7, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	8a3a      	ldrh	r2, [r7, #16]
 8004f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f8e:	b292      	uxth	r2, r2
 8004f90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f006 fcd2 	bl	800b93c <HAL_PCD_SetupStageCallback>
 8004f98:	e242      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f280 823e 	bge.w	8005420 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	83bb      	strh	r3, [r7, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	8bba      	ldrh	r2, [r7, #28]
 8004fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3306      	adds	r3, #6
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d019      	beq.n	800502a <PCD_EP_ISR_Handler+0x1ee>
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d015      	beq.n	800502a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	6959      	ldr	r1, [r3, #20]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800500e:	b29b      	uxth	r3, r3
 8005010:	f004 fe5b 	bl	8009cca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	441a      	add	r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005022:	2100      	movs	r1, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f006 fc9b 	bl	800b960 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 81f2 	bne.w	8005420 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4413      	add	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d112      	bne.n	800508a <PCD_EP_ISR_Handler+0x24e>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800506e:	b29a      	uxth	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e02f      	b.n	80050ea <PCD_EP_ISR_Handler+0x2ae>
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b3e      	cmp	r3, #62	; 0x3e
 8005090:	d813      	bhi.n	80050ba <PCD_EP_ISR_Handler+0x27e>
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <PCD_EP_ISR_Handler+0x270>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	3301      	adds	r3, #1
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e017      	b.n	80050ea <PCD_EP_ISR_Handler+0x2ae>
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <PCD_EP_ISR_Handler+0x298>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	3b01      	subs	r3, #1
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	029b      	lsls	r3, r3, #10
 80050da:	b29b      	uxth	r3, r3
 80050dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	827b      	strh	r3, [r7, #18]
 80050fc:	8a7b      	ldrh	r3, [r7, #18]
 80050fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005102:	827b      	strh	r3, [r7, #18]
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800510a:	827b      	strh	r3, [r7, #18]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	8a7b      	ldrh	r3, [r7, #18]
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]
 8005126:	e17b      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800513a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800513e:	2b00      	cmp	r3, #0
 8005140:	f280 80ea 	bge.w	8005318 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29a      	uxth	r2, r3
 8005156:	f640 738f 	movw	r3, #3983	; 0xf8f
 800515a:	4013      	ands	r3, r2
 800515c:	853b      	strh	r3, [r7, #40]	; 0x28
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800516e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005172:	b292      	uxth	r2, r2
 8005174:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005176:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	7b1b      	ldrb	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d122      	bne.n	80051da <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	3306      	adds	r3, #6
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051bc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80051be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8087 	beq.w	80052d4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	6959      	ldr	r1, [r3, #20]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	88da      	ldrh	r2, [r3, #6]
 80051d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d4:	f004 fd79 	bl	8009cca <USB_ReadPMA>
 80051d8:	e07c      	b.n	80052d4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d108      	bne.n	80051f4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80051e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051e4:	461a      	mov	r2, r3
 80051e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f927 	bl	800543c <HAL_PCD_EP_DB_Receive>
 80051ee:	4603      	mov	r3, r0
 80051f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80051f2:	e06f      	b.n	80052d4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d021      	beq.n	8005292 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	3302      	adds	r3, #2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005276:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02a      	beq.n	80052d4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	891a      	ldrh	r2, [r3, #8]
 800528a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800528c:	f004 fd1d 	bl	8009cca <USB_ReadPMA>
 8005290:	e020      	b.n	80052d4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	3306      	adds	r3, #6
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80052bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	895a      	ldrh	r2, [r3, #10]
 80052ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052d0:	f004 fcfb 	bl	8009cca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052da:	441a      	add	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052e6:	441a      	add	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <PCD_EP_ISR_Handler+0x4c2>
 80052f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d206      	bcs.n	800530c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f006 fb2b 	bl	800b960 <HAL_PCD_DataOutStageCallback>
 800530a:	e005      	b.n	8005318 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005312:	4618      	mov	r0, r3
 8005314:	f002 fd1e 	bl	8007d54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005318:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d07e      	beq.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005322:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	843b      	strh	r3, [r7, #32]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	441a      	add	r2, r3
 8005360:	8c3b      	ldrh	r3, [r7, #32]
 8005362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d00c      	beq.n	8005390 <PCD_EP_ISR_Handler+0x554>
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005382:	2b02      	cmp	r3, #2
 8005384:	d146      	bne.n	8005414 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d141      	bne.n	8005414 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	3302      	adds	r3, #2
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	8bfb      	ldrh	r3, [r7, #30]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d906      	bls.n	80053d2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	619a      	str	r2, [r3, #24]
 80053d0:	e002      	b.n	80053d8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f006 fad5 	bl	800b996 <HAL_PCD_DataInStageCallback>
 80053ec:	e018      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	8bfb      	ldrh	r3, [r7, #30]
 80053f4:	441a      	add	r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	8bfb      	ldrh	r3, [r7, #30]
 8005400:	441a      	add	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f002 fca1 	bl	8007d54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005412:	e005      	b.n	8005420 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005414:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005416:	461a      	mov	r2, r3
 8005418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f91b 	bl	8005656 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005428:	b29b      	uxth	r3, r3
 800542a:	b21b      	sxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	f6ff ad0a 	blt.w	8004e46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3738      	adds	r7, #56	; 0x38
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d07e      	beq.n	8005552 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	3302      	adds	r3, #2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	8b7b      	ldrh	r3, [r7, #26]
 8005484:	429a      	cmp	r2, r3
 8005486:	d306      	bcc.n	8005496 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	619a      	str	r2, [r3, #24]
 8005494:	e002      	b.n	800549c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d123      	bne.n	80054ec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	833b      	strh	r3, [r7, #24]
 80054c0:	8b3b      	ldrh	r3, [r7, #24]
 80054c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054c6:	833b      	strh	r3, [r7, #24]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	8b3b      	ldrh	r3, [r7, #24]
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01f      	beq.n	8005536 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	82fb      	strh	r3, [r7, #22]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	8afb      	ldrh	r3, [r7, #22]
 8005522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005532:	b29b      	uxth	r3, r3
 8005534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005536:	8b7b      	ldrh	r3, [r7, #26]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8087 	beq.w	800564c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	891a      	ldrh	r2, [r3, #8]
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	f004 fbbd 	bl	8009cca <USB_ReadPMA>
 8005550:	e07c      	b.n	800564c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	3306      	adds	r3, #6
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	8b7b      	ldrh	r3, [r7, #26]
 8005582:	429a      	cmp	r2, r3
 8005584:	d306      	bcc.n	8005594 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	8b7b      	ldrh	r3, [r7, #26]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	619a      	str	r2, [r3, #24]
 8005592:	e002      	b.n	800559a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d123      	bne.n	80055ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	83fb      	strh	r3, [r7, #30]
 80055be:	8bfb      	ldrh	r3, [r7, #30]
 80055c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055c4:	83fb      	strh	r3, [r7, #30]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8bfb      	ldrh	r3, [r7, #30]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11f      	bne.n	8005634 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	83bb      	strh	r3, [r7, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8bbb      	ldrh	r3, [r7, #28]
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005634:	8b7b      	ldrh	r3, [r7, #26]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6959      	ldr	r1, [r3, #20]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	895a      	ldrh	r2, [r3, #10]
 8005646:	8b7b      	ldrh	r3, [r7, #26]
 8005648:	f004 fb3f 	bl	8009cca <USB_ReadPMA>
    }
  }

  return count;
 800564c:	8b7b      	ldrh	r3, [r7, #26]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b0a2      	sub	sp, #136	; 0x88
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 81c7 	beq.w	80059fe <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	3302      	adds	r3, #2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d907      	bls.n	80056b8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	619a      	str	r2, [r3, #24]
 80056b6:	e002      	b.n	80056be <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2200      	movs	r2, #0
 80056bc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 80b9 	bne.w	800583a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d126      	bne.n	800571e <HAL_PCD_EP_DB_Transmit+0xc8>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	4413      	add	r3, r2
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005702:	b29a      	uxth	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005716:	b29a      	uxth	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e01a      	b.n	8005754 <HAL_PCD_EP_DB_Transmit+0xfe>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d116      	bne.n	8005754 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	4413      	add	r3, r2
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	011a      	lsls	r2, r3, #4
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	4413      	add	r3, r2
 8005748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2200      	movs	r2, #0
 8005752:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	623b      	str	r3, [r7, #32]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d126      	bne.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	4413      	add	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011a      	lsls	r2, r3, #4
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	4413      	add	r3, r2
 8005784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005794:	b29a      	uxth	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	801a      	strh	r2, [r3, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e017      	b.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d113      	bne.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	4413      	add	r3, r2
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	011a      	lsls	r2, r3, #4
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2200      	movs	r2, #0
 80057de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f006 f8d5 	bl	800b996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 82d4 	beq.w	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	827b      	strh	r3, [r7, #18]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8a7b      	ldrh	r3, [r7, #18]
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
 8005838:	e2b2      	b.n	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d021      	beq.n	8005888 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800588e:	2b01      	cmp	r3, #1
 8005890:	f040 8286 	bne.w	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800589c:	441a      	add	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058aa:	441a      	add	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d309      	bcc.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	621a      	str	r2, [r3, #32]
 80058ce:	e015      	b.n	80058fc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80058d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058e6:	e009      	b.n	80058fc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d155      	bne.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	4413      	add	r3, r2
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011a      	lsls	r2, r3, #4
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	4413      	add	r3, r2
 8005926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d112      	bne.n	8005958 <HAL_PCD_EP_DB_Transmit+0x302>
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593c:	b29a      	uxth	r2, r3
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005950:	b29a      	uxth	r2, r3
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	e047      	b.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595a:	2b3e      	cmp	r3, #62	; 0x3e
 800595c:	d811      	bhi.n	8005982 <HAL_PCD_EP_DB_Transmit+0x32c>
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_PCD_EP_DB_Transmit+0x31e>
 800596e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005970:	3301      	adds	r3, #1
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
 8005974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e032      	b.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_PCD_EP_DB_Transmit+0x342>
 8005992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005994:	3b01      	subs	r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48
 8005998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599a:	b29b      	uxth	r3, r3
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e01b      	b.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x392>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d117      	bne.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x392>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059cc:	4413      	add	r3, r2
 80059ce:	643b      	str	r3, [r7, #64]	; 0x40
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6959      	ldr	r1, [r3, #20]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	891a      	ldrh	r2, [r3, #8]
 80059f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f004 f922 	bl	8009c40 <USB_WritePMA>
 80059fc:	e1d0      	b.n	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	3306      	adds	r3, #6
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d307      	bcc.n	8005a46 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	619a      	str	r2, [r3, #24]
 8005a44:	e002      	b.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 80c4 	bne.w	8005bde <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d126      	bne.n	8005aac <HAL_PCD_EP_DB_Transmit+0x456>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	4413      	add	r3, r2
 8005a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	011a      	lsls	r2, r3, #4
 8005a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7e:	4413      	add	r3, r2
 8005a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e01a      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d116      	bne.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	677b      	str	r3, [r7, #116]	; 0x74
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac8:	4413      	add	r3, r2
 8005aca:	677b      	str	r3, [r7, #116]	; 0x74
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	011a      	lsls	r2, r3, #4
 8005ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ada:	673b      	str	r3, [r7, #112]	; 0x70
 8005adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ade:	2200      	movs	r2, #0
 8005ae0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d12f      	bne.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b08:	4413      	add	r3, r2
 8005b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011a      	lsls	r2, r3, #4
 8005b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b18:	4413      	add	r3, r2
 8005b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e017      	b.n	8005b80 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d113      	bne.n	8005b80 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b66:	4413      	add	r3, r2
 8005b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	011a      	lsls	r2, r3, #4
 8005b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b72:	4413      	add	r3, r2
 8005b74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	4619      	mov	r1, r3
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f005 ff05 	bl	800b996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 8104 	bne.w	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
 8005bdc:	e0e0      	b.n	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d121      	bne.n	8005c2c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	f040 80b4 	bne.w	8005da0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c40:	441a      	add	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c4e:	441a      	add	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d309      	bcc.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6a1a      	ldr	r2, [r3, #32]
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	1ad2      	subs	r2, r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	621a      	str	r2, [r3, #32]
 8005c72:	e015      	b.n	8005ca0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005c7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c8a:	e009      	b.n	8005ca0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d155      	bne.n	8005d5a <HAL_PCD_EP_DB_Transmit+0x704>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc2:	4413      	add	r3, r2
 8005cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	011a      	lsls	r2, r3, #4
 8005ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d112      	bne.n	8005d02 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	e044      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x736>
 8005d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d04:	2b3e      	cmp	r3, #62	; 0x3e
 8005d06:	d811      	bhi.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	029b      	lsls	r3, r3, #10
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e02f      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x736>
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
 8005d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	657b      	str	r3, [r7, #84]	; 0x54
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e018      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x736>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d114      	bne.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x736>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d70:	4413      	add	r3, r2
 8005d72:	667b      	str	r3, [r7, #100]	; 0x64
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	011a      	lsls	r2, r3, #4
 8005d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d82:	663b      	str	r3, [r7, #96]	; 0x60
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6959      	ldr	r1, [r3, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	895a      	ldrh	r2, [r3, #10]
 8005d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f003 ff50 	bl	8009c40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dba:	823b      	strh	r3, [r7, #16]
 8005dbc:	8a3b      	ldrh	r3, [r7, #16]
 8005dbe:	f083 0310 	eor.w	r3, r3, #16
 8005dc2:	823b      	strh	r3, [r7, #16]
 8005dc4:	8a3b      	ldrh	r3, [r7, #16]
 8005dc6:	f083 0320 	eor.w	r3, r3, #32
 8005dca:	823b      	strh	r3, [r7, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	441a      	add	r2, r3
 8005dda:	8a3b      	ldrh	r3, [r7, #16]
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3788      	adds	r7, #136	; 0x88
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	817b      	strh	r3, [r7, #10]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e18:	897b      	ldrh	r3, [r7, #10]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e009      	b.n	8005e44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e30:	897a      	ldrh	r2, [r7, #10]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e44:	893b      	ldrh	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	80da      	strh	r2, [r3, #6]
 8005e58:	e00b      	b.n	8005e72 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
	...

08005e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e272      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8087 	beq.w	8005fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea0:	4b92      	ldr	r3, [pc, #584]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005eac:	4b8f      	ldr	r3, [pc, #572]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 030c 	and.w	r3, r3, #12
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d112      	bne.n	8005ede <HAL_RCC_OscConfig+0x5e>
 8005eb8:	4b8c      	ldr	r3, [pc, #560]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec4:	d10b      	bne.n	8005ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec6:	4b89      	ldr	r3, [pc, #548]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d06c      	beq.n	8005fac <HAL_RCC_OscConfig+0x12c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d168      	bne.n	8005fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e24c      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x76>
 8005ee8:	4b80      	ldr	r3, [pc, #512]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a7f      	ldr	r2, [pc, #508]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e02e      	b.n	8005f54 <HAL_RCC_OscConfig+0xd4>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x98>
 8005efe:	4b7b      	ldr	r3, [pc, #492]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7a      	ldr	r2, [pc, #488]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4b78      	ldr	r3, [pc, #480]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a77      	ldr	r2, [pc, #476]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e01d      	b.n	8005f54 <HAL_RCC_OscConfig+0xd4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0xbc>
 8005f22:	4b72      	ldr	r3, [pc, #456]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a71      	ldr	r2, [pc, #452]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b6f      	ldr	r3, [pc, #444]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6e      	ldr	r2, [pc, #440]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0xd4>
 8005f3c:	4b6b      	ldr	r3, [pc, #428]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a6a      	ldr	r2, [pc, #424]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b68      	ldr	r3, [pc, #416]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a67      	ldr	r2, [pc, #412]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5c:	f7fc fdfa 	bl	8002b54 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f64:	f7fc fdf6 	bl	8002b54 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e200      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f76:	4b5d      	ldr	r3, [pc, #372]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0xe4>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fc fde6 	bl	8002b54 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f8c:	f7fc fde2 	bl	8002b54 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1ec      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x10c>
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d063      	beq.n	8006082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fba:	4b4c      	ldr	r3, [pc, #304]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fc6:	4b49      	ldr	r3, [pc, #292]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d11c      	bne.n	800600c <HAL_RCC_OscConfig+0x18c>
 8005fd2:	4b46      	ldr	r3, [pc, #280]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d116      	bne.n	800600c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fde:	4b43      	ldr	r3, [pc, #268]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x176>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e1c0      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff6:	4b3d      	ldr	r3, [pc, #244]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4939      	ldr	r1, [pc, #228]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600a:	e03a      	b.n	8006082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006014:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCC_OscConfig+0x270>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601a:	f7fc fd9b 	bl	8002b54 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006022:	f7fc fd97 	bl	8002b54 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e1a1      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006040:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4927      	ldr	r1, [pc, #156]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]
 8006054:	e015      	b.n	8006082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_RCC_OscConfig+0x270>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fc fd7a 	bl	8002b54 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006064:	f7fc fd76 	bl	8002b54 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e180      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d03a      	beq.n	8006104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d019      	beq.n	80060ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006096:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <HAL_RCC_OscConfig+0x274>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609c:	f7fc fd5a 	bl	8002b54 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fc fd56 	bl	8002b54 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e160      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <HAL_RCC_OscConfig+0x26c>)
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f000 fad8 	bl	8006678 <RCC_Delay>
 80060c8:	e01c      	b.n	8006104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <HAL_RCC_OscConfig+0x274>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d0:	f7fc fd40 	bl	8002b54 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d6:	e00f      	b.n	80060f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d8:	f7fc fd3c 	bl	8002b54 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d908      	bls.n	80060f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e146      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000
 80060f0:	42420000 	.word	0x42420000
 80060f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f8:	4b92      	ldr	r3, [pc, #584]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e9      	bne.n	80060d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80a6 	beq.w	800625e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006116:	4b8b      	ldr	r3, [pc, #556]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10d      	bne.n	800613e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006122:	4b88      	ldr	r3, [pc, #544]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4a87      	ldr	r2, [pc, #540]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612c:	61d3      	str	r3, [r2, #28]
 800612e:	4b85      	ldr	r3, [pc, #532]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800613a:	2301      	movs	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613e:	4b82      	ldr	r3, [pc, #520]	; (8006348 <HAL_RCC_OscConfig+0x4c8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d118      	bne.n	800617c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800614a:	4b7f      	ldr	r3, [pc, #508]	; (8006348 <HAL_RCC_OscConfig+0x4c8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a7e      	ldr	r2, [pc, #504]	; (8006348 <HAL_RCC_OscConfig+0x4c8>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006156:	f7fc fcfd 	bl	8002b54 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615e:	f7fc fcf9 	bl	8002b54 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b64      	cmp	r3, #100	; 0x64
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e103      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006170:	4b75      	ldr	r3, [pc, #468]	; (8006348 <HAL_RCC_OscConfig+0x4c8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0f0      	beq.n	800615e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d106      	bne.n	8006192 <HAL_RCC_OscConfig+0x312>
 8006184:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	4a6e      	ldr	r2, [pc, #440]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6213      	str	r3, [r2, #32]
 8006190:	e02d      	b.n	80061ee <HAL_RCC_OscConfig+0x36e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x334>
 800619a:	4b6a      	ldr	r3, [pc, #424]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	4a69      	ldr	r2, [pc, #420]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	6213      	str	r3, [r2, #32]
 80061a6:	4b67      	ldr	r3, [pc, #412]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	4a66      	ldr	r2, [pc, #408]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	6213      	str	r3, [r2, #32]
 80061b2:	e01c      	b.n	80061ee <HAL_RCC_OscConfig+0x36e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	d10c      	bne.n	80061d6 <HAL_RCC_OscConfig+0x356>
 80061bc:	4b61      	ldr	r3, [pc, #388]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	4a60      	ldr	r2, [pc, #384]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	6213      	str	r3, [r2, #32]
 80061c8:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	4a5d      	ldr	r2, [pc, #372]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6213      	str	r3, [r2, #32]
 80061d4:	e00b      	b.n	80061ee <HAL_RCC_OscConfig+0x36e>
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	6213      	str	r3, [r2, #32]
 80061e2:	4b58      	ldr	r3, [pc, #352]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	4a57      	ldr	r2, [pc, #348]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d015      	beq.n	8006222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f6:	f7fc fcad 	bl	8002b54 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fc fca9 	bl	8002b54 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e0b1      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	4b4b      	ldr	r3, [pc, #300]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ee      	beq.n	80061fe <HAL_RCC_OscConfig+0x37e>
 8006220:	e014      	b.n	800624c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006222:	f7fc fc97 	bl	8002b54 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fc fc93 	bl	8002b54 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e09b      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006240:	4b40      	ldr	r3, [pc, #256]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ee      	bne.n	800622a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d105      	bne.n	800625e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006252:	4b3c      	ldr	r3, [pc, #240]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8087 	beq.w	8006376 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006268:	4b36      	ldr	r3, [pc, #216]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 030c 	and.w	r3, r3, #12
 8006270:	2b08      	cmp	r3, #8
 8006272:	d061      	beq.n	8006338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d146      	bne.n	800630a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627c:	4b33      	ldr	r3, [pc, #204]	; (800634c <HAL_RCC_OscConfig+0x4cc>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006282:	f7fc fc67 	bl	8002b54 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628a:	f7fc fc63 	bl	8002b54 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e06d      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800629c:	4b29      	ldr	r3, [pc, #164]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d108      	bne.n	80062c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	4921      	ldr	r1, [pc, #132]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062c4:	4b1f      	ldr	r3, [pc, #124]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a19      	ldr	r1, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	430b      	orrs	r3, r1
 80062d6:	491b      	ldr	r1, [pc, #108]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_RCC_OscConfig+0x4cc>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e2:	f7fc fc37 	bl	8002b54 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ea:	f7fc fc33 	bl	8002b54 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e03d      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x46a>
 8006308:	e035      	b.n	8006376 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <HAL_RCC_OscConfig+0x4cc>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006310:	f7fc fc20 	bl	8002b54 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006318:	f7fc fc1c 	bl	8002b54 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e026      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_OscConfig+0x4c4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x498>
 8006336:	e01e      	b.n	8006376 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d107      	bne.n	8006350 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e019      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
 800634c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <HAL_RCC_OscConfig+0x500>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	429a      	cmp	r2, r3
 8006362:	d106      	bne.n	8006372 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000

08006384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0d0      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006398:	4b6a      	ldr	r3, [pc, #424]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d910      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a6:	4b67      	ldr	r3, [pc, #412]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 0207 	bic.w	r2, r3, #7
 80063ae:	4965      	ldr	r1, [pc, #404]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b63      	ldr	r3, [pc, #396]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0b8      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e0:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80063e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a52      	ldr	r2, [pc, #328]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80063fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006402:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	494d      	ldr	r1, [pc, #308]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d040      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d115      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e07f      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d107      	bne.n	8006452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006442:	4b41      	ldr	r3, [pc, #260]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e073      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006452:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e06b      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f023 0203 	bic.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4936      	ldr	r1, [pc, #216]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	4313      	orrs	r3, r2
 8006472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006474:	f7fc fb6e 	bl	8002b54 <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647a:	e00a      	b.n	8006492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800647c:	f7fc fb6a 	bl	8002b54 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f241 3288 	movw	r2, #5000	; 0x1388
 800648a:	4293      	cmp	r3, r2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e053      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 020c 	and.w	r2, r3, #12
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d1eb      	bne.n	800647c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064a4:	4b27      	ldr	r3, [pc, #156]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d210      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 0207 	bic.w	r2, r3, #7
 80064ba:	4922      	ldr	r1, [pc, #136]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e032      	b.n	800653a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4916      	ldr	r1, [pc, #88]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 800650e:	4313      	orrs	r3, r2
 8006510:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006512:	f000 f821 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490a      	ldr	r1, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x1c8>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <HAL_RCC_ClockConfig+0x1cc>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCC_ClockConfig+0x1d0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fc facc 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40022000 	.word	0x40022000
 8006548:	40021000 	.word	0x40021000
 800654c:	0801086c 	.word	0x0801086c
 8006550:	20000000 	.word	0x20000000
 8006554:	20000004 	.word	0x20000004

08006558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	b490      	push	{r4, r7}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800655e:	4b29      	ldr	r3, [pc, #164]	; (8006604 <HAL_RCC_GetSysClockFreq+0xac>)
 8006560:	1d3c      	adds	r4, r7, #4
 8006562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006568:	f240 2301 	movw	r3, #513	; 0x201
 800656c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 030c 	and.w	r3, r3, #12
 800658e:	2b04      	cmp	r3, #4
 8006590:	d002      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x40>
 8006592:	2b08      	cmp	r3, #8
 8006594:	d003      	beq.n	800659e <HAL_RCC_GetSysClockFreq+0x46>
 8006596:	e02b      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006598:	4b1c      	ldr	r3, [pc, #112]	; (800660c <HAL_RCC_GetSysClockFreq+0xb4>)
 800659a:	623b      	str	r3, [r7, #32]
      break;
 800659c:	e02b      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	0c9b      	lsrs	r3, r3, #18
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3328      	adds	r3, #40	; 0x28
 80065a8:	443b      	add	r3, r7
 80065aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d012      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	0c5b      	lsrs	r3, r3, #17
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	3328      	adds	r3, #40	; 0x28
 80065c6:	443b      	add	r3, r7
 80065c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4a0e      	ldr	r2, [pc, #56]	; (800660c <HAL_RCC_GetSysClockFreq+0xb4>)
 80065d2:	fb03 f202 	mul.w	r2, r3, r2
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
 80065de:	e004      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4a0b      	ldr	r2, [pc, #44]	; (8006610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	623b      	str	r3, [r7, #32]
      break;
 80065ee:	e002      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_RCC_GetSysClockFreq+0xb4>)
 80065f2:	623b      	str	r3, [r7, #32]
      break;
 80065f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f6:	6a3b      	ldr	r3, [r7, #32]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3728      	adds	r7, #40	; 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc90      	pop	{r4, r7}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	08010814 	.word	0x08010814
 8006608:	40021000 	.word	0x40021000
 800660c:	007a1200 	.word	0x007a1200
 8006610:	003d0900 	.word	0x003d0900

08006614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006618:	4b02      	ldr	r3, [pc, #8]	; (8006624 <HAL_RCC_GetHCLKFreq+0x10>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	20000000 	.word	0x20000000

08006628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800662c:	f7ff fff2 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 8006630:	4602      	mov	r2, r0
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <HAL_RCC_GetPCLK1Freq+0x24>)
 800663e:	5ccb      	ldrb	r3, [r1, r3]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40021000 	.word	0x40021000
 800664c:	0801087c 	.word	0x0801087c

08006650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006654:	f7ff ffde 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	0adb      	lsrs	r3, r3, #11
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40021000 	.word	0x40021000
 8006674:	0801087c 	.word	0x0801087c

08006678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <RCC_Delay+0x34>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0a      	ldr	r2, [pc, #40]	; (80066b0 <RCC_Delay+0x38>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006694:	bf00      	nop
  }
  while (Delay --);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	60fa      	str	r2, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f9      	bne.n	8006694 <RCC_Delay+0x1c>
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	20000000 	.word	0x20000000
 80066b0:	10624dd3 	.word	0x10624dd3

080066b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d07d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d4:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	4b4c      	ldr	r3, [pc, #304]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4a4b      	ldr	r2, [pc, #300]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ea:	61d3      	str	r3, [r2, #28]
 80066ec:	4b49      	ldr	r3, [pc, #292]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fc:	4b46      	ldr	r3, [pc, #280]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d118      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006708:	4b43      	ldr	r3, [pc, #268]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a42      	ldr	r2, [pc, #264]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006714:	f7fc fa1e 	bl	8002b54 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	e008      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fc fa1a 	bl	8002b54 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e06d      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02e      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	429a      	cmp	r2, r3
 8006756:	d027      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006758:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800676e:	4a29      	ldr	r2, [pc, #164]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d014      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fc f9e9 	bl	8002b54 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006784:	e00a      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fc f9e5 	bl	8002b54 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e036      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ee      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4917      	ldr	r1, [pc, #92]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c0:	4b14      	ldr	r3, [pc, #80]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	490b      	ldr	r1, [pc, #44]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	4904      	ldr	r1, [pc, #16]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006804:	4313      	orrs	r3, r2
 8006806:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	42420440 	.word	0x42420440

08006820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e03f      	b.n	80068b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fb f902 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fc25 	bl	80070b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af02      	add	r7, sp, #8
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d17c      	bne.n	80069d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_UART_Transmit+0x2c>
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e075      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Transmit+0x3e>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e06e      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	; 0x21
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800690e:	f7fc f921 	bl	8002b54 <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006928:	d108      	bne.n	800693c <HAL_UART_Transmit+0x82>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e003      	b.n	8006944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006940:	2300      	movs	r3, #0
 8006942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800694c:	e02a      	b.n	80069a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa11 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e036      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800697c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3302      	adds	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e007      	b.n	8006996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1cf      	bne.n	800694e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2140      	movs	r1, #64	; 0x40
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f9e1 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_UART_IRQHandler+0x52>
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa99 	bl	8006f62 <UART_Receive_IT>
      return;
 8006a30:	e17b      	b.n	8006d2a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80b1 	beq.w	8006b9c <HAL_UART_IRQHandler+0x1bc>
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_UART_IRQHandler+0x70>
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a6 	beq.w	8006b9c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_UART_IRQHandler+0x90>
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f043 0201 	orr.w	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_UART_IRQHandler+0xb0>
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	f043 0202 	orr.w	r2, r3, #2
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_UART_IRQHandler+0xd0>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f043 0204 	orr.w	r2, r3, #4
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <HAL_UART_IRQHandler+0xfa>
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <HAL_UART_IRQHandler+0xee>
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f043 0208 	orr.w	r2, r3, #8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 811e 	beq.w	8006d20 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_UART_IRQHandler+0x11e>
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa32 	bl	8006f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d102      	bne.n	8006b26 <HAL_UART_IRQHandler+0x146>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d031      	beq.n	8006b8a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f974 	bl	8006e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d023      	beq.n	8006b82 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d013      	beq.n	8006b7a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	4a76      	ldr	r2, [pc, #472]	; (8006d30 <HAL_UART_IRQHandler+0x350>)
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fc f98a 	bl	8002e78 <HAL_DMA_Abort_IT>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e00e      	b.n	8006b98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8ec 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00a      	b.n	8006b98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8e8 	bl	8006d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e006      	b.n	8006b98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8e4 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b96:	e0c3      	b.n	8006d20 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	bf00      	nop
    return;
 8006b9a:	e0c1      	b.n	8006d20 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f040 80a1 	bne.w	8006ce8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 809b 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8095 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d04e      	beq.n	8006c80 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006bec:	8a3b      	ldrh	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8098 	beq.w	8006d24 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bf8:	8a3a      	ldrh	r2, [r7, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	f080 8092 	bcs.w	8006d24 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8a3a      	ldrh	r2, [r7, #16]
 8006c04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d02b      	beq.n	8006c68 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c1e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c3e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0210 	bic.w	r2, r2, #16
 8006c5c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fc f8cd 	bl	8002e02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f876 	bl	8006d6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c7e:	e051      	b.n	8006d24 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d047      	beq.n	8006d28 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006c98:	8a7b      	ldrh	r3, [r7, #18]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d044      	beq.n	8006d28 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0210 	bic.w	r2, r2, #16
 8006cda:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cdc:	8a7b      	ldrh	r3, [r7, #18]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f842 	bl	8006d6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ce6:	e01f      	b.n	8006d28 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <HAL_UART_IRQHandler+0x324>
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8c9 	bl	8006e94 <UART_Transmit_IT>
    return;
 8006d02:	e012      	b.n	8006d2a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00d      	beq.n	8006d2a <HAL_UART_IRQHandler+0x34a>
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f90a 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 8006d1e:	e004      	b.n	8006d2a <HAL_UART_IRQHandler+0x34a>
    return;
 8006d20:	bf00      	nop
 8006d22:	e002      	b.n	8006d2a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d24:	bf00      	nop
 8006d26:	e000      	b.n	8006d2a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d28:	bf00      	nop
  }
}
 8006d2a:	3728      	adds	r7, #40	; 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	08006e6d 	.word	0x08006e6d

08006d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d90:	e02c      	b.n	8006dec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d98:	d028      	beq.n	8006dec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da0:	f7fb fed8 	bl	8002b54 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d21d      	bcs.n	8006dec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e00f      	b.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4013      	ands	r3, r2
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2301      	moveq	r3, #1
 8006dfe:	2300      	movne	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d0c3      	beq.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d107      	bne.n	8006e54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0210 	bic.w	r2, r2, #16
 8006e52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff ff66 	bl	8006d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b21      	cmp	r3, #33	; 0x21
 8006ea6:	d13e      	bne.n	8006f26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	d114      	bne.n	8006edc <UART_Transmit_IT+0x48>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d110      	bne.n	8006edc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ece:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	621a      	str	r2, [r3, #32]
 8006eda:	e008      	b.n	8006eee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	1c59      	adds	r1, r3, #1
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6211      	str	r1, [r2, #32]
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	4619      	mov	r1, r3
 8006efc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10f      	bne.n	8006f22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e000      	b.n	8006f28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
  }
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff feee 	bl	8006d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b22      	cmp	r3, #34	; 0x22
 8006f74:	f040 8099 	bne.w	80070aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d117      	bne.n	8006fb2 <UART_Receive_IT+0x50>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d113      	bne.n	8006fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb0:	e026      	b.n	8007000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d007      	beq.n	8006fd6 <UART_Receive_IT+0x74>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <UART_Receive_IT+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e008      	b.n	8006ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4619      	mov	r1, r3
 800700e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007010:	2b00      	cmp	r3, #0
 8007012:	d148      	bne.n	80070a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b01      	cmp	r3, #1
 8007052:	d123      	bne.n	800709c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0210 	bic.w	r2, r2, #16
 8007068:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d10a      	bne.n	800708e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff fe68 	bl	8006d6a <HAL_UARTEx_RxEventCallback>
 800709a:	e002      	b.n	80070a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fe52 	bl	8006d46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e002      	b.n	80070ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e000      	b.n	80070ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80070ee:	f023 030c 	bic.w	r3, r3, #12
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2c      	ldr	r2, [pc, #176]	; (80071c8 <UART_SetConfig+0x114>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d103      	bne.n	8007124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800711c:	f7ff fa98 	bl	8006650 <HAL_RCC_GetPCLK2Freq>
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	e002      	b.n	800712a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007124:	f7ff fa80 	bl	8006628 <HAL_RCC_GetPCLK1Freq>
 8007128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009a      	lsls	r2, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	4a22      	ldr	r2, [pc, #136]	; (80071cc <UART_SetConfig+0x118>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	0119      	lsls	r1, r3, #4
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009a      	lsls	r2, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007160:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <UART_SetConfig+0x118>)
 8007162:	fba3 0302 	umull	r0, r3, r3, r2
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	2064      	movs	r0, #100	; 0x64
 800716a:	fb00 f303 	mul.w	r3, r0, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	3332      	adds	r3, #50	; 0x32
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <UART_SetConfig+0x118>)
 8007176:	fba2 2303 	umull	r2, r3, r2, r3
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007180:	4419      	add	r1, r3
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009a      	lsls	r2, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	fbb2 f2f3 	udiv	r2, r2, r3
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <UART_SetConfig+0x118>)
 800719a:	fba3 0302 	umull	r0, r3, r3, r2
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2064      	movs	r0, #100	; 0x64
 80071a2:	fb00 f303 	mul.w	r3, r0, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	; 0x32
 80071ac:	4a07      	ldr	r2, [pc, #28]	; (80071cc <UART_SetConfig+0x118>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	440a      	add	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40013800 	.word	0x40013800
 80071cc:	51eb851f 	.word	0x51eb851f

080071d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80071d0:	b084      	sub	sp, #16
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	f107 0014 	add.w	r0, r7, #20
 80071de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	b004      	add	sp, #16
 80071ee:	4770      	bx	lr

080071f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007200:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007204:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007224:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007228:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	b29b      	uxth	r3, r3
 8007236:	43db      	mvns	r3, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	4013      	ands	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr

08007250 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007268:	b084      	sub	sp, #16
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	f107 0014 	add.w	r0, r7, #20
 8007276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	b004      	add	sp, #16
 80072a6:	4770      	bx	lr

080072a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b09b      	sub	sp, #108	; 0x6c
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	78db      	ldrb	r3, [r3, #3]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d81f      	bhi.n	800731a <USB_ActivateEndpoint+0x72>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <USB_ActivateEndpoint+0x38>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007323 	.word	0x08007323
 80072ec:	080072ff 	.word	0x080072ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80072f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072fc:	e012      	b.n	8007324 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80072fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007302:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007306:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800730a:	e00b      	b.n	8007324 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800730c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007314:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007318:	e004      	b.n	8007324 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007320:	e000      	b.n	8007324 <USB_ActivateEndpoint+0x7c>
      break;
 8007322:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	441a      	add	r2, r3
 800732e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007342:	b29b      	uxth	r3, r3
 8007344:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735c:	b29a      	uxth	r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 8149 	bne.w	8007628 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8084 	beq.w	80074a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	4413      	add	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	81fb      	strh	r3, [r7, #14]
 80073e2:	89fb      	ldrh	r3, [r7, #14]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <USB_ActivateEndpoint+0x17c>
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	81bb      	strh	r3, [r7, #12]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	89bb      	ldrh	r3, [r7, #12]
 8007410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007420:	b29b      	uxth	r3, r3
 8007422:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	78db      	ldrb	r3, [r3, #3]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d020      	beq.n	800746e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007442:	813b      	strh	r3, [r7, #8]
 8007444:	893b      	ldrh	r3, [r7, #8]
 8007446:	f083 0320 	eor.w	r3, r3, #32
 800744a:	813b      	strh	r3, [r7, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	893b      	ldrh	r3, [r7, #8]
 8007458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	b29b      	uxth	r3, r3
 800746a:	8013      	strh	r3, [r2, #0]
 800746c:	e27f      	b.n	800796e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007484:	817b      	strh	r3, [r7, #10]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	897b      	ldrh	r3, [r7, #10]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e262      	b.n	800796e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	4413      	add	r3, r2
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	4413      	add	r3, r2
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	011a      	lsls	r2, r3, #4
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074fe:	623b      	str	r3, [r7, #32]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d112      	bne.n	800752e <USB_ActivateEndpoint+0x286>
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007512:	b29a      	uxth	r2, r3
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	e02f      	b.n	800758e <USB_ActivateEndpoint+0x2e6>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b3e      	cmp	r3, #62	; 0x3e
 8007534:	d813      	bhi.n	800755e <USB_ActivateEndpoint+0x2b6>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	663b      	str	r3, [r7, #96]	; 0x60
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <USB_ActivateEndpoint+0x2a8>
 800754a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800754c:	3301      	adds	r3, #1
 800754e:	663b      	str	r3, [r7, #96]	; 0x60
 8007550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007552:	b29b      	uxth	r3, r3
 8007554:	029b      	lsls	r3, r3, #10
 8007556:	b29a      	uxth	r2, r3
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e017      	b.n	800758e <USB_ActivateEndpoint+0x2e6>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	663b      	str	r3, [r7, #96]	; 0x60
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 031f 	and.w	r3, r3, #31
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <USB_ActivateEndpoint+0x2d0>
 8007572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007574:	3b01      	subs	r3, #1
 8007576:	663b      	str	r3, [r7, #96]	; 0x60
 8007578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007588:	b29a      	uxth	r2, r3
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	83fb      	strh	r3, [r7, #30]
 800759c:	8bfb      	ldrh	r3, [r7, #30]
 800759e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_ActivateEndpoint+0x336>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	83bb      	strh	r3, [r7, #28]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8bbb      	ldrh	r3, [r7, #28]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	837b      	strh	r3, [r7, #26]
 80075f6:	8b7b      	ldrh	r3, [r7, #26]
 80075f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075fc:	837b      	strh	r3, [r7, #26]
 80075fe:	8b7b      	ldrh	r3, [r7, #26]
 8007600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007604:	837b      	strh	r3, [r7, #26]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	8b7b      	ldrh	r3, [r7, #26]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
 8007626:	e1a2      	b.n	800796e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007658:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	65bb      	str	r3, [r7, #88]	; 0x58
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007674:	4413      	add	r3, r2
 8007676:	65bb      	str	r3, [r7, #88]	; 0x58
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	011a      	lsls	r2, r3, #4
 800767e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007680:	4413      	add	r3, r2
 8007682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007686:	657b      	str	r3, [r7, #84]	; 0x54
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	891b      	ldrh	r3, [r3, #8]
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	b29b      	uxth	r3, r3
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	653b      	str	r3, [r7, #80]	; 0x50
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	4413      	add	r3, r2
 80076aa:	653b      	str	r3, [r7, #80]	; 0x50
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	011a      	lsls	r2, r3, #4
 80076b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80076ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	895b      	ldrh	r3, [r3, #10]
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 8091 	bne.w	80077f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80076e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80076e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01b      	beq.n	8007726 <USB_ActivateEndpoint+0x47e>
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007704:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800771e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007722:	b29b      	uxth	r3, r3
 8007724:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	873b      	strh	r3, [r7, #56]	; 0x38
 8007734:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01b      	beq.n	8007776 <USB_ActivateEndpoint+0x4ce>
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007754:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800778e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007790:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007794:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007796:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007798:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800779c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	441a      	add	r2, r3
 80077a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80077e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	8013      	strh	r3, [r2, #0]
 80077f6:	e0ba      	b.n	800796e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007808:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800780c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01d      	beq.n	8007850 <USB_ActivateEndpoint+0x5a8>
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800783c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784c:	b29b      	uxth	r3, r3
 800784e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007860:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01d      	beq.n	80078a8 <USB_ActivateEndpoint+0x600>
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	441a      	add	r2, r3
 8007890:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	78db      	ldrb	r3, [r3, #3]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d024      	beq.n	80078fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80078ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80078ce:	f083 0320 	eor.w	r3, r3, #32
 80078d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80078e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	8013      	strh	r3, [r2, #0]
 80078f8:	e01d      	b.n	8007936 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007910:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	441a      	add	r2, r3
 800791e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	b29b      	uxth	r3, r3
 8007934:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800795a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800795e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796a:	b29b      	uxth	r3, r3
 800796c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800796e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007972:	4618      	mov	r0, r3
 8007974:	376c      	adds	r7, #108	; 0x6c
 8007976:	46bd      	mov	sp, r7
 8007978:	bc80      	pop	{r7}
 800797a:	4770      	bx	lr

0800797c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800797c:	b480      	push	{r7}
 800797e:	b08d      	sub	sp, #52	; 0x34
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	7b1b      	ldrb	r3, [r3, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 808e 	bne.w	8007aac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d044      	beq.n	8007a22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	81bb      	strh	r3, [r7, #12]
 80079a6:	89bb      	ldrh	r3, [r7, #12]
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <USB_DeactivateEndpoint+0x6c>
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	817b      	strh	r3, [r7, #10]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	897b      	ldrh	r3, [r7, #10]
 80079d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fe:	813b      	strh	r3, [r7, #8]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	893b      	ldrh	r3, [r7, #8]
 8007a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	8013      	strh	r3, [r2, #0]
 8007a20:	e192      	b.n	8007d48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	827b      	strh	r3, [r7, #18]
 8007a30:	8a7b      	ldrh	r3, [r7, #18]
 8007a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01b      	beq.n	8007a72 <USB_DeactivateEndpoint+0xf6>
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a50:	823b      	strh	r3, [r7, #16]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	8a3b      	ldrh	r3, [r7, #16]
 8007a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a88:	81fb      	strh	r3, [r7, #14]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	89fb      	ldrh	r3, [r7, #14]
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
 8007aaa:	e14d      	b.n	8007d48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 80a5 	bne.w	8007c00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	843b      	strh	r3, [r7, #32]
 8007ac4:	8c3b      	ldrh	r3, [r7, #32]
 8007ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01b      	beq.n	8007b06 <USB_DeactivateEndpoint+0x18a>
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae4:	83fb      	strh	r3, [r7, #30]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	441a      	add	r2, r3
 8007af0:	8bfb      	ldrh	r3, [r7, #30]
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	83bb      	strh	r3, [r7, #28]
 8007b14:	8bbb      	ldrh	r3, [r7, #28]
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01b      	beq.n	8007b56 <USB_DeactivateEndpoint+0x1da>
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	837b      	strh	r3, [r7, #26]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	8b7b      	ldrh	r3, [r7, #26]
 8007b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	833b      	strh	r3, [r7, #24]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	8b3b      	ldrh	r3, [r7, #24]
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	82fb      	strh	r3, [r7, #22]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	8afb      	ldrh	r3, [r7, #22]
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	82bb      	strh	r3, [r7, #20]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	8abb      	ldrh	r3, [r7, #20]
 8007bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8013      	strh	r3, [r2, #0]
 8007bfe:	e0a3      	b.n	8007d48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01b      	beq.n	8007c50 <USB_DeactivateEndpoint+0x2d4>
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	441a      	add	r2, r3
 8007c3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007c5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <USB_DeactivateEndpoint+0x324>
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	847b      	strh	r3, [r7, #34]	; 0x22
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3734      	adds	r7, #52	; 0x34
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b0cc      	sub	sp, #304	; 0x130
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d62:	6018      	str	r0, [r3, #0]
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	f041 817d 	bne.w	800907a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d908      	bls.n	8007dae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007dac:	e007      	b.n	8007dbe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	7b1b      	ldrb	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d152      	bne.n	8007e74 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6959      	ldr	r1, [r3, #20]
 8007dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	88da      	ldrh	r2, [r3, #6]
 8007de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007df0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007df4:	6800      	ldr	r0, [r0, #0]
 8007df6:	f001 ff23 	bl	8009c40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007e02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007e28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e2c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	440a      	add	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	011a      	lsls	r2, r3, #4
 8007e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	f001 b8b5 	b.w	8008fde <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f040 84c6 	bne.w	8008812 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a1a      	ldr	r2, [r3, #32]
 8007e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	f240 8443 	bls.w	800872a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f10:	1ad2      	subs	r2, r2, r3
 8007f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 823e 	beq.w	80083c2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007f4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f52:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 809a 	bne.w	80080a0 <USB_EPStartXfer+0x34c>
 8007f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f9e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	011a      	lsls	r2, r3, #4
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d122      	bne.n	800801e <USB_EPStartXfer+0x2ca>
 8007fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800e:	b29a      	uxth	r2, r3
 8008010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	801a      	strh	r2, [r3, #0]
 800801c:	e079      	b.n	8008112 <USB_EPStartXfer+0x3be>
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	2b3e      	cmp	r3, #62	; 0x3e
 8008024:	d81b      	bhi.n	800805e <USB_EPStartXfer+0x30a>
 8008026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <USB_EPStartXfer+0x2f2>
 800803c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008040:	3301      	adds	r3, #1
 8008042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800804a:	b29b      	uxth	r3, r3
 800804c:	029b      	lsls	r3, r3, #10
 800804e:	b29a      	uxth	r2, r3
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e059      	b.n	8008112 <USB_EPStartXfer+0x3be>
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <USB_EPStartXfer+0x32a>
 8008074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008078:	3b01      	subs	r3, #1
 800807a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800807e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e038      	b.n	8008112 <USB_EPStartXfer+0x3be>
 80080a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d130      	bne.n	8008112 <USB_EPStartXfer+0x3be>
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080be:	b29b      	uxth	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80080ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	440a      	add	r2, r1
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	011a      	lsls	r2, r3, #4
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80080f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	b29a      	uxth	r2, r3
 8008106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	895b      	ldrh	r3, [r3, #10]
 800811e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6959      	ldr	r1, [r3, #20]
 800812e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008132:	b29b      	uxth	r3, r3
 8008134:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008138:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800813c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008140:	6800      	ldr	r0, [r0, #0]
 8008142:	f001 fd7d 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 8008146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008156:	441a      	add	r2, r3
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6a1a      	ldr	r2, [r3, #32]
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	429a      	cmp	r2, r3
 800817e:	d90f      	bls.n	80081a0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	621a      	str	r2, [r3, #32]
 800819e:	e00e      	b.n	80081be <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80081a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80081b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 809a 	bne.w	8008304 <USB_EPStartXfer+0x5b0>
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80081d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4619      	mov	r1, r3
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80081fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008202:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	440a      	add	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	011a      	lsls	r2, r3, #4
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4413      	add	r3, r2
 8008226:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800822a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d122      	bne.n	8008282 <USB_EPStartXfer+0x52e>
 800823c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008240:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800824e:	b29a      	uxth	r2, r3
 8008250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008254:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008272:	b29a      	uxth	r2, r3
 8008274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e083      	b.n	800838a <USB_EPStartXfer+0x636>
 8008282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008286:	2b3e      	cmp	r3, #62	; 0x3e
 8008288:	d81b      	bhi.n	80082c2 <USB_EPStartXfer+0x56e>
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	085b      	lsrs	r3, r3, #1
 8008290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <USB_EPStartXfer+0x556>
 80082a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80082a4:	3301      	adds	r3, #1
 80082a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80082aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	029b      	lsls	r3, r3, #10
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e063      	b.n	800838a <USB_EPStartXfer+0x636>
 80082c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80082cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <USB_EPStartXfer+0x58e>
 80082d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80082dc:	3b01      	subs	r3, #1
 80082de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80082e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e042      	b.n	800838a <USB_EPStartXfer+0x636>
 8008304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	785b      	ldrb	r3, [r3, #1]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d13a      	bne.n	800838a <USB_EPStartXfer+0x636>
 8008314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800831c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008320:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008336:	b29b      	uxth	r3, r3
 8008338:	4619      	mov	r1, r3
 800833a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008342:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008346:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	440a      	add	r2, r1
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	011a      	lsls	r2, r3, #4
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4413      	add	r3, r2
 800836a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800836e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008372:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	b29a      	uxth	r2, r3
 800837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008382:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800838a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	891b      	ldrh	r3, [r3, #8]
 8008396:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800839a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6959      	ldr	r1, [r3, #20]
 80083a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083b8:	6800      	ldr	r0, [r0, #0]
 80083ba:	f001 fc41 	bl	8009c40 <USB_WritePMA>
 80083be:	f000 be0e 	b.w	8008fde <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d16d      	bne.n	80084ae <USB_EPStartXfer+0x75a>
 80083d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	461a      	mov	r2, r3
 80083f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f2:	4413      	add	r3, r2
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	011a      	lsls	r2, r3, #4
 8008404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008406:	4413      	add	r3, r2
 8008408:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800840c:	647b      	str	r3, [r7, #68]	; 0x44
 800840e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d112      	bne.n	800843c <USB_EPStartXfer+0x6e8>
 8008416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008420:	b29a      	uxth	r2, r3
 8008422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008434:	b29a      	uxth	r2, r3
 8008436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	e063      	b.n	8008504 <USB_EPStartXfer+0x7b0>
 800843c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008440:	2b3e      	cmp	r3, #62	; 0x3e
 8008442:	d817      	bhi.n	8008474 <USB_EPStartXfer+0x720>
 8008444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800844e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <USB_EPStartXfer+0x710>
 800845a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800845e:	3301      	adds	r3, #1
 8008460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008464:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008468:	b29b      	uxth	r3, r3
 800846a:	029b      	lsls	r3, r3, #10
 800846c:	b29a      	uxth	r2, r3
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e047      	b.n	8008504 <USB_EPStartXfer+0x7b0>
 8008474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800847e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <USB_EPStartXfer+0x740>
 800848a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800848e:	3b01      	subs	r3, #1
 8008490:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008494:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008498:	b29b      	uxth	r3, r3
 800849a:	029b      	lsls	r3, r3, #10
 800849c:	b29b      	uxth	r3, r3
 800849e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	e02a      	b.n	8008504 <USB_EPStartXfer+0x7b0>
 80084ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d122      	bne.n	8008504 <USB_EPStartXfer+0x7b0>
 80084be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d8:	b29b      	uxth	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084de:	4413      	add	r3, r2
 80084e0:	653b      	str	r3, [r7, #80]	; 0x50
 80084e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	011a      	lsls	r2, r3, #4
 80084f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f2:	4413      	add	r3, r2
 80084f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008502:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	891b      	ldrh	r3, [r3, #8]
 8008510:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6959      	ldr	r1, [r3, #20]
 8008520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008524:	b29b      	uxth	r3, r3
 8008526:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800852a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800852e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008532:	6800      	ldr	r0, [r0, #0]
 8008534:	f001 fb84 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 8008538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695a      	ldr	r2, [r3, #20]
 8008544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008548:	441a      	add	r2, r3
 800854a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800854e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6a1a      	ldr	r2, [r3, #32]
 8008562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	429a      	cmp	r2, r3
 8008570:	d90f      	bls.n	8008592 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	621a      	str	r2, [r3, #32]
 8008590:	e00e      	b.n	80085b0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2200      	movs	r2, #0
 80085ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	643b      	str	r3, [r7, #64]	; 0x40
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d16d      	bne.n	80086a8 <USB_EPStartXfer+0x954>
 80085cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	4413      	add	r3, r2
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80085f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	011a      	lsls	r2, r3, #4
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	4413      	add	r3, r2
 8008602:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d112      	bne.n	8008636 <USB_EPStartXfer+0x8e2>
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800861a:	b29a      	uxth	r2, r3
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862e:	b29a      	uxth	r2, r3
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e05d      	b.n	80086f2 <USB_EPStartXfer+0x99e>
 8008636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863a:	2b3e      	cmp	r3, #62	; 0x3e
 800863c:	d817      	bhi.n	800866e <USB_EPStartXfer+0x91a>
 800863e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <USB_EPStartXfer+0x90a>
 8008654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008658:	3301      	adds	r3, #1
 800865a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800865e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008662:	b29b      	uxth	r3, r3
 8008664:	029b      	lsls	r3, r3, #10
 8008666:	b29a      	uxth	r2, r3
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	801a      	strh	r2, [r3, #0]
 800866c:	e041      	b.n	80086f2 <USB_EPStartXfer+0x99e>
 800866e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <USB_EPStartXfer+0x93a>
 8008684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008688:	3b01      	subs	r3, #1
 800868a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800868e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008692:	b29b      	uxth	r3, r3
 8008694:	029b      	lsls	r3, r3, #10
 8008696:	b29b      	uxth	r3, r3
 8008698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800869c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e024      	b.n	80086f2 <USB_EPStartXfer+0x99e>
 80086a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d11c      	bne.n	80086f2 <USB_EPStartXfer+0x99e>
 80086b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086cc:	4413      	add	r3, r2
 80086ce:	643b      	str	r3, [r7, #64]	; 0x40
 80086d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	011a      	lsls	r2, r3, #4
 80086de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	895b      	ldrh	r3, [r3, #10]
 80086fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6959      	ldr	r1, [r3, #20]
 800870e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008712:	b29b      	uxth	r3, r3
 8008714:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008718:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800871c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008720:	6800      	ldr	r0, [r0, #0]
 8008722:	f001 fa8d 	bl	8009c40 <USB_WritePMA>
 8008726:	f000 bc5a 	b.w	8008fde <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800872a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800873a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	b29b      	uxth	r3, r3
 8008794:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b6:	4413      	add	r3, r2
 80087b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	011a      	lsls	r2, r3, #4
 80087c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	891b      	ldrh	r3, [r3, #8]
 80087e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6959      	ldr	r1, [r3, #20]
 80087f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008802:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008806:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	f001 fa18 	bl	8009c40 <USB_WritePMA>
 8008810:	e3e5      	b.n	8008fde <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008838:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	441a      	add	r2, r3
 8008856:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008862:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800888c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 81bc 	beq.w	8008c2c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d16d      	bne.n	80089ae <USB_EPStartXfer+0xc5a>
 80088d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088f2:	4413      	add	r3, r2
 80088f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	011a      	lsls	r2, r3, #4
 8008904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008906:	4413      	add	r3, r2
 8008908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800890c:	677b      	str	r3, [r7, #116]	; 0x74
 800890e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d112      	bne.n	800893c <USB_EPStartXfer+0xbe8>
 8008916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008920:	b29a      	uxth	r2, r3
 8008922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008934:	b29a      	uxth	r2, r3
 8008936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e060      	b.n	80089fe <USB_EPStartXfer+0xcaa>
 800893c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008940:	2b3e      	cmp	r3, #62	; 0x3e
 8008942:	d817      	bhi.n	8008974 <USB_EPStartXfer+0xc20>
 8008944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <USB_EPStartXfer+0xc10>
 800895a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800895e:	3301      	adds	r3, #1
 8008960:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008964:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29a      	uxth	r2, r3
 800896e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e044      	b.n	80089fe <USB_EPStartXfer+0xcaa>
 8008974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800897e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2b00      	cmp	r3, #0
 8008988:	d104      	bne.n	8008994 <USB_EPStartXfer+0xc40>
 800898a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800898e:	3b01      	subs	r3, #1
 8008990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008994:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008998:	b29b      	uxth	r3, r3
 800899a:	029b      	lsls	r3, r3, #10
 800899c:	b29b      	uxth	r3, r3
 800899e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	e027      	b.n	80089fe <USB_EPStartXfer+0xcaa>
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d11f      	bne.n	80089fe <USB_EPStartXfer+0xcaa>
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089d4:	4413      	add	r3, r2
 80089d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	011a      	lsls	r2, r3, #4
 80089e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089ec:	4413      	add	r3, r2
 80089ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6959      	ldr	r1, [r3, #20]
 8008a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008a28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f001 f907 	bl	8009c40 <USB_WritePMA>
          ep->xfer_buff += len;
 8008a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695a      	ldr	r2, [r3, #20]
 8008a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a42:	441a      	add	r2, r3
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d90f      	bls.n	8008a8c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6a1a      	ldr	r2, [r3, #32]
 8008a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	621a      	str	r2, [r3, #32]
 8008a8a:	e00e      	b.n	8008aaa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8295 	beq.w	8008fde <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	785b      	ldrb	r3, [r3, #1]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d16d      	bne.n	8008ba0 <USB_EPStartXfer+0xe4c>
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae4:	4413      	add	r3, r2
 8008ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	011a      	lsls	r2, r3, #4
 8008af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008af8:	4413      	add	r3, r2
 8008afa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008afe:	667b      	str	r3, [r7, #100]	; 0x64
 8008b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d112      	bne.n	8008b2e <USB_EPStartXfer+0xdda>
 8008b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	e063      	b.n	8008bf6 <USB_EPStartXfer+0xea2>
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b32:	2b3e      	cmp	r3, #62	; 0x3e
 8008b34:	d817      	bhi.n	8008b66 <USB_EPStartXfer+0xe12>
 8008b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <USB_EPStartXfer+0xe02>
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b50:	3301      	adds	r3, #1
 8008b52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e047      	b.n	8008bf6 <USB_EPStartXfer+0xea2>
 8008b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b6a:	095b      	lsrs	r3, r3, #5
 8008b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <USB_EPStartXfer+0xe32>
 8008b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b80:	3b01      	subs	r3, #1
 8008b82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	029b      	lsls	r3, r3, #10
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e02a      	b.n	8008bf6 <USB_EPStartXfer+0xea2>
 8008ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d122      	bne.n	8008bf6 <USB_EPStartXfer+0xea2>
 8008bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	673b      	str	r3, [r7, #112]	; 0x70
 8008bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd0:	4413      	add	r3, r2
 8008bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8008bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	011a      	lsls	r2, r3, #4
 8008be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be4:	4413      	add	r3, r2
 8008be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	891b      	ldrh	r3, [r3, #8]
 8008c02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6959      	ldr	r1, [r3, #20]
 8008c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c24:	6800      	ldr	r0, [r0, #0]
 8008c26:	f001 f80b 	bl	8009c40 <USB_WritePMA>
 8008c2a:	e1d8      	b.n	8008fde <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d178      	bne.n	8008d2e <USB_EPStartXfer+0xfda>
 8008c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c60:	4413      	add	r3, r2
 8008c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	011a      	lsls	r2, r3, #4
 8008c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d116      	bne.n	8008cb8 <USB_EPStartXfer+0xf64>
 8008c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	e06b      	b.n	8008d90 <USB_EPStartXfer+0x103c>
 8008cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbe:	d818      	bhi.n	8008cf2 <USB_EPStartXfer+0xf9e>
 8008cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <USB_EPStartXfer+0xf8c>
 8008cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008cda:	3301      	adds	r3, #1
 8008cdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ce0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	029b      	lsls	r3, r3, #10
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cee:	801a      	strh	r2, [r3, #0]
 8008cf0:	e04e      	b.n	8008d90 <USB_EPStartXfer+0x103c>
 8008cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <USB_EPStartXfer+0xfbe>
 8008d08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d2a:	801a      	strh	r2, [r3, #0]
 8008d2c:	e030      	b.n	8008d90 <USB_EPStartXfer+0x103c>
 8008d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d128      	bne.n	8008d90 <USB_EPStartXfer+0x103c>
 8008d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	011a      	lsls	r2, r3, #4
 8008d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	891b      	ldrh	r3, [r3, #8]
 8008d9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6959      	ldr	r1, [r3, #20]
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008db6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008dba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008dbe:	6800      	ldr	r0, [r0, #0]
 8008dc0:	f000 ff3e 	bl	8009c40 <USB_WritePMA>
          ep->xfer_buff += len;
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695a      	ldr	r2, [r3, #20]
 8008dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd4:	441a      	add	r2, r3
 8008dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d90f      	bls.n	8008e1e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a1a      	ldr	r2, [r3, #32]
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	621a      	str	r2, [r3, #32]
 8008e1c:	e00e      	b.n	8008e3c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80cc 	beq.w	8008fde <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d178      	bne.n	8008f56 <USB_EPStartXfer+0x1202>
 8008e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e88:	4413      	add	r3, r2
 8008e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	011a      	lsls	r2, r3, #4
 8008e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d116      	bne.n	8008ee0 <USB_EPStartXfer+0x118c>
 8008eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e064      	b.n	8008faa <USB_EPStartXfer+0x1256>
 8008ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ee6:	d818      	bhi.n	8008f1a <USB_EPStartXfer+0x11c6>
 8008ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eec:	085b      	lsrs	r3, r3, #1
 8008eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d004      	beq.n	8008f08 <USB_EPStartXfer+0x11b4>
 8008efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f02:	3301      	adds	r3, #1
 8008f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	029b      	lsls	r3, r3, #10
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	e047      	b.n	8008faa <USB_EPStartXfer+0x1256>
 8008f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f28:	f003 031f 	and.w	r3, r3, #31
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <USB_EPStartXfer+0x11e6>
 8008f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f34:	3b01      	subs	r3, #1
 8008f36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	029b      	lsls	r3, r3, #10
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e029      	b.n	8008faa <USB_EPStartXfer+0x1256>
 8008f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d121      	bne.n	8008faa <USB_EPStartXfer+0x1256>
 8008f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	011a      	lsls	r2, r3, #4
 8008f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f94:	4413      	add	r3, r2
 8008f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	895b      	ldrh	r3, [r3, #10]
 8008fb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6959      	ldr	r1, [r3, #20]
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008fd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008fd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008fd8:	6800      	ldr	r0, [r0, #0]
 8008fda:	f000 fe31 	bl	8009c40 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009000:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900c:	8013      	strh	r3, [r2, #0]
 800900e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009012:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009016:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800901a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800901e:	8812      	ldrh	r2, [r2, #0]
 8009020:	f082 0210 	eor.w	r2, r2, #16
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800902e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009032:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009036:	8812      	ldrh	r2, [r2, #0]
 8009038:	f082 0220 	eor.w	r2, r2, #32
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	441a      	add	r2, r3
 8009058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800906a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800906e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009072:	b29b      	uxth	r3, r3
 8009074:	8013      	strh	r3, [r2, #0]
 8009076:	f000 bc9f 	b.w	80099b8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800907a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 80ae 	bne.w	80091e8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800908c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d917      	bls.n	80090d8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80090a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80090b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	619a      	str	r2, [r3, #24]
 80090d6:	e00e      	b.n	80090f6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80090d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80090f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009112:	b29b      	uxth	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800911a:	4413      	add	r3, r2
 800911c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	011a      	lsls	r2, r3, #4
 800912e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009132:	4413      	add	r3, r2
 8009134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800913c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d116      	bne.n	8009172 <USB_EPStartXfer+0x141e>
 8009144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29b      	uxth	r3, r3
 8009160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009168:	b29a      	uxth	r2, r3
 800916a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	e3e8      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
 8009172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009176:	2b3e      	cmp	r3, #62	; 0x3e
 8009178:	d818      	bhi.n	80091ac <USB_EPStartXfer+0x1458>
 800917a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <USB_EPStartXfer+0x1446>
 8009190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009194:	3301      	adds	r3, #1
 8009196:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800919a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800919e:	b29b      	uxth	r3, r3
 80091a0:	029b      	lsls	r3, r3, #10
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091a8:	801a      	strh	r2, [r3, #0]
 80091aa:	e3cb      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
 80091ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80091b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ba:	f003 031f 	and.w	r3, r3, #31
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <USB_EPStartXfer+0x1478>
 80091c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091c6:	3b01      	subs	r3, #1
 80091c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80091cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	029b      	lsls	r3, r3, #10
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091de:	b29a      	uxth	r2, r3
 80091e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	e3ad      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80091e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	78db      	ldrb	r3, [r3, #3]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	f040 8200 	bne.w	80095fa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f040 8091 	bne.w	800932e <USB_EPStartXfer+0x15da>
 800920c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800921a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009228:	b29b      	uxth	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009230:	4413      	add	r3, r2
 8009232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	011a      	lsls	r2, r3, #4
 8009244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009248:	4413      	add	r3, r2
 800924a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800924e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d116      	bne.n	8009290 <USB_EPStartXfer+0x153c>
 8009262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800926e:	b29a      	uxth	r2, r3
 8009270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	b29b      	uxth	r3, r3
 800927e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009286:	b29a      	uxth	r2, r3
 8009288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	e083      	b.n	8009398 <USB_EPStartXfer+0x1644>
 8009290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b3e      	cmp	r3, #62	; 0x3e
 800929e:	d820      	bhi.n	80092e2 <USB_EPStartXfer+0x158e>
 80092a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <USB_EPStartXfer+0x157c>
 80092c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ca:	3301      	adds	r3, #1
 80092cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	029b      	lsls	r3, r3, #10
 80092d8:	b29a      	uxth	r2, r3
 80092da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092de:	801a      	strh	r2, [r3, #0]
 80092e0:	e05a      	b.n	8009398 <USB_EPStartXfer+0x1644>
 80092e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <USB_EPStartXfer+0x15be>
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	3b01      	subs	r3, #1
 800930e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009316:	b29b      	uxth	r3, r3
 8009318:	029b      	lsls	r3, r3, #10
 800931a:	b29b      	uxth	r3, r3
 800931c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009324:	b29a      	uxth	r2, r3
 8009326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e034      	b.n	8009398 <USB_EPStartXfer+0x1644>
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d12c      	bne.n	8009398 <USB_EPStartXfer+0x1644>
 800933e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800934c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935a:	b29b      	uxth	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009362:	4413      	add	r3, r2
 8009364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	011a      	lsls	r2, r3, #4
 8009376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800937a:	4413      	add	r3, r2
 800937c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	b29a      	uxth	r2, r3
 8009392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009396:	801a      	strh	r2, [r3, #0]
 8009398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 8091 	bne.w	80094da <USB_EPStartXfer+0x1786>
 80093b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093dc:	4413      	add	r3, r2
 80093de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	011a      	lsls	r2, r3, #4
 80093f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093f4:	4413      	add	r3, r2
 80093f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d116      	bne.n	800943c <USB_EPStartXfer+0x16e8>
 800940e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800941a:	b29a      	uxth	r2, r3
 800941c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009432:	b29a      	uxth	r2, r3
 8009434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	e07c      	b.n	8009536 <USB_EPStartXfer+0x17e2>
 800943c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b3e      	cmp	r3, #62	; 0x3e
 800944a:	d820      	bhi.n	800948e <USB_EPStartXfer+0x173a>
 800944c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800945e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <USB_EPStartXfer+0x1728>
 8009472:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009476:	3301      	adds	r3, #1
 8009478:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800947c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009480:	b29b      	uxth	r3, r3
 8009482:	029b      	lsls	r3, r3, #10
 8009484:	b29a      	uxth	r2, r3
 8009486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	e053      	b.n	8009536 <USB_EPStartXfer+0x17e2>
 800948e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	f003 031f 	and.w	r3, r3, #31
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <USB_EPStartXfer+0x176a>
 80094b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094b8:	3b01      	subs	r3, #1
 80094ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	029b      	lsls	r3, r3, #10
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094d6:	801a      	strh	r2, [r3, #0]
 80094d8:	e02d      	b.n	8009536 <USB_EPStartXfer+0x17e2>
 80094da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d125      	bne.n	8009536 <USB_EPStartXfer+0x17e2>
 80094ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009500:	4413      	add	r3, r2
 8009502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	011a      	lsls	r2, r3, #4
 8009514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009518:	4413      	add	r3, r2
 800951a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800951e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	b29a      	uxth	r2, r3
 8009530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009534:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 81fe 	beq.w	8009944 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009568:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800956c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <USB_EPStartXfer+0x182c>
 8009574:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10d      	bne.n	800959c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009580:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009588:	2b00      	cmp	r3, #0
 800958a:	f040 81db 	bne.w	8009944 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800958e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 81d4 	bne.w	8009944 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800959c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80095c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	441a      	add	r2, r3
 80095e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80095e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	8013      	strh	r3, [r2, #0]
 80095f8:	e1a4      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	78db      	ldrb	r3, [r3, #3]
 8009606:	2b01      	cmp	r3, #1
 8009608:	f040 819a 	bne.w	8009940 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800960c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	d917      	bls.n	8009658 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8009628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699a      	ldr	r2, [r3, #24]
 8009644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	619a      	str	r2, [r3, #24]
 8009656:	e00e      	b.n	8009676 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8009658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	785b      	ldrb	r3, [r3, #1]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d178      	bne.n	8009778 <USB_EPStartXfer+0x1a24>
 8009686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	461a      	mov	r2, r3
 80096a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096aa:	4413      	add	r3, r2
 80096ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	011a      	lsls	r2, r3, #4
 80096be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096c2:	4413      	add	r3, r2
 80096c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d116      	bne.n	8009702 <USB_EPStartXfer+0x19ae>
 80096d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096fe:	801a      	strh	r2, [r3, #0]
 8009700:	e06b      	b.n	80097da <USB_EPStartXfer+0x1a86>
 8009702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009706:	2b3e      	cmp	r3, #62	; 0x3e
 8009708:	d818      	bhi.n	800973c <USB_EPStartXfer+0x19e8>
 800970a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d004      	beq.n	800972a <USB_EPStartXfer+0x19d6>
 8009720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009724:	3301      	adds	r3, #1
 8009726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800972e:	b29b      	uxth	r3, r3
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	e04e      	b.n	80097da <USB_EPStartXfer+0x1a86>
 800973c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009740:	095b      	lsrs	r3, r3, #5
 8009742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	2b00      	cmp	r3, #0
 8009750:	d104      	bne.n	800975c <USB_EPStartXfer+0x1a08>
 8009752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009756:	3b01      	subs	r3, #1
 8009758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800975c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009760:	b29b      	uxth	r3, r3
 8009762:	029b      	lsls	r3, r3, #10
 8009764:	b29b      	uxth	r3, r3
 8009766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800976e:	b29a      	uxth	r2, r3
 8009770:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	e030      	b.n	80097da <USB_EPStartXfer+0x1a86>
 8009778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800977c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d128      	bne.n	80097da <USB_EPStartXfer+0x1a86>
 8009788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ac:	4413      	add	r3, r2
 80097ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	011a      	lsls	r2, r3, #4
 80097c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c4:	4413      	add	r3, r2
 80097c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097d8:	801a      	strh	r2, [r3, #0]
 80097da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d178      	bne.n	80098ea <USB_EPStartXfer+0x1b96>
 80097f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009814:	b29b      	uxth	r3, r3
 8009816:	461a      	mov	r2, r3
 8009818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800981c:	4413      	add	r3, r2
 800981e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	011a      	lsls	r2, r3, #4
 8009830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009834:	4413      	add	r3, r2
 8009836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800983a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800983e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d116      	bne.n	8009874 <USB_EPStartXfer+0x1b20>
 8009846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009852:	b29a      	uxth	r2, r3
 8009854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009858:	801a      	strh	r2, [r3, #0]
 800985a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986a:	b29a      	uxth	r2, r3
 800986c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009870:	801a      	strh	r2, [r3, #0]
 8009872:	e067      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
 8009874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009878:	2b3e      	cmp	r3, #62	; 0x3e
 800987a:	d818      	bhi.n	80098ae <USB_EPStartXfer+0x1b5a>
 800987c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009880:	085b      	lsrs	r3, r3, #1
 8009882:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <USB_EPStartXfer+0x1b48>
 8009892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009896:	3301      	adds	r3, #1
 8009898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800989c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	029b      	lsls	r3, r3, #10
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e04a      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
 80098ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098bc:	f003 031f 	and.w	r3, r3, #31
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <USB_EPStartXfer+0x1b7a>
 80098c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098c8:	3b01      	subs	r3, #1
 80098ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	029b      	lsls	r3, r3, #10
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	e02c      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
 80098ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d124      	bne.n	8009944 <USB_EPStartXfer+0x1bf0>
 80098fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009908:	b29b      	uxth	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009910:	4413      	add	r3, r2
 8009912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	011a      	lsls	r2, r3, #4
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009928:	4413      	add	r3, r2
 800992a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800992e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009936:	b29a      	uxth	r2, r3
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800993c:	801a      	strh	r2, [r3, #0]
 800993e:	e001      	b.n	8009944 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e03a      	b.n	80099ba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800996e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009972:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009976:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800997a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800997e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009982:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	441a      	add	r2, r3
 80099a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d020      	beq.n	8009a18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ec:	81bb      	strh	r3, [r7, #12]
 80099ee:	89bb      	ldrh	r3, [r7, #12]
 80099f0:	f083 0310 	eor.w	r3, r3, #16
 80099f4:	81bb      	strh	r3, [r7, #12]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	441a      	add	r2, r3
 8009a00:	89bb      	ldrh	r3, [r7, #12]
 8009a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	8013      	strh	r3, [r2, #0]
 8009a16:	e01f      	b.n	8009a58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2e:	81fb      	strh	r3, [r7, #14]
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a36:	81fb      	strh	r3, [r7, #14]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	89fb      	ldrh	r3, [r7, #14]
 8009a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bc80      	pop	{r7}
 8009a62:	4770      	bx	lr

08009a64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	7b1b      	ldrb	r3, [r3, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f040 809d 	bne.w	8009bb2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d04c      	beq.n	8009b1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	823b      	strh	r3, [r7, #16]
 8009a8e:	8a3b      	ldrh	r3, [r7, #16]
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01b      	beq.n	8009ad0 <USB_EPClearStall+0x6c>
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	81fb      	strh	r3, [r7, #14]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	441a      	add	r2, r3
 8009aba:	89fb      	ldrh	r3, [r7, #14]
 8009abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	78db      	ldrb	r3, [r3, #3]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d06c      	beq.n	8009bb2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aee:	81bb      	strh	r3, [r7, #12]
 8009af0:	89bb      	ldrh	r3, [r7, #12]
 8009af2:	f083 0320 	eor.w	r3, r3, #32
 8009af6:	81bb      	strh	r3, [r7, #12]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	441a      	add	r2, r3
 8009b02:	89bb      	ldrh	r3, [r7, #12]
 8009b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	8013      	strh	r3, [r2, #0]
 8009b18:	e04b      	b.n	8009bb2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	82fb      	strh	r3, [r7, #22]
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01b      	beq.n	8009b6a <USB_EPClearStall+0x106>
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b48:	82bb      	strh	r3, [r7, #20]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	441a      	add	r2, r3
 8009b54:	8abb      	ldrh	r3, [r7, #20]
 8009b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b80:	827b      	strh	r3, [r7, #18]
 8009b82:	8a7b      	ldrh	r3, [r7, #18]
 8009b84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b88:	827b      	strh	r3, [r7, #18]
 8009b8a:	8a7b      	ldrh	r3, [r7, #18]
 8009b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b90:	827b      	strh	r3, [r7, #18]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	441a      	add	r2, r3
 8009b9c:	8a7b      	ldrh	r3, [r7, #18]
 8009b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr

08009bbe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2280      	movs	r2, #128	; 0x80
 8009bd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bc80      	pop	{r7}
 8009be2:	4770      	bx	lr

08009be4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr

08009bf8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bc80      	pop	{r7}
 8009c0a:	4770      	bx	lr

08009c0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr

08009c2a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bc80      	pop	{r7}
 8009c3e:	4770      	bx	lr

08009c40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b08d      	sub	sp, #52	; 0x34
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	460b      	mov	r3, r1
 8009c50:	80fb      	strh	r3, [r7, #6]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c56:	88bb      	ldrh	r3, [r7, #4]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	005a      	lsls	r2, r3, #1
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c78:	e01e      	b.n	8009cb8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	3301      	adds	r3, #1
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	3302      	adds	r3, #2
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	3301      	adds	r3, #1
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1dd      	bne.n	8009c7a <USB_WritePMA+0x3a>
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	3734      	adds	r7, #52	; 0x34
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr

08009cca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b08b      	sub	sp, #44	; 0x2c
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	460b      	mov	r3, r1
 8009cda:	80fb      	strh	r3, [r7, #6]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ce0:	88bb      	ldrh	r3, [r7, #4]
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	005a      	lsls	r2, r3, #1
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cfc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
 8009d02:	e01b      	b.n	8009d3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	3302      	adds	r3, #2
 8009d10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	0a1b      	lsrs	r3, r3, #8
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	3302      	adds	r3, #2
 8009d34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e0      	bne.n	8009d04 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d42:	88bb      	ldrh	r3, [r7, #4]
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d007      	beq.n	8009d5e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	701a      	strb	r2, [r3, #0]
  }
}
 8009d5e:	bf00      	nop
 8009d60:	372c      	adds	r7, #44	; 0x2c
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr

08009d68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	7c1b      	ldrb	r3, [r3, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d115      	bne.n	8009dac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d84:	2202      	movs	r2, #2
 8009d86:	2181      	movs	r1, #129	; 0x81
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 fee8 	bl	800bb5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d98:	2202      	movs	r2, #2
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 fede 	bl	800bb5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009daa:	e012      	b.n	8009dd2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	2202      	movs	r2, #2
 8009db0:	2181      	movs	r1, #129	; 0x81
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 fed3 	bl	800bb5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 feca 	bl	800bb5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	2182      	movs	r1, #130	; 0x82
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fec0 	bl	800bb5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009de4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009de8:	f001 ffe0 	bl	800bdac <USBD_static_malloc>
 8009dec:	4602      	mov	r2, r0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
 8009e02:	e026      	b.n	8009e52 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e0a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7c1b      	ldrb	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 ff80 	bl	800bd40 <USBD_LL_PrepareReceive>
 8009e40:	e007      	b.n	8009e52 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 ff77 	bl	800bd40 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e6c:	2181      	movs	r1, #129	; 0x81
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 fe9b 	bl	800bbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 fe94 	bl	800bbaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e8a:	2182      	movs	r1, #130	; 0x82
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 fe8c 	bl	800bbaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00e      	beq.n	8009ec0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 ff86 	bl	800bdc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eda:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d039      	beq.n	8009f68 <USBD_CDC_Setup+0x9e>
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	d17f      	bne.n	8009ff8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	88db      	ldrh	r3, [r3, #6]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d029      	beq.n	8009f54 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da11      	bge.n	8009f2e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009f16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	88d2      	ldrh	r2, [r2, #6]
 8009f1c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f1e:	6939      	ldr	r1, [r7, #16]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	88db      	ldrh	r3, [r3, #6]
 8009f24:	461a      	mov	r2, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fa09 	bl	800b33e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009f2c:	e06b      	b.n	800a006 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785a      	ldrb	r2, [r3, #1]
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	88db      	ldrh	r3, [r3, #6]
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f44:	6939      	ldr	r1, [r7, #16]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	88db      	ldrh	r3, [r3, #6]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fa24 	bl	800b39a <USBD_CtlPrepareRx>
      break;
 8009f52:	e058      	b.n	800a006 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	7850      	ldrb	r0, [r2, #1]
 8009f60:	2200      	movs	r2, #0
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	4798      	blx	r3
      break;
 8009f66:	e04e      	b.n	800a006 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b0b      	cmp	r3, #11
 8009f6e:	d02e      	beq.n	8009fce <USBD_CDC_Setup+0x104>
 8009f70:	2b0b      	cmp	r3, #11
 8009f72:	dc38      	bgt.n	8009fe6 <USBD_CDC_Setup+0x11c>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <USBD_CDC_Setup+0xb4>
 8009f78:	2b0a      	cmp	r3, #10
 8009f7a:	d014      	beq.n	8009fa6 <USBD_CDC_Setup+0xdc>
 8009f7c:	e033      	b.n	8009fe6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d107      	bne.n	8009f98 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f88:	f107 030c 	add.w	r3, r7, #12
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f9d4 	bl	800b33e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f96:	e02e      	b.n	8009ff6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 f965 	bl	800b26a <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa4:	e027      	b.n	8009ff6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d107      	bne.n	8009fc0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fb0:	f107 030f 	add.w	r3, r7, #15
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 f9c0 	bl	800b33e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fbe:	e01a      	b.n	8009ff6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f951 	bl	800b26a <USBD_CtlError>
            ret = USBD_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	75fb      	strb	r3, [r7, #23]
          break;
 8009fcc:	e013      	b.n	8009ff6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d00d      	beq.n	8009ff4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 f945 	bl	800b26a <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fe4:	e006      	b.n	8009ff4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 f93e 	bl	800b26a <USBD_CtlError>
          ret = USBD_FAIL;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff2:	e000      	b.n	8009ff6 <USBD_CDC_Setup+0x12c>
          break;
 8009ff4:	bf00      	nop
      }
      break;
 8009ff6:	e006      	b.n	800a006 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 f935 	bl	800b26a <USBD_CtlError>
      ret = USBD_FAIL;
 800a000:	2302      	movs	r3, #2
 800a002:	75fb      	strb	r3, [r7, #23]
      break;
 800a004:	bf00      	nop
  }

  return ret;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a02a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03a      	beq.n	800a0ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	331c      	adds	r3, #28
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d029      	beq.n	800a0a0 <USBD_CDC_DataIn+0x90>
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	331c      	adds	r3, #28
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	78f9      	ldrb	r1, [r7, #3]
 800a060:	68b8      	ldr	r0, [r7, #8]
 800a062:	460b      	mov	r3, r1
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	440b      	add	r3, r1
 800a068:	00db      	lsls	r3, r3, #3
 800a06a:	4403      	add	r3, r0
 800a06c:	3338      	adds	r3, #56	; 0x38
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	fbb2 f1f3 	udiv	r1, r2, r3
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d110      	bne.n	800a0a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	331c      	adds	r3, #28
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a092:	78f9      	ldrb	r1, [r7, #3]
 800a094:	2300      	movs	r3, #0
 800a096:	2200      	movs	r2, #0
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 fe2e 	bl	800bcfa <USBD_LL_Transmit>
 800a09e:	e003      	b.n	800a0a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e000      	b.n	800a0ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a0ac:	2302      	movs	r3, #2
  }
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fe59 	bl	800bd86 <USBD_LL_GetRxDataSize>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00d      	beq.n	800a102 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4798      	blx	r3

    return USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e000      	b.n	800a104 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a102:	2302      	movs	r3, #2
  }
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a122:	2b00      	cmp	r3, #0
 800a124:	d015      	beq.n	800a152 <USBD_CDC_EP0_RxReady+0x46>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	d010      	beq.n	800a152 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a13e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a146:	b292      	uxth	r2, r2
 800a148:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	22ff      	movs	r2, #255	; 0xff
 800a14e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2243      	movs	r2, #67	; 0x43
 800a168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20000094 	.word	0x20000094

0800a17c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2243      	movs	r2, #67	; 0x43
 800a188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a18a:	4b03      	ldr	r3, [pc, #12]	; (800a198 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20000050 	.word	0x20000050

0800a19c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2243      	movs	r2, #67	; 0x43
 800a1a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a1aa:	4b03      	ldr	r3, [pc, #12]	; (800a1b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	200000d8 	.word	0x200000d8

0800a1bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	220a      	movs	r2, #10
 800a1c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a1ca:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bc80      	pop	{r7}
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	2000000c 	.word	0x2000000c

0800a1dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	371c      	adds	r7, #28
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr

0800a23a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b085      	sub	sp, #20
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bc80      	pop	{r7}
 800a25e:	4770      	bx	lr

0800a260 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01c      	beq.n	800a2b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a280:	2b00      	cmp	r3, #0
 800a282:	d115      	bne.n	800a2b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2201      	movs	r2, #1
 800a288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2181      	movs	r1, #129	; 0x81
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fd27 	bl	800bcfa <USBD_LL_Transmit>

      return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e002      	b.n	800a2b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a2b4:	2302      	movs	r3, #2
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d017      	beq.n	800a308 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7c1b      	ldrb	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d109      	bne.n	800a2f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 fd27 	bl	800bd40 <USBD_LL_PrepareReceive>
 800a2f2:	e007      	b.n	800a304 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 fd1e 	bl	800bd40 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	e000      	b.n	800a30a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a308:	2302      	movs	r3, #2
  }
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	4613      	mov	r3, r2
 800a31e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a326:	2302      	movs	r3, #2
 800a328:	e01a      	b.n	800a360 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	79fa      	ldrb	r2, [r7, #7]
 800a356:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f001 fb8b 	bl	800ba74 <USBD_LL_Init>

  return USBD_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d006      	beq.n	800a38a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
 800a388:	e001      	b.n	800a38e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a38a:	2302      	movs	r3, #2
 800a38c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr

0800a39a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fbc0 	bl	800bb28 <USBD_LL_Start>

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bc80      	pop	{r7}
 800a3c4:	4770      	bx	lr

0800a3c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00c      	beq.n	800a3fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	4798      	blx	r3
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	4611      	mov	r1, r2
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3

  return USBD_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fed8 	bl	800b1f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a45e:	f003 031f 	and.w	r3, r3, #31
 800a462:	2b02      	cmp	r3, #2
 800a464:	d016      	beq.n	800a494 <USBD_LL_SetupStage+0x6a>
 800a466:	2b02      	cmp	r3, #2
 800a468:	d81c      	bhi.n	800a4a4 <USBD_LL_SetupStage+0x7a>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <USBD_LL_SetupStage+0x4a>
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d008      	beq.n	800a484 <USBD_LL_SetupStage+0x5a>
 800a472:	e017      	b.n	800a4a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9cb 	bl	800a818 <USBD_StdDevReq>
      break;
 800a482:	e01a      	b.n	800a4ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fa2d 	bl	800a8ec <USBD_StdItfReq>
      break;
 800a492:	e012      	b.n	800a4ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fa6d 	bl	800a97c <USBD_StdEPReq>
      break;
 800a4a2:	e00a      	b.n	800a4ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a4aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fb98 	bl	800bbe8 <USBD_LL_StallEP>
      break;
 800a4b8:	bf00      	nop
  }

  return USBD_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d14b      	bne.n	800a570 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d134      	bne.n	800a554 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d919      	bls.n	800a52a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d203      	bcs.n	800a518 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a514:	b29b      	uxth	r3, r3
 800a516:	e002      	b.n	800a51e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 ff57 	bl	800b3d6 <USBD_CtlContinueRx>
 800a528:	e038      	b.n	800a59c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d105      	bne.n	800a54c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 ff54 	bl	800b3fa <USBD_CtlSendStatus>
 800a552:	e023      	b.n	800a59c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a55a:	2b05      	cmp	r3, #5
 800a55c:	d11e      	bne.n	800a59c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f001 fb3d 	bl	800bbe8 <USBD_LL_StallEP>
 800a56e:	e015      	b.n	800a59c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a582:	2b03      	cmp	r3, #3
 800a584:	d108      	bne.n	800a598 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	7afa      	ldrb	r2, [r7, #11]
 800a590:	4611      	mov	r1, r2
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	4798      	blx	r3
 800a596:	e001      	b.n	800a59c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a598:	2302      	movs	r3, #2
 800a59a:	e000      	b.n	800a59e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d17f      	bne.n	800a6ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3314      	adds	r3, #20
 800a5be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d15c      	bne.n	800a684 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d915      	bls.n	800a602 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fec1 	bl	800b376 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f001 fba0 	bl	800bd40 <USBD_LL_PrepareReceive>
 800a600:	e04e      	b.n	800a6a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	6912      	ldr	r2, [r2, #16]
 800a60a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a60e:	fb01 f202 	mul.w	r2, r1, r2
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d11c      	bne.n	800a652 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a620:	429a      	cmp	r2, r3
 800a622:	d316      	bcc.n	800a652 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a62e:	429a      	cmp	r2, r3
 800a630:	d20f      	bcs.n	800a652 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a632:	2200      	movs	r2, #0
 800a634:	2100      	movs	r1, #0
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 fe9d 	bl	800b376 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a644:	2300      	movs	r3, #0
 800a646:	2200      	movs	r2, #0
 800a648:	2100      	movs	r1, #0
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f001 fb78 	bl	800bd40 <USBD_LL_PrepareReceive>
 800a650:	e026      	b.n	800a6a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a664:	2b03      	cmp	r3, #3
 800a666:	d105      	bne.n	800a674 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a674:	2180      	movs	r1, #128	; 0x80
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f001 fab6 	bl	800bbe8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fecf 	bl	800b420 <USBD_CtlReceiveStatus>
 800a682:	e00d      	b.n	800a6a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d004      	beq.n	800a698 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f001 faa4 	bl	800bbe8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d11d      	bne.n	800a6e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7ff fe81 	bl	800a3b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6b8:	e015      	b.n	800a6e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d108      	bne.n	800a6e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	7afa      	ldrb	r2, [r7, #11]
 800a6da:	4611      	mov	r1, r2
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	4798      	blx	r3
 800a6e0:	e001      	b.n	800a6e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e000      	b.n	800a6e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fa2d 	bl	800bb5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2240      	movs	r2, #64	; 0x40
 800a710:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	2200      	movs	r2, #0
 800a718:	2180      	movs	r1, #128	; 0x80
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fa1f 	bl	800bb5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2240      	movs	r2, #64	; 0x40
 800a72a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a750:	2b00      	cmp	r3, #0
 800a752:	d009      	beq.n	800a768 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	6852      	ldr	r2, [r2, #4]
 800a760:	b2d2      	uxtb	r2, r2
 800a762:	4611      	mov	r1, r2
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
  }

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bc80      	pop	{r7}
 800a7b6:	4770      	bx	lr

0800a7b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d105      	bne.n	800a7d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d10b      	bne.n	800a80c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d005      	beq.n	800a83e <USBD_StdDevReq+0x26>
 800a832:	2b40      	cmp	r3, #64	; 0x40
 800a834:	d84f      	bhi.n	800a8d6 <USBD_StdDevReq+0xbe>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d009      	beq.n	800a84e <USBD_StdDevReq+0x36>
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d14b      	bne.n	800a8d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
      break;
 800a84c:	e048      	b.n	800a8e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	2b09      	cmp	r3, #9
 800a854:	d839      	bhi.n	800a8ca <USBD_StdDevReq+0xb2>
 800a856:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <USBD_StdDevReq+0x44>)
 800a858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85c:	0800a8ad 	.word	0x0800a8ad
 800a860:	0800a8c1 	.word	0x0800a8c1
 800a864:	0800a8cb 	.word	0x0800a8cb
 800a868:	0800a8b7 	.word	0x0800a8b7
 800a86c:	0800a8cb 	.word	0x0800a8cb
 800a870:	0800a88f 	.word	0x0800a88f
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a8cb 	.word	0x0800a8cb
 800a87c:	0800a8a3 	.word	0x0800a8a3
 800a880:	0800a899 	.word	0x0800a899
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f9dc 	bl	800ac44 <USBD_GetDescriptor>
          break;
 800a88c:	e022      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fb3f 	bl	800af14 <USBD_SetAddress>
          break;
 800a896:	e01d      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fb7e 	bl	800af9c <USBD_SetConfig>
          break;
 800a8a0:	e018      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fc07 	bl	800b0b8 <USBD_GetConfig>
          break;
 800a8aa:	e013      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fc37 	bl	800b122 <USBD_GetStatus>
          break;
 800a8b4:	e00e      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fc65 	bl	800b188 <USBD_SetFeature>
          break;
 800a8be:	e009      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fc74 	bl	800b1b0 <USBD_ClrFeature>
          break;
 800a8c8:	e004      	b.n	800a8d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fccc 	bl	800b26a <USBD_CtlError>
          break;
 800a8d2:	bf00      	nop
      }
      break;
 800a8d4:	e004      	b.n	800a8e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fcc6 	bl	800b26a <USBD_CtlError>
      break;
 800a8de:	bf00      	nop
  }

  return ret;
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop

0800a8ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a902:	2b40      	cmp	r3, #64	; 0x40
 800a904:	d005      	beq.n	800a912 <USBD_StdItfReq+0x26>
 800a906:	2b40      	cmp	r3, #64	; 0x40
 800a908:	d82e      	bhi.n	800a968 <USBD_StdItfReq+0x7c>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <USBD_StdItfReq+0x26>
 800a90e:	2b20      	cmp	r3, #32
 800a910:	d12a      	bne.n	800a968 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a918:	3b01      	subs	r3, #1
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d81d      	bhi.n	800a95a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	889b      	ldrh	r3, [r3, #4]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	d813      	bhi.n	800a950 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	4798      	blx	r3
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	88db      	ldrh	r3, [r3, #6]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d110      	bne.n	800a964 <USBD_StdItfReq+0x78>
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10d      	bne.n	800a964 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fd56 	bl	800b3fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a94e:	e009      	b.n	800a964 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fc89 	bl	800b26a <USBD_CtlError>
          break;
 800a958:	e004      	b.n	800a964 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc84 	bl	800b26a <USBD_CtlError>
          break;
 800a962:	e000      	b.n	800a966 <USBD_StdItfReq+0x7a>
          break;
 800a964:	bf00      	nop
      }
      break;
 800a966:	e004      	b.n	800a972 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fc7d 	bl	800b26a <USBD_CtlError>
      break;
 800a970:	bf00      	nop
  }

  return USBD_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	889b      	ldrh	r3, [r3, #4]
 800a98e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	d007      	beq.n	800a9ac <USBD_StdEPReq+0x30>
 800a99c:	2b40      	cmp	r3, #64	; 0x40
 800a99e:	f200 8146 	bhi.w	800ac2e <USBD_StdEPReq+0x2b2>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <USBD_StdEPReq+0x40>
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	f040 8141 	bne.w	800ac2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
      break;
 800a9ba:	e13d      	b.n	800ac38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d10a      	bne.n	800a9de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	e12d      	b.n	800ac3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d007      	beq.n	800a9f6 <USBD_StdEPReq+0x7a>
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	f300 811b 	bgt.w	800ac22 <USBD_StdEPReq+0x2a6>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d072      	beq.n	800aad6 <USBD_StdEPReq+0x15a>
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d03a      	beq.n	800aa6a <USBD_StdEPReq+0xee>
 800a9f4:	e115      	b.n	800ac22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d002      	beq.n	800aa06 <USBD_StdEPReq+0x8a>
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d015      	beq.n	800aa30 <USBD_StdEPReq+0xb4>
 800aa04:	e02b      	b.n	800aa5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00c      	beq.n	800aa26 <USBD_StdEPReq+0xaa>
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	2b80      	cmp	r3, #128	; 0x80
 800aa10:	d009      	beq.n	800aa26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f8e6 	bl	800bbe8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa1c:	2180      	movs	r1, #128	; 0x80
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 f8e2 	bl	800bbe8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa24:	e020      	b.n	800aa68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fc1e 	bl	800b26a <USBD_CtlError>
              break;
 800aa2e:	e01b      	b.n	800aa68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	885b      	ldrh	r3, [r3, #2]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10e      	bne.n	800aa56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <USBD_StdEPReq+0xda>
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	2b80      	cmp	r3, #128	; 0x80
 800aa42:	d008      	beq.n	800aa56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	88db      	ldrh	r3, [r3, #6]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 f8c9 	bl	800bbe8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fccf 	bl	800b3fa <USBD_CtlSendStatus>

              break;
 800aa5c:	e004      	b.n	800aa68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fc02 	bl	800b26a <USBD_CtlError>
              break;
 800aa66:	bf00      	nop
          }
          break;
 800aa68:	e0e0      	b.n	800ac2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d002      	beq.n	800aa7a <USBD_StdEPReq+0xfe>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d015      	beq.n	800aaa4 <USBD_StdEPReq+0x128>
 800aa78:	e026      	b.n	800aac8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00c      	beq.n	800aa9a <USBD_StdEPReq+0x11e>
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d009      	beq.n	800aa9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f8ac 	bl	800bbe8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa90:	2180      	movs	r1, #128	; 0x80
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f001 f8a8 	bl	800bbe8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa98:	e01c      	b.n	800aad4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fbe4 	bl	800b26a <USBD_CtlError>
              break;
 800aaa2:	e017      	b.n	800aad4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	885b      	ldrh	r3, [r3, #2]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d112      	bne.n	800aad2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d004      	beq.n	800aac0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 f8b3 	bl	800bc26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc9a 	bl	800b3fa <USBD_CtlSendStatus>
              }
              break;
 800aac6:	e004      	b.n	800aad2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fbcd 	bl	800b26a <USBD_CtlError>
              break;
 800aad0:	e000      	b.n	800aad4 <USBD_StdEPReq+0x158>
              break;
 800aad2:	bf00      	nop
          }
          break;
 800aad4:	e0aa      	b.n	800ac2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d002      	beq.n	800aae6 <USBD_StdEPReq+0x16a>
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d032      	beq.n	800ab4a <USBD_StdEPReq+0x1ce>
 800aae4:	e097      	b.n	800ac16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <USBD_StdEPReq+0x180>
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	2b80      	cmp	r3, #128	; 0x80
 800aaf0:	d004      	beq.n	800aafc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fbb8 	bl	800b26a <USBD_CtlError>
                break;
 800aafa:	e091      	b.n	800ac20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	da0b      	bge.n	800ab1c <USBD_StdEPReq+0x1a0>
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	3310      	adds	r3, #16
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	4413      	add	r3, r2
 800ab18:	3304      	adds	r3, #4
 800ab1a:	e00b      	b.n	800ab34 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	3304      	adds	r3, #4
 800ab34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fbfb 	bl	800b33e <USBD_CtlSendData>
              break;
 800ab48:	e06a      	b.n	800ac20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da11      	bge.n	800ab76 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3318      	adds	r3, #24
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d117      	bne.n	800ab9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb7b 	bl	800b26a <USBD_CtlError>
                  break;
 800ab74:	e054      	b.n	800ac20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	f003 020f 	and.w	r2, r3, #15
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	440b      	add	r3, r1
 800ab88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d104      	bne.n	800ab9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fb68 	bl	800b26a <USBD_CtlError>
                  break;
 800ab9a:	e041      	b.n	800ac20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	da0b      	bge.n	800abbc <USBD_StdEPReq+0x240>
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	3310      	adds	r3, #16
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	4413      	add	r3, r2
 800abb8:	3304      	adds	r3, #4
 800abba:	e00b      	b.n	800abd4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	4413      	add	r3, r2
 800abd2:	3304      	adds	r3, #4
 800abd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <USBD_StdEPReq+0x266>
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b80      	cmp	r3, #128	; 0x80
 800abe0:	d103      	bne.n	800abea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	e00e      	b.n	800ac08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f001 f838 	bl	800bc64 <USBD_LL_IsStallEP>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2201      	movs	r2, #1
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	e002      	b.n	800ac08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb95 	bl	800b33e <USBD_CtlSendData>
              break;
 800ac14:	e004      	b.n	800ac20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fb26 	bl	800b26a <USBD_CtlError>
              break;
 800ac1e:	bf00      	nop
          }
          break;
 800ac20:	e004      	b.n	800ac2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb20 	bl	800b26a <USBD_CtlError>
          break;
 800ac2a:	bf00      	nop
      }
      break;
 800ac2c:	e004      	b.n	800ac38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fb1a 	bl	800b26a <USBD_CtlError>
      break;
 800ac36:	bf00      	nop
  }

  return ret;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	0a1b      	lsrs	r3, r3, #8
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3b01      	subs	r3, #1
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	f200 8128 	bhi.w	800aeba <USBD_GetDescriptor+0x276>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <USBD_GetDescriptor+0x2c>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ac8d 	.word	0x0800ac8d
 800ac74:	0800aca5 	.word	0x0800aca5
 800ac78:	0800ace5 	.word	0x0800ace5
 800ac7c:	0800aebb 	.word	0x0800aebb
 800ac80:	0800aebb 	.word	0x0800aebb
 800ac84:	0800ae5b 	.word	0x0800ae5b
 800ac88:	0800ae87 	.word	0x0800ae87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
      break;
 800aca2:	e112      	b.n	800aeca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7c1b      	ldrb	r3, [r3, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f107 0208 	add.w	r2, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	2202      	movs	r2, #2
 800acc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acc6:	e100      	b.n	800aeca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	f107 0208 	add.w	r2, r7, #8
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
 800acd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3301      	adds	r3, #1
 800acde:	2202      	movs	r2, #2
 800ace0:	701a      	strb	r2, [r3, #0]
      break;
 800ace2:	e0f2      	b.n	800aeca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b05      	cmp	r3, #5
 800acec:	f200 80ac 	bhi.w	800ae48 <USBD_GetDescriptor+0x204>
 800acf0:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <USBD_GetDescriptor+0xb4>)
 800acf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf6:	bf00      	nop
 800acf8:	0800ad11 	.word	0x0800ad11
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad79 	.word	0x0800ad79
 800ad04:	0800adad 	.word	0x0800adad
 800ad08:	0800ade1 	.word	0x0800ade1
 800ad0c:	0800ae15 	.word	0x0800ae15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad32:	e091      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa97 	bl	800b26a <USBD_CtlError>
            err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
          break;
 800ad42:	e089      	b.n	800ae58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7c12      	ldrb	r2, [r2, #16]
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad66:	e077      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa7d 	bl	800b26a <USBD_CtlError>
            err++;
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	3301      	adds	r3, #1
 800ad74:	72fb      	strb	r3, [r7, #11]
          break;
 800ad76:	e06f      	b.n	800ae58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e05d      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa63 	bl	800b26a <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e055      	b.n	800ae58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e043      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa49 	bl	800b26a <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e03b      	b.n	800ae58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae02:	e029      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa2f 	bl	800b26a <USBD_CtlError>
            err++;
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72fb      	strb	r3, [r7, #11]
          break;
 800ae12:	e021      	b.n	800ae58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e00f      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fa15 	bl	800b26a <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e007      	b.n	800ae58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fa0d 	bl	800b26a <USBD_CtlError>
          err++;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	3301      	adds	r3, #1
 800ae54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ae56:	e038      	b.n	800aeca <USBD_GetDescriptor+0x286>
 800ae58:	e037      	b.n	800aeca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7c1b      	ldrb	r3, [r3, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6a:	f107 0208 	add.w	r2, r7, #8
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4798      	blx	r3
 800ae72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae74:	e029      	b.n	800aeca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f9f6 	bl	800b26a <USBD_CtlError>
        err++;
 800ae7e:	7afb      	ldrb	r3, [r7, #11]
 800ae80:	3301      	adds	r3, #1
 800ae82:	72fb      	strb	r3, [r7, #11]
      break;
 800ae84:	e021      	b.n	800aeca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7c1b      	ldrb	r3, [r3, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10d      	bne.n	800aeaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	f107 0208 	add.w	r2, r7, #8
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	4798      	blx	r3
 800ae9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	3301      	adds	r3, #1
 800aea4:	2207      	movs	r2, #7
 800aea6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aea8:	e00f      	b.n	800aeca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9dc 	bl	800b26a <USBD_CtlError>
        err++;
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	72fb      	strb	r3, [r7, #11]
      break;
 800aeb8:	e007      	b.n	800aeca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f9d4 	bl	800b26a <USBD_CtlError>
      err++;
 800aec2:	7afb      	ldrb	r3, [r7, #11]
 800aec4:	3301      	adds	r3, #1
 800aec6:	72fb      	strb	r3, [r7, #11]
      break;
 800aec8:	bf00      	nop
  }

  if (err != 0U)
 800aeca:	7afb      	ldrb	r3, [r7, #11]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d11c      	bne.n	800af0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aed0:	893b      	ldrh	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d011      	beq.n	800aefa <USBD_GetDescriptor+0x2b6>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00d      	beq.n	800aefa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88da      	ldrh	r2, [r3, #6]
 800aee2:	893b      	ldrh	r3, [r7, #8]
 800aee4:	4293      	cmp	r3, r2
 800aee6:	bf28      	it	cs
 800aee8:	4613      	movcs	r3, r2
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	461a      	mov	r2, r3
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa22 	bl	800b33e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	88db      	ldrh	r3, [r3, #6]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa79 	bl	800b3fa <USBD_CtlSendStatus>
 800af08:	e000      	b.n	800af0c <USBD_GetDescriptor+0x2c8>
    return;
 800af0a:	bf00      	nop
    }
  }
}
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop

0800af14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	889b      	ldrh	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d130      	bne.n	800af88 <USBD_SetAddress+0x74>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d12c      	bne.n	800af88 <USBD_SetAddress+0x74>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	885b      	ldrh	r3, [r3, #2]
 800af32:	2b7f      	cmp	r3, #127	; 0x7f
 800af34:	d828      	bhi.n	800af88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	885b      	ldrh	r3, [r3, #2]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d104      	bne.n	800af56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f98b 	bl	800b26a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af54:	e01d      	b.n	800af92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7bfa      	ldrb	r2, [r7, #15]
 800af5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 feaa 	bl	800bcbc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa46 	bl	800b3fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d004      	beq.n	800af7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7c:	e009      	b.n	800af92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af86:	e004      	b.n	800af92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f96d 	bl	800b26a <USBD_CtlError>
  }
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	4b41      	ldr	r3, [pc, #260]	; (800b0b4 <USBD_SetConfig+0x118>)
 800afae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afb0:	4b40      	ldr	r3, [pc, #256]	; (800b0b4 <USBD_SetConfig+0x118>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d904      	bls.n	800afc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f955 	bl	800b26a <USBD_CtlError>
 800afc0:	e075      	b.n	800b0ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d002      	beq.n	800afd2 <USBD_SetConfig+0x36>
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d023      	beq.n	800b018 <USBD_SetConfig+0x7c>
 800afd0:	e062      	b.n	800b098 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800afd2:	4b38      	ldr	r3, [pc, #224]	; (800b0b4 <USBD_SetConfig+0x118>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d01a      	beq.n	800b010 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800afda:	4b36      	ldr	r3, [pc, #216]	; (800b0b4 <USBD_SetConfig+0x118>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2203      	movs	r2, #3
 800afe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afec:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <USBD_SetConfig+0x118>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff f9e7 	bl	800a3c6 <USBD_SetClassConfig>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b02      	cmp	r3, #2
 800affc:	d104      	bne.n	800b008 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f932 	bl	800b26a <USBD_CtlError>
            return;
 800b006:	e052      	b.n	800b0ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9f6 	bl	800b3fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b00e:	e04e      	b.n	800b0ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f9f2 	bl	800b3fa <USBD_CtlSendStatus>
        break;
 800b016:	e04a      	b.n	800b0ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b018:	4b26      	ldr	r3, [pc, #152]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d112      	bne.n	800b046 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b028:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	461a      	mov	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b032:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff f9e3 	bl	800a404 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f9db 	bl	800b3fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b044:	e033      	b.n	800b0ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b046:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d01d      	beq.n	800b090 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff f9d1 	bl	800a404 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b06c:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff f9a7 	bl	800a3c6 <USBD_SetClassConfig>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d104      	bne.n	800b088 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f8f2 	bl	800b26a <USBD_CtlError>
            return;
 800b086:	e012      	b.n	800b0ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f9b6 	bl	800b3fa <USBD_CtlSendStatus>
        break;
 800b08e:	e00e      	b.n	800b0ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f9b2 	bl	800b3fa <USBD_CtlSendStatus>
        break;
 800b096:	e00a      	b.n	800b0ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f8e5 	bl	800b26a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <USBD_SetConfig+0x118>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7ff f9ac 	bl	800a404 <USBD_ClrClassConfig>
        break;
 800b0ac:	bf00      	nop
    }
  }
}
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20000884 	.word	0x20000884

0800b0b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	88db      	ldrh	r3, [r3, #6]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d004      	beq.n	800b0d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f8cc 	bl	800b26a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0d2:	e022      	b.n	800b11a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	dc02      	bgt.n	800b0e4 <USBD_GetConfig+0x2c>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dc03      	bgt.n	800b0ea <USBD_GetConfig+0x32>
 800b0e2:	e015      	b.n	800b110 <USBD_GetConfig+0x58>
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetConfig+0x48>
 800b0e8:	e012      	b.n	800b110 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f920 	bl	800b33e <USBD_CtlSendData>
        break;
 800b0fe:	e00c      	b.n	800b11a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	2201      	movs	r2, #1
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f918 	bl	800b33e <USBD_CtlSendData>
        break;
 800b10e:	e004      	b.n	800b11a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f8a9 	bl	800b26a <USBD_CtlError>
        break;
 800b118:	bf00      	nop
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b132:	3b01      	subs	r3, #1
 800b134:	2b02      	cmp	r3, #2
 800b136:	d81e      	bhi.n	800b176 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	88db      	ldrh	r3, [r3, #6]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d004      	beq.n	800b14a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f891 	bl	800b26a <USBD_CtlError>
        break;
 800b148:	e01a      	b.n	800b180 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	f043 0202 	orr.w	r2, r3, #2
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	330c      	adds	r3, #12
 800b16a:	2202      	movs	r2, #2
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f8e5 	bl	800b33e <USBD_CtlSendData>
      break;
 800b174:	e004      	b.n	800b180 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f876 	bl	800b26a <USBD_CtlError>
      break;
 800b17e:	bf00      	nop
  }
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d106      	bne.n	800b1a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f929 	bl	800b3fa <USBD_CtlSendStatus>
  }
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d80b      	bhi.n	800b1de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	885b      	ldrh	r3, [r3, #2]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d10c      	bne.n	800b1e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f90f 	bl	800b3fa <USBD_CtlSendStatus>
      }
      break;
 800b1dc:	e004      	b.n	800b1e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f842 	bl	800b26a <USBD_CtlError>
      break;
 800b1e6:	e000      	b.n	800b1ea <USBD_ClrFeature+0x3a>
      break;
 800b1e8:	bf00      	nop
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781a      	ldrb	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	785a      	ldrb	r2, [r3, #1]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	3302      	adds	r3, #2
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	b29a      	uxth	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	3303      	adds	r3, #3
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4413      	add	r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	3304      	adds	r3, #4
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b29a      	uxth	r2, r3
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	3305      	adds	r3, #5
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b29b      	uxth	r3, r3
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4413      	add	r3, r2
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	3306      	adds	r3, #6
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	3307      	adds	r3, #7
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	b29b      	uxth	r3, r3
 800b258:	4413      	add	r3, r2
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	80da      	strh	r2, [r3, #6]

}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	bc80      	pop	{r7}
 800b268:	4770      	bx	lr

0800b26a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b274:	2180      	movs	r1, #128	; 0x80
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fcb6 	bl	800bbe8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b27c:	2100      	movs	r1, #0
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fcb2 	bl	800bbe8 <USBD_LL_StallEP>
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d032      	beq.n	800b308 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 f834 	bl	800b310 <USBD_GetLen>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	75fa      	strb	r2, [r7, #23]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	75fa      	strb	r2, [r7, #23]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b2d8:	e012      	b.n	800b300 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	60fa      	str	r2, [r7, #12]
 800b2e0:	7dfa      	ldrb	r2, [r7, #23]
 800b2e2:	1c51      	adds	r1, r2, #1
 800b2e4:	75f9      	strb	r1, [r7, #23]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	440a      	add	r2, r1
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	75fa      	strb	r2, [r7, #23]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e8      	bne.n	800b2da <USBD_GetString+0x4e>
    }
  }
}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b31c:	e005      	b.n	800b32a <USBD_GetLen+0x1a>
  {
    len++;
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	3301      	adds	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3301      	adds	r3, #1
 800b328:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f5      	bne.n	800b31e <USBD_GetLen+0xe>
  }

  return len;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	bc80      	pop	{r7}
 800b33c:	4770      	bx	lr

0800b33e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	4613      	mov	r3, r2
 800b34a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2202      	movs	r2, #2
 800b350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b354:	88fa      	ldrh	r2, [r7, #6]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b35a:	88fa      	ldrh	r2, [r7, #6]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	2100      	movs	r1, #0
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fcc7 	bl	800bcfa <USBD_LL_Transmit>

  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b084      	sub	sp, #16
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	4613      	mov	r3, r2
 800b382:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b384:	88fb      	ldrh	r3, [r7, #6]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	2100      	movs	r1, #0
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fcb5 	bl	800bcfa <USBD_LL_Transmit>

  return USBD_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	60f8      	str	r0, [r7, #12]
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3b0:	88fa      	ldrh	r2, [r7, #6]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b3b8:	88fa      	ldrh	r2, [r7, #6]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 fcba 	bl	800bd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3e4:	88fb      	ldrh	r3, [r7, #6]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 fca8 	bl	800bd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2204      	movs	r2, #4
 800b406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b40a:	2300      	movs	r3, #0
 800b40c:	2200      	movs	r2, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fc72 	bl	800bcfa <USBD_LL_Transmit>

  return USBD_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2205      	movs	r2, #5
 800b42c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b430:	2300      	movs	r3, #0
 800b432:	2200      	movs	r2, #0
 800b434:	2100      	movs	r1, #0
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fc82 	bl	800bd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b44c:	2200      	movs	r2, #0
 800b44e:	4912      	ldr	r1, [pc, #72]	; (800b498 <MX_USB_DEVICE_Init+0x50>)
 800b450:	4812      	ldr	r0, [pc, #72]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b452:	f7fe ff5e 	bl	800a312 <USBD_Init>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b45c:	f7f6 fa20 	bl	80018a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b460:	490f      	ldr	r1, [pc, #60]	; (800b4a0 <MX_USB_DEVICE_Init+0x58>)
 800b462:	480e      	ldr	r0, [pc, #56]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b464:	f7fe ff80 	bl	800a368 <USBD_RegisterClass>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b46e:	f7f6 fa17 	bl	80018a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b472:	490c      	ldr	r1, [pc, #48]	; (800b4a4 <MX_USB_DEVICE_Init+0x5c>)
 800b474:	4809      	ldr	r0, [pc, #36]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b476:	f7fe feb1 	bl	800a1dc <USBD_CDC_RegisterInterface>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b480:	f7f6 fa0e 	bl	80018a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <MX_USB_DEVICE_Init+0x54>)
 800b486:	f7fe ff88 	bl	800a39a <USBD_Start>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b490:	f7f6 fa06 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b494:	bf00      	nop
 800b496:	bd80      	pop	{r7, pc}
 800b498:	2000012c 	.word	0x2000012c
 800b49c:	20000888 	.word	0x20000888
 800b4a0:	20000018 	.word	0x20000018
 800b4a4:	2000011c 	.word	0x2000011c

0800b4a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4905      	ldr	r1, [pc, #20]	; (800b4c4 <CDC_Init_FS+0x1c>)
 800b4b0:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <CDC_Init_FS+0x20>)
 800b4b2:	f7fe fea9 	bl	800a208 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4b6:	4905      	ldr	r1, [pc, #20]	; (800b4cc <CDC_Init_FS+0x24>)
 800b4b8:	4803      	ldr	r0, [pc, #12]	; (800b4c8 <CDC_Init_FS+0x20>)
 800b4ba:	f7fe febe 	bl	800a23a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20000fa8 	.word	0x20000fa8
 800b4c8:	20000888 	.word	0x20000888
 800b4cc:	20000bc0 	.word	0x20000bc0

0800b4d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bc80      	pop	{r7}
 800b4dc:	4770      	bx	lr
	...

0800b4e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	6039      	str	r1, [r7, #0]
 800b4ea:	71fb      	strb	r3, [r7, #7]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	2b23      	cmp	r3, #35	; 0x23
 800b4f4:	f200 808c 	bhi.w	800b610 <CDC_Control_FS+0x130>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <CDC_Control_FS+0x20>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b611 	.word	0x0800b611
 800b504:	0800b611 	.word	0x0800b611
 800b508:	0800b611 	.word	0x0800b611
 800b50c:	0800b611 	.word	0x0800b611
 800b510:	0800b611 	.word	0x0800b611
 800b514:	0800b611 	.word	0x0800b611
 800b518:	0800b611 	.word	0x0800b611
 800b51c:	0800b611 	.word	0x0800b611
 800b520:	0800b611 	.word	0x0800b611
 800b524:	0800b611 	.word	0x0800b611
 800b528:	0800b611 	.word	0x0800b611
 800b52c:	0800b611 	.word	0x0800b611
 800b530:	0800b611 	.word	0x0800b611
 800b534:	0800b611 	.word	0x0800b611
 800b538:	0800b611 	.word	0x0800b611
 800b53c:	0800b611 	.word	0x0800b611
 800b540:	0800b611 	.word	0x0800b611
 800b544:	0800b611 	.word	0x0800b611
 800b548:	0800b611 	.word	0x0800b611
 800b54c:	0800b611 	.word	0x0800b611
 800b550:	0800b611 	.word	0x0800b611
 800b554:	0800b611 	.word	0x0800b611
 800b558:	0800b611 	.word	0x0800b611
 800b55c:	0800b611 	.word	0x0800b611
 800b560:	0800b611 	.word	0x0800b611
 800b564:	0800b611 	.word	0x0800b611
 800b568:	0800b611 	.word	0x0800b611
 800b56c:	0800b611 	.word	0x0800b611
 800b570:	0800b611 	.word	0x0800b611
 800b574:	0800b611 	.word	0x0800b611
 800b578:	0800b611 	.word	0x0800b611
 800b57c:	0800b611 	.word	0x0800b611
 800b580:	0800b591 	.word	0x0800b591
 800b584:	0800b5cb 	.word	0x0800b5cb
 800b588:	0800b611 	.word	0x0800b611
 800b58c:	0800b611 	.word	0x0800b611
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0]=pbuf[0];
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781a      	ldrb	r2, [r3, #0]
 800b594:	4b22      	ldr	r3, [pc, #136]	; (800b620 <CDC_Control_FS+0x140>)
 800b596:	701a      	strb	r2, [r3, #0]
    	buf[1]=pbuf[1];
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	785a      	ldrb	r2, [r3, #1]
 800b59c:	4b20      	ldr	r3, [pc, #128]	; (800b620 <CDC_Control_FS+0x140>)
 800b59e:	705a      	strb	r2, [r3, #1]
    	buf[2]=pbuf[2];
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	789a      	ldrb	r2, [r3, #2]
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <CDC_Control_FS+0x140>)
 800b5a6:	709a      	strb	r2, [r3, #2]
    	buf[3]=pbuf[3];
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	78da      	ldrb	r2, [r3, #3]
 800b5ac:	4b1c      	ldr	r3, [pc, #112]	; (800b620 <CDC_Control_FS+0x140>)
 800b5ae:	70da      	strb	r2, [r3, #3]
    	buf[4]=pbuf[4];
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	791a      	ldrb	r2, [r3, #4]
 800b5b4:	4b1a      	ldr	r3, [pc, #104]	; (800b620 <CDC_Control_FS+0x140>)
 800b5b6:	711a      	strb	r2, [r3, #4]
    	buf[5]=pbuf[5];
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	795a      	ldrb	r2, [r3, #5]
 800b5bc:	4b18      	ldr	r3, [pc, #96]	; (800b620 <CDC_Control_FS+0x140>)
 800b5be:	715a      	strb	r2, [r3, #5]
    	buf[6]=pbuf[6];
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	799a      	ldrb	r2, [r3, #6]
 800b5c4:	4b16      	ldr	r3, [pc, #88]	; (800b620 <CDC_Control_FS+0x140>)
 800b5c6:	719a      	strb	r2, [r3, #6]
    break;
 800b5c8:	e023      	b.n	800b612 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buf[0];
 800b5ca:	4b15      	ldr	r3, [pc, #84]	; (800b620 <CDC_Control_FS+0x140>)
 800b5cc:	781a      	ldrb	r2, [r3, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buf[1];
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a12      	ldr	r2, [pc, #72]	; (800b620 <CDC_Control_FS+0x140>)
 800b5d8:	7852      	ldrb	r2, [r2, #1]
 800b5da:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buf[2];
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	3302      	adds	r3, #2
 800b5e0:	4a0f      	ldr	r2, [pc, #60]	; (800b620 <CDC_Control_FS+0x140>)
 800b5e2:	7892      	ldrb	r2, [r2, #2]
 800b5e4:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buf[3];
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	4a0d      	ldr	r2, [pc, #52]	; (800b620 <CDC_Control_FS+0x140>)
 800b5ec:	78d2      	ldrb	r2, [r2, #3]
 800b5ee:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buf[4];
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4a0a      	ldr	r2, [pc, #40]	; (800b620 <CDC_Control_FS+0x140>)
 800b5f6:	7912      	ldrb	r2, [r2, #4]
 800b5f8:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buf[5];
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	3305      	adds	r3, #5
 800b5fe:	4a08      	ldr	r2, [pc, #32]	; (800b620 <CDC_Control_FS+0x140>)
 800b600:	7952      	ldrb	r2, [r2, #5]
 800b602:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buf[6];
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	3306      	adds	r3, #6
 800b608:	4a05      	ldr	r2, [pc, #20]	; (800b620 <CDC_Control_FS+0x140>)
 800b60a:	7992      	ldrb	r2, [r2, #6]
 800b60c:	701a      	strb	r2, [r3, #0]
    break;
 800b60e:	e000      	b.n	800b612 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b610:	bf00      	nop
  }

  return (USBD_OK);
 800b612:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000b4c 	.word	0x20000b4c

0800b624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4619      	mov	r1, r3
 800b632:	4811      	ldr	r0, [pc, #68]	; (800b678 <CDC_Receive_FS+0x54>)
 800b634:	f7fe fe01 	bl	800a23a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b638:	480f      	ldr	r0, [pc, #60]	; (800b678 <CDC_Receive_FS+0x54>)
 800b63a:	f7fe fe40 	bl	800a2be <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	81fb      	strh	r3, [r7, #14]
  rcvd_usb=len%USB_RX_MAX_LENGTH;
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <CDC_Receive_FS+0x58>)
 800b648:	fba2 1203 	umull	r1, r2, r2, r3
 800b64c:	0952      	lsrs	r2, r2, #5
 800b64e:	2164      	movs	r1, #100	; 0x64
 800b650:	fb01 f202 	mul.w	r2, r1, r2
 800b654:	1a9b      	subs	r3, r3, r2
 800b656:	b29a      	uxth	r2, r3
 800b658:	4b09      	ldr	r3, [pc, #36]	; (800b680 <CDC_Receive_FS+0x5c>)
 800b65a:	801a      	strh	r2, [r3, #0]
  memcpy(&usb_rx_buffer,&Buf,rcvd_usb);
 800b65c:	4b08      	ldr	r3, [pc, #32]	; (800b680 <CDC_Receive_FS+0x5c>)
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	1d3b      	adds	r3, r7, #4
 800b664:	4619      	mov	r1, r3
 800b666:	4807      	ldr	r0, [pc, #28]	; (800b684 <CDC_Receive_FS+0x60>)
 800b668:	f000 fc16 	bl	800be98 <memcpy>
  //CDC_Transmit_FS(Buf, len);
  return (USBD_OK);
 800b66c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20000888 	.word	0x20000888
 800b67c:	51eb851f 	.word	0x51eb851f
 800b680:	20000b54 	.word	0x20000b54
 800b684:	20000b58 	.word	0x20000b58

0800b688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	460b      	mov	r3, r1
 800b692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <CDC_Transmit_FS+0x48>)
 800b69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b69e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e00b      	b.n	800b6c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b6ae:	887b      	ldrh	r3, [r7, #2]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	4806      	ldr	r0, [pc, #24]	; (800b6d0 <CDC_Transmit_FS+0x48>)
 800b6b6:	f7fe fda7 	bl	800a208 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b6ba:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <CDC_Transmit_FS+0x48>)
 800b6bc:	f7fe fdd0 	bl	800a260 <USBD_CDC_TransmitPacket>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000888 	.word	0x20000888

0800b6d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6039      	str	r1, [r7, #0]
 800b6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	2212      	movs	r2, #18
 800b6e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bc80      	pop	{r7}
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20000148 	.word	0x20000148

0800b6f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	4603      	mov	r3, r0
 800b700:	6039      	str	r1, [r7, #0]
 800b702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2204      	movs	r2, #4
 800b708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b70a:	4b03      	ldr	r3, [pc, #12]	; (800b718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	2000015c 	.word	0x2000015c

0800b71c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d105      	bne.n	800b73a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	4907      	ldr	r1, [pc, #28]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
 800b732:	4808      	ldr	r0, [pc, #32]	; (800b754 <USBD_FS_ProductStrDescriptor+0x38>)
 800b734:	f7ff fdaa 	bl	800b28c <USBD_GetString>
 800b738:	e004      	b.n	800b744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4904      	ldr	r1, [pc, #16]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
 800b73e:	4805      	ldr	r0, [pc, #20]	; (800b754 <USBD_FS_ProductStrDescriptor+0x38>)
 800b740:	f7ff fda4 	bl	800b28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20001390 	.word	0x20001390
 800b754:	08010824 	.word	0x08010824

0800b758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	4904      	ldr	r1, [pc, #16]	; (800b778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b768:	4804      	ldr	r0, [pc, #16]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b76a:	f7ff fd8f 	bl	800b28c <USBD_GetString>
  return USBD_StrDesc;
 800b76e:	4b02      	ldr	r3, [pc, #8]	; (800b778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20001390 	.word	0x20001390
 800b77c:	0801083c 	.word	0x0801083c

0800b780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	6039      	str	r1, [r7, #0]
 800b78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	221a      	movs	r2, #26
 800b790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b792:	f000 f843 	bl	800b81c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b796:	4b02      	ldr	r3, [pc, #8]	; (800b7a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000160 	.word	0x20000160

0800b7a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d105      	bne.n	800b7c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4907      	ldr	r1, [pc, #28]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ba:	4808      	ldr	r0, [pc, #32]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7bc:	f7ff fd66 	bl	800b28c <USBD_GetString>
 800b7c0:	e004      	b.n	800b7cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4904      	ldr	r1, [pc, #16]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7c6:	4805      	ldr	r0, [pc, #20]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c8:	f7ff fd60 	bl	800b28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20001390 	.word	0x20001390
 800b7dc:	08010850 	.word	0x08010850

0800b7e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d105      	bne.n	800b7fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	4907      	ldr	r1, [pc, #28]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7f6:	4808      	ldr	r0, [pc, #32]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7f8:	f7ff fd48 	bl	800b28c <USBD_GetString>
 800b7fc:	e004      	b.n	800b808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4904      	ldr	r1, [pc, #16]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b802:	4805      	ldr	r0, [pc, #20]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b804:	f7ff fd42 	bl	800b28c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b808:	4b02      	ldr	r3, [pc, #8]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20001390 	.word	0x20001390
 800b818:	0801085c 	.word	0x0801085c

0800b81c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b822:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <Get_SerialNum+0x44>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <Get_SerialNum+0x48>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b82e:	4b0e      	ldr	r3, [pc, #56]	; (800b868 <Get_SerialNum+0x4c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4413      	add	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d009      	beq.n	800b856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b842:	2208      	movs	r2, #8
 800b844:	4909      	ldr	r1, [pc, #36]	; (800b86c <Get_SerialNum+0x50>)
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 f814 	bl	800b874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b84c:	2204      	movs	r2, #4
 800b84e:	4908      	ldr	r1, [pc, #32]	; (800b870 <Get_SerialNum+0x54>)
 800b850:	68b8      	ldr	r0, [r7, #8]
 800b852:	f000 f80f 	bl	800b874 <IntToUnicode>
  }
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	1ffff7e8 	.word	0x1ffff7e8
 800b864:	1ffff7ec 	.word	0x1ffff7ec
 800b868:	1ffff7f0 	.word	0x1ffff7f0
 800b86c:	20000162 	.word	0x20000162
 800b870:	20000172 	.word	0x20000172

0800b874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4613      	mov	r3, r2
 800b880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b886:	2300      	movs	r3, #0
 800b888:	75fb      	strb	r3, [r7, #23]
 800b88a:	e027      	b.n	800b8dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	0f1b      	lsrs	r3, r3, #28
 800b890:	2b09      	cmp	r3, #9
 800b892:	d80b      	bhi.n	800b8ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	0f1b      	lsrs	r3, r3, #28
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	4619      	mov	r1, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	440b      	add	r3, r1
 800b8a4:	3230      	adds	r2, #48	; 0x30
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e00a      	b.n	800b8c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	0f1b      	lsrs	r3, r3, #28
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	440b      	add	r3, r1
 800b8bc:	3237      	adds	r2, #55	; 0x37
 800b8be:	b2d2      	uxtb	r2, r2
 800b8c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	75fb      	strb	r3, [r7, #23]
 800b8dc:	7dfa      	ldrb	r2, [r7, #23]
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d3d3      	bcc.n	800b88c <IntToUnicode+0x18>
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr

0800b8f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a0d      	ldr	r2, [pc, #52]	; (800b934 <HAL_PCD_MspInit+0x44>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d113      	bne.n	800b92a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b902:	4b0d      	ldr	r3, [pc, #52]	; (800b938 <HAL_PCD_MspInit+0x48>)
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	4a0c      	ldr	r2, [pc, #48]	; (800b938 <HAL_PCD_MspInit+0x48>)
 800b908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b90c:	61d3      	str	r3, [r2, #28]
 800b90e:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <HAL_PCD_MspInit+0x48>)
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b91a:	2200      	movs	r2, #0
 800b91c:	2100      	movs	r1, #0
 800b91e:	2014      	movs	r0, #20
 800b920:	f7f7 fa1d 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b924:	2014      	movs	r0, #20
 800b926:	f7f7 fa36 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	40005c00 	.word	0x40005c00
 800b938:	40021000 	.word	0x40021000

0800b93c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fe fd69 	bl	800a42a <USBD_LL_SetupStage>
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b972:	78fa      	ldrb	r2, [r7, #3]
 800b974:	6879      	ldr	r1, [r7, #4]
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	440b      	add	r3, r1
 800b980:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	78fb      	ldrb	r3, [r7, #3]
 800b988:	4619      	mov	r1, r3
 800b98a:	f7fe fd9b 	bl	800a4c4 <USBD_LL_DataOutStage>
}
 800b98e:	bf00      	nop
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b082      	sub	sp, #8
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b9a8:	78fa      	ldrb	r2, [r7, #3]
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	440b      	add	r3, r1
 800b9b6:	333c      	adds	r3, #60	; 0x3c
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f7fe fdf2 	bl	800a5a6 <USBD_LL_DataInStage>
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe ff02 	bl	800a7e2 <USBD_LL_SOF>
}
 800b9de:	bf00      	nop
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d001      	beq.n	800b9fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9fa:	f7f5 ff51 	bl	80018a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba04:	7bfa      	ldrb	r2, [r7, #15]
 800ba06:	4611      	mov	r1, r2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe feb2 	bl	800a772 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fe6b 	bl	800a6f0 <USBD_LL_Reset>
}
 800ba1a:	bf00      	nop
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe feac 	bl	800a790 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <HAL_PCD_SuspendCallback+0x30>)
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	4a03      	ldr	r2, [pc, #12]	; (800ba54 <HAL_PCD_SuspendCallback+0x30>)
 800ba46:	f043 0306 	orr.w	r3, r3, #6
 800ba4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	e000ed00 	.word	0xe000ed00

0800ba58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fe fea6 	bl	800a7b8 <USBD_LL_Resume>
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ba7c:	4a28      	ldr	r2, [pc, #160]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a26      	ldr	r2, [pc, #152]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ba8c:	4b24      	ldr	r3, [pc, #144]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba8e:	4a25      	ldr	r2, [pc, #148]	; (800bb24 <USBD_LL_Init+0xb0>)
 800ba90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba92:	4b23      	ldr	r3, [pc, #140]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba94:	2208      	movs	r2, #8
 800ba96:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba98:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba9e:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <USBD_LL_Init+0xac>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800baa4:	4b1e      	ldr	r3, [pc, #120]	; (800bb20 <USBD_LL_Init+0xac>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800baaa:	4b1d      	ldr	r3, [pc, #116]	; (800bb20 <USBD_LL_Init+0xac>)
 800baac:	2200      	movs	r2, #0
 800baae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bab0:	481b      	ldr	r0, [pc, #108]	; (800bb20 <USBD_LL_Init+0xac>)
 800bab2:	f7f8 fd21 	bl	80044f8 <HAL_PCD_Init>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800babc:	f7f5 fef0 	bl	80018a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bac6:	2318      	movs	r3, #24
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	f7fa f995 	bl	8005dfa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bad6:	2358      	movs	r3, #88	; 0x58
 800bad8:	2200      	movs	r2, #0
 800bada:	2180      	movs	r1, #128	; 0x80
 800badc:	f7fa f98d 	bl	8005dfa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bae6:	23c0      	movs	r3, #192	; 0xc0
 800bae8:	2200      	movs	r2, #0
 800baea:	2181      	movs	r1, #129	; 0x81
 800baec:	f7fa f985 	bl	8005dfa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baf6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bafa:	2200      	movs	r2, #0
 800bafc:	2101      	movs	r1, #1
 800bafe:	f7fa f97c 	bl	8005dfa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2182      	movs	r1, #130	; 0x82
 800bb10:	f7fa f973 	bl	8005dfa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20001590 	.word	0x20001590
 800bb24:	40005c00 	.word	0x40005c00

0800bb28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f8 fde5 	bl	800470e <HAL_PCD_Start>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f94e 	bl	800bdec <USBD_Get_USB_Status>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	4608      	mov	r0, r1
 800bb68:	4611      	mov	r1, r2
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	70fb      	strb	r3, [r7, #3]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70bb      	strb	r3, [r7, #2]
 800bb74:	4613      	mov	r3, r2
 800bb76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb86:	78bb      	ldrb	r3, [r7, #2]
 800bb88:	883a      	ldrh	r2, [r7, #0]
 800bb8a:	78f9      	ldrb	r1, [r7, #3]
 800bb8c:	f7f8 ff5d 	bl	8004a4a <HAL_PCD_EP_Open>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f928 	bl	800bdec <USBD_Get_USB_Status>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7f8 ffa4 	bl	8004b16 <HAL_PCD_EP_Close>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 f909 	bl	800bdec <USBD_Get_USB_Status>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc02:	78fa      	ldrb	r2, [r7, #3]
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7f9 f864 	bl	8004cd4 <HAL_PCD_EP_SetStall>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f8ea 	bl	800bdec <USBD_Get_USB_Status>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	460b      	mov	r3, r1
 800bc30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f9 f8a5 	bl	8004d94 <HAL_PCD_EP_ClrStall>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 f8cb 	bl	800bdec <USBD_Get_USB_Status>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	da0c      	bge.n	800bc9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	1c5a      	adds	r2, r3, #1
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	440b      	add	r3, r1
 800bc94:	3302      	adds	r3, #2
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	e00b      	b.n	800bcb2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc9a:	78fb      	ldrb	r3, [r7, #3]
 800bc9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bca0:	68f9      	ldr	r1, [r7, #12]
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	440b      	add	r3, r1
 800bcac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bcb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bc80      	pop	{r7}
 800bcba:	4770      	bx	lr

0800bcbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f8 fe90 	bl	8004a00 <HAL_PCD_SetAddress>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 f880 	bl	800bdec <USBD_Get_USB_Status>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	461a      	mov	r2, r3
 800bd06:	460b      	mov	r3, r1
 800bd08:	72fb      	strb	r3, [r7, #11]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd1c:	893b      	ldrh	r3, [r7, #8]
 800bd1e:	7af9      	ldrb	r1, [r7, #11]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	f7f8 ff94 	bl	8004c4e <HAL_PCD_EP_Transmit>
 800bd26:	4603      	mov	r3, r0
 800bd28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 f85d 	bl	800bdec <USBD_Get_USB_Status>
 800bd32:	4603      	mov	r3, r0
 800bd34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd36:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	607a      	str	r2, [r7, #4]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	72fb      	strb	r3, [r7, #11]
 800bd50:	4613      	mov	r3, r2
 800bd52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd62:	893b      	ldrh	r3, [r7, #8]
 800bd64:	7af9      	ldrb	r1, [r7, #11]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	f7f8 ff1d 	bl	8004ba6 <HAL_PCD_EP_Receive>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 f83a 	bl	800bdec <USBD_Get_USB_Status>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7f8 ff3f 	bl	8004c20 <HAL_PCD_EP_GetRxCount>
 800bda2:	4603      	mov	r3, r0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <USBD_static_malloc+0x14>)
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bc80      	pop	{r7}
 800bdbe:	4770      	bx	lr
 800bdc0:	2000187c 	.word	0x2000187c

0800bdc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]

}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bc80      	pop	{r7}
 800bdd4:	4770      	bx	lr

0800bdd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr

0800bdec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d817      	bhi.n	800be30 <USBD_Get_USB_Status+0x44>
 800be00:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <USBD_Get_USB_Status+0x1c>)
 800be02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be06:	bf00      	nop
 800be08:	0800be19 	.word	0x0800be19
 800be0c:	0800be1f 	.word	0x0800be1f
 800be10:	0800be25 	.word	0x0800be25
 800be14:	0800be2b 	.word	0x0800be2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	e00b      	b.n	800be36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be1e:	2302      	movs	r3, #2
 800be20:	73fb      	strb	r3, [r7, #15]
    break;
 800be22:	e008      	b.n	800be36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be24:	2301      	movs	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
    break;
 800be28:	e005      	b.n	800be36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be2a:	2302      	movs	r3, #2
 800be2c:	73fb      	strb	r3, [r7, #15]
    break;
 800be2e:	e002      	b.n	800be36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be30:	2302      	movs	r3, #2
 800be32:	73fb      	strb	r3, [r7, #15]
    break;
 800be34:	bf00      	nop
  }
  return usb_status;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bc80      	pop	{r7}
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop

0800be44 <__errno>:
 800be44:	4b01      	ldr	r3, [pc, #4]	; (800be4c <__errno+0x8>)
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	2000017c 	.word	0x2000017c

0800be50 <__libc_init_array>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	2600      	movs	r6, #0
 800be54:	4d0c      	ldr	r5, [pc, #48]	; (800be88 <__libc_init_array+0x38>)
 800be56:	4c0d      	ldr	r4, [pc, #52]	; (800be8c <__libc_init_array+0x3c>)
 800be58:	1b64      	subs	r4, r4, r5
 800be5a:	10a4      	asrs	r4, r4, #2
 800be5c:	42a6      	cmp	r6, r4
 800be5e:	d109      	bne.n	800be74 <__libc_init_array+0x24>
 800be60:	f004 fc86 	bl	8010770 <_init>
 800be64:	2600      	movs	r6, #0
 800be66:	4d0a      	ldr	r5, [pc, #40]	; (800be90 <__libc_init_array+0x40>)
 800be68:	4c0a      	ldr	r4, [pc, #40]	; (800be94 <__libc_init_array+0x44>)
 800be6a:	1b64      	subs	r4, r4, r5
 800be6c:	10a4      	asrs	r4, r4, #2
 800be6e:	42a6      	cmp	r6, r4
 800be70:	d105      	bne.n	800be7e <__libc_init_array+0x2e>
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	f855 3b04 	ldr.w	r3, [r5], #4
 800be78:	4798      	blx	r3
 800be7a:	3601      	adds	r6, #1
 800be7c:	e7ee      	b.n	800be5c <__libc_init_array+0xc>
 800be7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be82:	4798      	blx	r3
 800be84:	3601      	adds	r6, #1
 800be86:	e7f2      	b.n	800be6e <__libc_init_array+0x1e>
 800be88:	08010d2c 	.word	0x08010d2c
 800be8c:	08010d2c 	.word	0x08010d2c
 800be90:	08010d2c 	.word	0x08010d2c
 800be94:	08010d30 	.word	0x08010d30

0800be98 <memcpy>:
 800be98:	440a      	add	r2, r1
 800be9a:	4291      	cmp	r1, r2
 800be9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bea0:	d100      	bne.n	800bea4 <memcpy+0xc>
 800bea2:	4770      	bx	lr
 800bea4:	b510      	push	{r4, lr}
 800bea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beaa:	4291      	cmp	r1, r2
 800beac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beb0:	d1f9      	bne.n	800bea6 <memcpy+0xe>
 800beb2:	bd10      	pop	{r4, pc}

0800beb4 <memset>:
 800beb4:	4603      	mov	r3, r0
 800beb6:	4402      	add	r2, r0
 800beb8:	4293      	cmp	r3, r2
 800beba:	d100      	bne.n	800bebe <memset+0xa>
 800bebc:	4770      	bx	lr
 800bebe:	f803 1b01 	strb.w	r1, [r3], #1
 800bec2:	e7f9      	b.n	800beb8 <memset+0x4>

0800bec4 <__cvt>:
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beca:	461f      	mov	r7, r3
 800becc:	bfbb      	ittet	lt
 800bece:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bed2:	461f      	movlt	r7, r3
 800bed4:	2300      	movge	r3, #0
 800bed6:	232d      	movlt	r3, #45	; 0x2d
 800bed8:	b088      	sub	sp, #32
 800beda:	4614      	mov	r4, r2
 800bedc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bede:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bee0:	7013      	strb	r3, [r2, #0]
 800bee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bee4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bee8:	f023 0820 	bic.w	r8, r3, #32
 800beec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bef0:	d005      	beq.n	800befe <__cvt+0x3a>
 800bef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bef6:	d100      	bne.n	800befa <__cvt+0x36>
 800bef8:	3501      	adds	r5, #1
 800befa:	2302      	movs	r3, #2
 800befc:	e000      	b.n	800bf00 <__cvt+0x3c>
 800befe:	2303      	movs	r3, #3
 800bf00:	aa07      	add	r2, sp, #28
 800bf02:	9204      	str	r2, [sp, #16]
 800bf04:	aa06      	add	r2, sp, #24
 800bf06:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bf0a:	e9cd 3500 	strd	r3, r5, [sp]
 800bf0e:	4622      	mov	r2, r4
 800bf10:	463b      	mov	r3, r7
 800bf12:	f001 fdb9 	bl	800da88 <_dtoa_r>
 800bf16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	d102      	bne.n	800bf24 <__cvt+0x60>
 800bf1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf20:	07db      	lsls	r3, r3, #31
 800bf22:	d522      	bpl.n	800bf6a <__cvt+0xa6>
 800bf24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf28:	eb06 0905 	add.w	r9, r6, r5
 800bf2c:	d110      	bne.n	800bf50 <__cvt+0x8c>
 800bf2e:	7833      	ldrb	r3, [r6, #0]
 800bf30:	2b30      	cmp	r3, #48	; 0x30
 800bf32:	d10a      	bne.n	800bf4a <__cvt+0x86>
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 800bf40:	b918      	cbnz	r0, 800bf4a <__cvt+0x86>
 800bf42:	f1c5 0501 	rsb	r5, r5, #1
 800bf46:	f8ca 5000 	str.w	r5, [sl]
 800bf4a:	f8da 3000 	ldr.w	r3, [sl]
 800bf4e:	4499      	add	r9, r3
 800bf50:	2200      	movs	r2, #0
 800bf52:	2300      	movs	r3, #0
 800bf54:	4620      	mov	r0, r4
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 fd26 	bl	80009a8 <__aeabi_dcmpeq>
 800bf5c:	b108      	cbz	r0, 800bf62 <__cvt+0x9e>
 800bf5e:	f8cd 901c 	str.w	r9, [sp, #28]
 800bf62:	2230      	movs	r2, #48	; 0x30
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	454b      	cmp	r3, r9
 800bf68:	d307      	bcc.n	800bf7a <__cvt+0xb6>
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	9b07      	ldr	r3, [sp, #28]
 800bf6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf70:	1b9b      	subs	r3, r3, r6
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	b008      	add	sp, #32
 800bf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7a:	1c59      	adds	r1, r3, #1
 800bf7c:	9107      	str	r1, [sp, #28]
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e7f0      	b.n	800bf64 <__cvt+0xa0>

0800bf82 <__exponent>:
 800bf82:	4603      	mov	r3, r0
 800bf84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf86:	2900      	cmp	r1, #0
 800bf88:	f803 2b02 	strb.w	r2, [r3], #2
 800bf8c:	bfb6      	itet	lt
 800bf8e:	222d      	movlt	r2, #45	; 0x2d
 800bf90:	222b      	movge	r2, #43	; 0x2b
 800bf92:	4249      	neglt	r1, r1
 800bf94:	2909      	cmp	r1, #9
 800bf96:	7042      	strb	r2, [r0, #1]
 800bf98:	dd2b      	ble.n	800bff2 <__exponent+0x70>
 800bf9a:	f10d 0407 	add.w	r4, sp, #7
 800bf9e:	46a4      	mov	ip, r4
 800bfa0:	270a      	movs	r7, #10
 800bfa2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bfa6:	460a      	mov	r2, r1
 800bfa8:	46a6      	mov	lr, r4
 800bfaa:	fb07 1516 	mls	r5, r7, r6, r1
 800bfae:	2a63      	cmp	r2, #99	; 0x63
 800bfb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bfba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bfbe:	dcf0      	bgt.n	800bfa2 <__exponent+0x20>
 800bfc0:	3130      	adds	r1, #48	; 0x30
 800bfc2:	f1ae 0502 	sub.w	r5, lr, #2
 800bfc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bfca:	4629      	mov	r1, r5
 800bfcc:	1c44      	adds	r4, r0, #1
 800bfce:	4561      	cmp	r1, ip
 800bfd0:	d30a      	bcc.n	800bfe8 <__exponent+0x66>
 800bfd2:	f10d 0209 	add.w	r2, sp, #9
 800bfd6:	eba2 020e 	sub.w	r2, r2, lr
 800bfda:	4565      	cmp	r5, ip
 800bfdc:	bf88      	it	hi
 800bfde:	2200      	movhi	r2, #0
 800bfe0:	4413      	add	r3, r2
 800bfe2:	1a18      	subs	r0, r3, r0
 800bfe4:	b003      	add	sp, #12
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfec:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bff0:	e7ed      	b.n	800bfce <__exponent+0x4c>
 800bff2:	2330      	movs	r3, #48	; 0x30
 800bff4:	3130      	adds	r1, #48	; 0x30
 800bff6:	7083      	strb	r3, [r0, #2]
 800bff8:	70c1      	strb	r1, [r0, #3]
 800bffa:	1d03      	adds	r3, r0, #4
 800bffc:	e7f1      	b.n	800bfe2 <__exponent+0x60>
	...

0800c000 <_printf_float>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	b091      	sub	sp, #68	; 0x44
 800c006:	460c      	mov	r4, r1
 800c008:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c00c:	4616      	mov	r6, r2
 800c00e:	461f      	mov	r7, r3
 800c010:	4605      	mov	r5, r0
 800c012:	f002 fe8d 	bl	800ed30 <_localeconv_r>
 800c016:	6803      	ldr	r3, [r0, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	9309      	str	r3, [sp, #36]	; 0x24
 800c01c:	f7f4 f898 	bl	8000150 <strlen>
 800c020:	2300      	movs	r3, #0
 800c022:	930e      	str	r3, [sp, #56]	; 0x38
 800c024:	f8d8 3000 	ldr.w	r3, [r8]
 800c028:	900a      	str	r0, [sp, #40]	; 0x28
 800c02a:	3307      	adds	r3, #7
 800c02c:	f023 0307 	bic.w	r3, r3, #7
 800c030:	f103 0208 	add.w	r2, r3, #8
 800c034:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c038:	f8d4 b000 	ldr.w	fp, [r4]
 800c03c:	f8c8 2000 	str.w	r2, [r8]
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c048:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c04c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c050:	930b      	str	r3, [sp, #44]	; 0x2c
 800c052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c056:	4640      	mov	r0, r8
 800c058:	4b9c      	ldr	r3, [pc, #624]	; (800c2cc <_printf_float+0x2cc>)
 800c05a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c05c:	f7f4 fcd6 	bl	8000a0c <__aeabi_dcmpun>
 800c060:	bb70      	cbnz	r0, 800c0c0 <_printf_float+0xc0>
 800c062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c066:	4640      	mov	r0, r8
 800c068:	4b98      	ldr	r3, [pc, #608]	; (800c2cc <_printf_float+0x2cc>)
 800c06a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06c:	f7f4 fcb0 	bl	80009d0 <__aeabi_dcmple>
 800c070:	bb30      	cbnz	r0, 800c0c0 <_printf_float+0xc0>
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	4640      	mov	r0, r8
 800c078:	4651      	mov	r1, sl
 800c07a:	f7f4 fc9f 	bl	80009bc <__aeabi_dcmplt>
 800c07e:	b110      	cbz	r0, 800c086 <_printf_float+0x86>
 800c080:	232d      	movs	r3, #45	; 0x2d
 800c082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c086:	4b92      	ldr	r3, [pc, #584]	; (800c2d0 <_printf_float+0x2d0>)
 800c088:	4892      	ldr	r0, [pc, #584]	; (800c2d4 <_printf_float+0x2d4>)
 800c08a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c08e:	bf94      	ite	ls
 800c090:	4698      	movls	r8, r3
 800c092:	4680      	movhi	r8, r0
 800c094:	2303      	movs	r3, #3
 800c096:	f04f 0a00 	mov.w	sl, #0
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	f02b 0304 	bic.w	r3, fp, #4
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	4633      	mov	r3, r6
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	9700      	str	r7, [sp, #0]
 800c0aa:	aa0f      	add	r2, sp, #60	; 0x3c
 800c0ac:	f000 f9d4 	bl	800c458 <_printf_common>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	f040 8090 	bne.w	800c1d6 <_printf_float+0x1d6>
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0ba:	b011      	add	sp, #68	; 0x44
 800c0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	4653      	mov	r3, sl
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	4651      	mov	r1, sl
 800c0c8:	f7f4 fca0 	bl	8000a0c <__aeabi_dcmpun>
 800c0cc:	b148      	cbz	r0, 800c0e2 <_printf_float+0xe2>
 800c0ce:	f1ba 0f00 	cmp.w	sl, #0
 800c0d2:	bfb8      	it	lt
 800c0d4:	232d      	movlt	r3, #45	; 0x2d
 800c0d6:	4880      	ldr	r0, [pc, #512]	; (800c2d8 <_printf_float+0x2d8>)
 800c0d8:	bfb8      	it	lt
 800c0da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0de:	4b7f      	ldr	r3, [pc, #508]	; (800c2dc <_printf_float+0x2dc>)
 800c0e0:	e7d3      	b.n	800c08a <_printf_float+0x8a>
 800c0e2:	6863      	ldr	r3, [r4, #4]
 800c0e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	d142      	bne.n	800c172 <_printf_float+0x172>
 800c0ec:	2306      	movs	r3, #6
 800c0ee:	6063      	str	r3, [r4, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	9206      	str	r2, [sp, #24]
 800c0f4:	aa0e      	add	r2, sp, #56	; 0x38
 800c0f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c0fa:	aa0d      	add	r2, sp, #52	; 0x34
 800c0fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c100:	9203      	str	r2, [sp, #12]
 800c102:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c106:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	4642      	mov	r2, r8
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	4628      	mov	r0, r5
 800c114:	4653      	mov	r3, sl
 800c116:	910b      	str	r1, [sp, #44]	; 0x2c
 800c118:	f7ff fed4 	bl	800bec4 <__cvt>
 800c11c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c11e:	4680      	mov	r8, r0
 800c120:	2947      	cmp	r1, #71	; 0x47
 800c122:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c124:	d108      	bne.n	800c138 <_printf_float+0x138>
 800c126:	1cc8      	adds	r0, r1, #3
 800c128:	db02      	blt.n	800c130 <_printf_float+0x130>
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	4299      	cmp	r1, r3
 800c12e:	dd40      	ble.n	800c1b2 <_printf_float+0x1b2>
 800c130:	f1a9 0902 	sub.w	r9, r9, #2
 800c134:	fa5f f989 	uxtb.w	r9, r9
 800c138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c13c:	d81f      	bhi.n	800c17e <_printf_float+0x17e>
 800c13e:	464a      	mov	r2, r9
 800c140:	3901      	subs	r1, #1
 800c142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c146:	910d      	str	r1, [sp, #52]	; 0x34
 800c148:	f7ff ff1b 	bl	800bf82 <__exponent>
 800c14c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c14e:	4682      	mov	sl, r0
 800c150:	1813      	adds	r3, r2, r0
 800c152:	2a01      	cmp	r2, #1
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	dc02      	bgt.n	800c15e <_printf_float+0x15e>
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	07d2      	lsls	r2, r2, #31
 800c15c:	d501      	bpl.n	800c162 <_printf_float+0x162>
 800c15e:	3301      	adds	r3, #1
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c166:	2b00      	cmp	r3, #0
 800c168:	d09b      	beq.n	800c0a2 <_printf_float+0xa2>
 800c16a:	232d      	movs	r3, #45	; 0x2d
 800c16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c170:	e797      	b.n	800c0a2 <_printf_float+0xa2>
 800c172:	2947      	cmp	r1, #71	; 0x47
 800c174:	d1bc      	bne.n	800c0f0 <_printf_float+0xf0>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1ba      	bne.n	800c0f0 <_printf_float+0xf0>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e7b7      	b.n	800c0ee <_printf_float+0xee>
 800c17e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c182:	d118      	bne.n	800c1b6 <_printf_float+0x1b6>
 800c184:	2900      	cmp	r1, #0
 800c186:	6863      	ldr	r3, [r4, #4]
 800c188:	dd0b      	ble.n	800c1a2 <_printf_float+0x1a2>
 800c18a:	6121      	str	r1, [r4, #16]
 800c18c:	b913      	cbnz	r3, 800c194 <_printf_float+0x194>
 800c18e:	6822      	ldr	r2, [r4, #0]
 800c190:	07d0      	lsls	r0, r2, #31
 800c192:	d502      	bpl.n	800c19a <_printf_float+0x19a>
 800c194:	3301      	adds	r3, #1
 800c196:	440b      	add	r3, r1
 800c198:	6123      	str	r3, [r4, #16]
 800c19a:	f04f 0a00 	mov.w	sl, #0
 800c19e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c1a0:	e7df      	b.n	800c162 <_printf_float+0x162>
 800c1a2:	b913      	cbnz	r3, 800c1aa <_printf_float+0x1aa>
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	07d2      	lsls	r2, r2, #31
 800c1a8:	d501      	bpl.n	800c1ae <_printf_float+0x1ae>
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	e7f4      	b.n	800c198 <_printf_float+0x198>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e7f2      	b.n	800c198 <_printf_float+0x198>
 800c1b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1b8:	4299      	cmp	r1, r3
 800c1ba:	db05      	blt.n	800c1c8 <_printf_float+0x1c8>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	6121      	str	r1, [r4, #16]
 800c1c0:	07d8      	lsls	r0, r3, #31
 800c1c2:	d5ea      	bpl.n	800c19a <_printf_float+0x19a>
 800c1c4:	1c4b      	adds	r3, r1, #1
 800c1c6:	e7e7      	b.n	800c198 <_printf_float+0x198>
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	bfcc      	ite	gt
 800c1cc:	2201      	movgt	r2, #1
 800c1ce:	f1c1 0202 	rsble	r2, r1, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	e7e0      	b.n	800c198 <_printf_float+0x198>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	055a      	lsls	r2, r3, #21
 800c1da:	d407      	bmi.n	800c1ec <_printf_float+0x1ec>
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	4642      	mov	r2, r8
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	47b8      	blx	r7
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	d12b      	bne.n	800c242 <_printf_float+0x242>
 800c1ea:	e764      	b.n	800c0b6 <_printf_float+0xb6>
 800c1ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c1f0:	f240 80dd 	bls.w	800c3ae <_printf_float+0x3ae>
 800c1f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f7f4 fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 800c200:	2800      	cmp	r0, #0
 800c202:	d033      	beq.n	800c26c <_printf_float+0x26c>
 800c204:	2301      	movs	r3, #1
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	4a35      	ldr	r2, [pc, #212]	; (800c2e0 <_printf_float+0x2e0>)
 800c20c:	47b8      	blx	r7
 800c20e:	3001      	adds	r0, #1
 800c210:	f43f af51 	beq.w	800c0b6 <_printf_float+0xb6>
 800c214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c218:	429a      	cmp	r2, r3
 800c21a:	db02      	blt.n	800c222 <_printf_float+0x222>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	07d8      	lsls	r0, r3, #31
 800c220:	d50f      	bpl.n	800c242 <_printf_float+0x242>
 800c222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c226:	4631      	mov	r1, r6
 800c228:	4628      	mov	r0, r5
 800c22a:	47b8      	blx	r7
 800c22c:	3001      	adds	r0, #1
 800c22e:	f43f af42 	beq.w	800c0b6 <_printf_float+0xb6>
 800c232:	f04f 0800 	mov.w	r8, #0
 800c236:	f104 091a 	add.w	r9, r4, #26
 800c23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c23c:	3b01      	subs	r3, #1
 800c23e:	4543      	cmp	r3, r8
 800c240:	dc09      	bgt.n	800c256 <_printf_float+0x256>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	079b      	lsls	r3, r3, #30
 800c246:	f100 8102 	bmi.w	800c44e <_printf_float+0x44e>
 800c24a:	68e0      	ldr	r0, [r4, #12]
 800c24c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c24e:	4298      	cmp	r0, r3
 800c250:	bfb8      	it	lt
 800c252:	4618      	movlt	r0, r3
 800c254:	e731      	b.n	800c0ba <_printf_float+0xba>
 800c256:	2301      	movs	r3, #1
 800c258:	464a      	mov	r2, r9
 800c25a:	4631      	mov	r1, r6
 800c25c:	4628      	mov	r0, r5
 800c25e:	47b8      	blx	r7
 800c260:	3001      	adds	r0, #1
 800c262:	f43f af28 	beq.w	800c0b6 <_printf_float+0xb6>
 800c266:	f108 0801 	add.w	r8, r8, #1
 800c26a:	e7e6      	b.n	800c23a <_printf_float+0x23a>
 800c26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dc38      	bgt.n	800c2e4 <_printf_float+0x2e4>
 800c272:	2301      	movs	r3, #1
 800c274:	4631      	mov	r1, r6
 800c276:	4628      	mov	r0, r5
 800c278:	4a19      	ldr	r2, [pc, #100]	; (800c2e0 <_printf_float+0x2e0>)
 800c27a:	47b8      	blx	r7
 800c27c:	3001      	adds	r0, #1
 800c27e:	f43f af1a 	beq.w	800c0b6 <_printf_float+0xb6>
 800c282:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c286:	4313      	orrs	r3, r2
 800c288:	d102      	bne.n	800c290 <_printf_float+0x290>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	07d9      	lsls	r1, r3, #31
 800c28e:	d5d8      	bpl.n	800c242 <_printf_float+0x242>
 800c290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c294:	4631      	mov	r1, r6
 800c296:	4628      	mov	r0, r5
 800c298:	47b8      	blx	r7
 800c29a:	3001      	adds	r0, #1
 800c29c:	f43f af0b 	beq.w	800c0b6 <_printf_float+0xb6>
 800c2a0:	f04f 0900 	mov.w	r9, #0
 800c2a4:	f104 0a1a 	add.w	sl, r4, #26
 800c2a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2aa:	425b      	negs	r3, r3
 800c2ac:	454b      	cmp	r3, r9
 800c2ae:	dc01      	bgt.n	800c2b4 <_printf_float+0x2b4>
 800c2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2b2:	e794      	b.n	800c1de <_printf_float+0x1de>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	4652      	mov	r2, sl
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	47b8      	blx	r7
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f43f aef9 	beq.w	800c0b6 <_printf_float+0xb6>
 800c2c4:	f109 0901 	add.w	r9, r9, #1
 800c2c8:	e7ee      	b.n	800c2a8 <_printf_float+0x2a8>
 800c2ca:	bf00      	nop
 800c2cc:	7fefffff 	.word	0x7fefffff
 800c2d0:	08010888 	.word	0x08010888
 800c2d4:	0801088c 	.word	0x0801088c
 800c2d8:	08010894 	.word	0x08010894
 800c2dc:	08010890 	.word	0x08010890
 800c2e0:	08010898 	.word	0x08010898
 800c2e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	bfa8      	it	ge
 800c2ec:	461a      	movge	r2, r3
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	4691      	mov	r9, r2
 800c2f2:	dc37      	bgt.n	800c364 <_printf_float+0x364>
 800c2f4:	f04f 0b00 	mov.w	fp, #0
 800c2f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2fc:	f104 021a 	add.w	r2, r4, #26
 800c300:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c304:	ebaa 0309 	sub.w	r3, sl, r9
 800c308:	455b      	cmp	r3, fp
 800c30a:	dc33      	bgt.n	800c374 <_printf_float+0x374>
 800c30c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c310:	429a      	cmp	r2, r3
 800c312:	db3b      	blt.n	800c38c <_printf_float+0x38c>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	07da      	lsls	r2, r3, #31
 800c318:	d438      	bmi.n	800c38c <_printf_float+0x38c>
 800c31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c31c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c31e:	eba3 020a 	sub.w	r2, r3, sl
 800c322:	eba3 0901 	sub.w	r9, r3, r1
 800c326:	4591      	cmp	r9, r2
 800c328:	bfa8      	it	ge
 800c32a:	4691      	movge	r9, r2
 800c32c:	f1b9 0f00 	cmp.w	r9, #0
 800c330:	dc34      	bgt.n	800c39c <_printf_float+0x39c>
 800c332:	f04f 0800 	mov.w	r8, #0
 800c336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c33a:	f104 0a1a 	add.w	sl, r4, #26
 800c33e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c342:	1a9b      	subs	r3, r3, r2
 800c344:	eba3 0309 	sub.w	r3, r3, r9
 800c348:	4543      	cmp	r3, r8
 800c34a:	f77f af7a 	ble.w	800c242 <_printf_float+0x242>
 800c34e:	2301      	movs	r3, #1
 800c350:	4652      	mov	r2, sl
 800c352:	4631      	mov	r1, r6
 800c354:	4628      	mov	r0, r5
 800c356:	47b8      	blx	r7
 800c358:	3001      	adds	r0, #1
 800c35a:	f43f aeac 	beq.w	800c0b6 <_printf_float+0xb6>
 800c35e:	f108 0801 	add.w	r8, r8, #1
 800c362:	e7ec      	b.n	800c33e <_printf_float+0x33e>
 800c364:	4613      	mov	r3, r2
 800c366:	4631      	mov	r1, r6
 800c368:	4642      	mov	r2, r8
 800c36a:	4628      	mov	r0, r5
 800c36c:	47b8      	blx	r7
 800c36e:	3001      	adds	r0, #1
 800c370:	d1c0      	bne.n	800c2f4 <_printf_float+0x2f4>
 800c372:	e6a0      	b.n	800c0b6 <_printf_float+0xb6>
 800c374:	2301      	movs	r3, #1
 800c376:	4631      	mov	r1, r6
 800c378:	4628      	mov	r0, r5
 800c37a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c37c:	47b8      	blx	r7
 800c37e:	3001      	adds	r0, #1
 800c380:	f43f ae99 	beq.w	800c0b6 <_printf_float+0xb6>
 800c384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c386:	f10b 0b01 	add.w	fp, fp, #1
 800c38a:	e7b9      	b.n	800c300 <_printf_float+0x300>
 800c38c:	4631      	mov	r1, r6
 800c38e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c392:	4628      	mov	r0, r5
 800c394:	47b8      	blx	r7
 800c396:	3001      	adds	r0, #1
 800c398:	d1bf      	bne.n	800c31a <_printf_float+0x31a>
 800c39a:	e68c      	b.n	800c0b6 <_printf_float+0xb6>
 800c39c:	464b      	mov	r3, r9
 800c39e:	4631      	mov	r1, r6
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	eb08 020a 	add.w	r2, r8, sl
 800c3a6:	47b8      	blx	r7
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	d1c2      	bne.n	800c332 <_printf_float+0x332>
 800c3ac:	e683      	b.n	800c0b6 <_printf_float+0xb6>
 800c3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3b0:	2a01      	cmp	r2, #1
 800c3b2:	dc01      	bgt.n	800c3b8 <_printf_float+0x3b8>
 800c3b4:	07db      	lsls	r3, r3, #31
 800c3b6:	d537      	bpl.n	800c428 <_printf_float+0x428>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f ae77 	beq.w	800c0b6 <_printf_float+0xb6>
 800c3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	47b8      	blx	r7
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f43f ae6f 	beq.w	800c0b6 <_printf_float+0xb6>
 800c3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f7f4 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 800c3e4:	b9d8      	cbnz	r0, 800c41e <_printf_float+0x41e>
 800c3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e8:	f108 0201 	add.w	r2, r8, #1
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d10e      	bne.n	800c416 <_printf_float+0x416>
 800c3f8:	e65d      	b.n	800c0b6 <_printf_float+0xb6>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f ae56 	beq.w	800c0b6 <_printf_float+0xb6>
 800c40a:	f108 0801 	add.w	r8, r8, #1
 800c40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c410:	3b01      	subs	r3, #1
 800c412:	4543      	cmp	r3, r8
 800c414:	dcf1      	bgt.n	800c3fa <_printf_float+0x3fa>
 800c416:	4653      	mov	r3, sl
 800c418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c41c:	e6e0      	b.n	800c1e0 <_printf_float+0x1e0>
 800c41e:	f04f 0800 	mov.w	r8, #0
 800c422:	f104 091a 	add.w	r9, r4, #26
 800c426:	e7f2      	b.n	800c40e <_printf_float+0x40e>
 800c428:	2301      	movs	r3, #1
 800c42a:	4642      	mov	r2, r8
 800c42c:	e7df      	b.n	800c3ee <_printf_float+0x3ee>
 800c42e:	2301      	movs	r3, #1
 800c430:	464a      	mov	r2, r9
 800c432:	4631      	mov	r1, r6
 800c434:	4628      	mov	r0, r5
 800c436:	47b8      	blx	r7
 800c438:	3001      	adds	r0, #1
 800c43a:	f43f ae3c 	beq.w	800c0b6 <_printf_float+0xb6>
 800c43e:	f108 0801 	add.w	r8, r8, #1
 800c442:	68e3      	ldr	r3, [r4, #12]
 800c444:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c446:	1a5b      	subs	r3, r3, r1
 800c448:	4543      	cmp	r3, r8
 800c44a:	dcf0      	bgt.n	800c42e <_printf_float+0x42e>
 800c44c:	e6fd      	b.n	800c24a <_printf_float+0x24a>
 800c44e:	f04f 0800 	mov.w	r8, #0
 800c452:	f104 0919 	add.w	r9, r4, #25
 800c456:	e7f4      	b.n	800c442 <_printf_float+0x442>

0800c458 <_printf_common>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	4616      	mov	r6, r2
 800c45e:	4699      	mov	r9, r3
 800c460:	688a      	ldr	r2, [r1, #8]
 800c462:	690b      	ldr	r3, [r1, #16]
 800c464:	4607      	mov	r7, r0
 800c466:	4293      	cmp	r3, r2
 800c468:	bfb8      	it	lt
 800c46a:	4613      	movlt	r3, r2
 800c46c:	6033      	str	r3, [r6, #0]
 800c46e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c472:	460c      	mov	r4, r1
 800c474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c478:	b10a      	cbz	r2, 800c47e <_printf_common+0x26>
 800c47a:	3301      	adds	r3, #1
 800c47c:	6033      	str	r3, [r6, #0]
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	0699      	lsls	r1, r3, #26
 800c482:	bf42      	ittt	mi
 800c484:	6833      	ldrmi	r3, [r6, #0]
 800c486:	3302      	addmi	r3, #2
 800c488:	6033      	strmi	r3, [r6, #0]
 800c48a:	6825      	ldr	r5, [r4, #0]
 800c48c:	f015 0506 	ands.w	r5, r5, #6
 800c490:	d106      	bne.n	800c4a0 <_printf_common+0x48>
 800c492:	f104 0a19 	add.w	sl, r4, #25
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	6832      	ldr	r2, [r6, #0]
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	dc28      	bgt.n	800c4f2 <_printf_common+0x9a>
 800c4a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4a4:	1e13      	subs	r3, r2, #0
 800c4a6:	6822      	ldr	r2, [r4, #0]
 800c4a8:	bf18      	it	ne
 800c4aa:	2301      	movne	r3, #1
 800c4ac:	0692      	lsls	r2, r2, #26
 800c4ae:	d42d      	bmi.n	800c50c <_printf_common+0xb4>
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4b8:	47c0      	blx	r8
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d020      	beq.n	800c500 <_printf_common+0xa8>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	68e5      	ldr	r5, [r4, #12]
 800c4c2:	f003 0306 	and.w	r3, r3, #6
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	bf18      	it	ne
 800c4ca:	2500      	movne	r5, #0
 800c4cc:	6832      	ldr	r2, [r6, #0]
 800c4ce:	f04f 0600 	mov.w	r6, #0
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	bf08      	it	eq
 800c4d6:	1aad      	subeq	r5, r5, r2
 800c4d8:	6922      	ldr	r2, [r4, #16]
 800c4da:	bf08      	it	eq
 800c4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	bfc4      	itt	gt
 800c4e4:	1a9b      	subgt	r3, r3, r2
 800c4e6:	18ed      	addgt	r5, r5, r3
 800c4e8:	341a      	adds	r4, #26
 800c4ea:	42b5      	cmp	r5, r6
 800c4ec:	d11a      	bne.n	800c524 <_printf_common+0xcc>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e008      	b.n	800c504 <_printf_common+0xac>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	4652      	mov	r2, sl
 800c4f6:	4649      	mov	r1, r9
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	47c0      	blx	r8
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d103      	bne.n	800c508 <_printf_common+0xb0>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c508:	3501      	adds	r5, #1
 800c50a:	e7c4      	b.n	800c496 <_printf_common+0x3e>
 800c50c:	2030      	movs	r0, #48	; 0x30
 800c50e:	18e1      	adds	r1, r4, r3
 800c510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c51a:	4422      	add	r2, r4
 800c51c:	3302      	adds	r3, #2
 800c51e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c522:	e7c5      	b.n	800c4b0 <_printf_common+0x58>
 800c524:	2301      	movs	r3, #1
 800c526:	4622      	mov	r2, r4
 800c528:	4649      	mov	r1, r9
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c0      	blx	r8
 800c52e:	3001      	adds	r0, #1
 800c530:	d0e6      	beq.n	800c500 <_printf_common+0xa8>
 800c532:	3601      	adds	r6, #1
 800c534:	e7d9      	b.n	800c4ea <_printf_common+0x92>
	...

0800c538 <_printf_i>:
 800c538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c53c:	7e0f      	ldrb	r7, [r1, #24]
 800c53e:	4691      	mov	r9, r2
 800c540:	2f78      	cmp	r7, #120	; 0x78
 800c542:	4680      	mov	r8, r0
 800c544:	460c      	mov	r4, r1
 800c546:	469a      	mov	sl, r3
 800c548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c54a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c54e:	d807      	bhi.n	800c560 <_printf_i+0x28>
 800c550:	2f62      	cmp	r7, #98	; 0x62
 800c552:	d80a      	bhi.n	800c56a <_printf_i+0x32>
 800c554:	2f00      	cmp	r7, #0
 800c556:	f000 80d9 	beq.w	800c70c <_printf_i+0x1d4>
 800c55a:	2f58      	cmp	r7, #88	; 0x58
 800c55c:	f000 80a4 	beq.w	800c6a8 <_printf_i+0x170>
 800c560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c568:	e03a      	b.n	800c5e0 <_printf_i+0xa8>
 800c56a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c56e:	2b15      	cmp	r3, #21
 800c570:	d8f6      	bhi.n	800c560 <_printf_i+0x28>
 800c572:	a101      	add	r1, pc, #4	; (adr r1, 800c578 <_printf_i+0x40>)
 800c574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c578:	0800c5d1 	.word	0x0800c5d1
 800c57c:	0800c5e5 	.word	0x0800c5e5
 800c580:	0800c561 	.word	0x0800c561
 800c584:	0800c561 	.word	0x0800c561
 800c588:	0800c561 	.word	0x0800c561
 800c58c:	0800c561 	.word	0x0800c561
 800c590:	0800c5e5 	.word	0x0800c5e5
 800c594:	0800c561 	.word	0x0800c561
 800c598:	0800c561 	.word	0x0800c561
 800c59c:	0800c561 	.word	0x0800c561
 800c5a0:	0800c561 	.word	0x0800c561
 800c5a4:	0800c6f3 	.word	0x0800c6f3
 800c5a8:	0800c615 	.word	0x0800c615
 800c5ac:	0800c6d5 	.word	0x0800c6d5
 800c5b0:	0800c561 	.word	0x0800c561
 800c5b4:	0800c561 	.word	0x0800c561
 800c5b8:	0800c715 	.word	0x0800c715
 800c5bc:	0800c561 	.word	0x0800c561
 800c5c0:	0800c615 	.word	0x0800c615
 800c5c4:	0800c561 	.word	0x0800c561
 800c5c8:	0800c561 	.word	0x0800c561
 800c5cc:	0800c6dd 	.word	0x0800c6dd
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	1d1a      	adds	r2, r3, #4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	602a      	str	r2, [r5, #0]
 800c5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e0a4      	b.n	800c72e <_printf_i+0x1f6>
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	6829      	ldr	r1, [r5, #0]
 800c5e8:	0606      	lsls	r6, r0, #24
 800c5ea:	f101 0304 	add.w	r3, r1, #4
 800c5ee:	d50a      	bpl.n	800c606 <_printf_i+0xce>
 800c5f0:	680e      	ldr	r6, [r1, #0]
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	2e00      	cmp	r6, #0
 800c5f6:	da03      	bge.n	800c600 <_printf_i+0xc8>
 800c5f8:	232d      	movs	r3, #45	; 0x2d
 800c5fa:	4276      	negs	r6, r6
 800c5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c600:	230a      	movs	r3, #10
 800c602:	485e      	ldr	r0, [pc, #376]	; (800c77c <_printf_i+0x244>)
 800c604:	e019      	b.n	800c63a <_printf_i+0x102>
 800c606:	680e      	ldr	r6, [r1, #0]
 800c608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	bf18      	it	ne
 800c610:	b236      	sxthne	r6, r6
 800c612:	e7ef      	b.n	800c5f4 <_printf_i+0xbc>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	1d19      	adds	r1, r3, #4
 800c61a:	6029      	str	r1, [r5, #0]
 800c61c:	0601      	lsls	r1, r0, #24
 800c61e:	d501      	bpl.n	800c624 <_printf_i+0xec>
 800c620:	681e      	ldr	r6, [r3, #0]
 800c622:	e002      	b.n	800c62a <_printf_i+0xf2>
 800c624:	0646      	lsls	r6, r0, #25
 800c626:	d5fb      	bpl.n	800c620 <_printf_i+0xe8>
 800c628:	881e      	ldrh	r6, [r3, #0]
 800c62a:	2f6f      	cmp	r7, #111	; 0x6f
 800c62c:	bf0c      	ite	eq
 800c62e:	2308      	moveq	r3, #8
 800c630:	230a      	movne	r3, #10
 800c632:	4852      	ldr	r0, [pc, #328]	; (800c77c <_printf_i+0x244>)
 800c634:	2100      	movs	r1, #0
 800c636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c63a:	6865      	ldr	r5, [r4, #4]
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	bfa8      	it	ge
 800c640:	6821      	ldrge	r1, [r4, #0]
 800c642:	60a5      	str	r5, [r4, #8]
 800c644:	bfa4      	itt	ge
 800c646:	f021 0104 	bicge.w	r1, r1, #4
 800c64a:	6021      	strge	r1, [r4, #0]
 800c64c:	b90e      	cbnz	r6, 800c652 <_printf_i+0x11a>
 800c64e:	2d00      	cmp	r5, #0
 800c650:	d04d      	beq.n	800c6ee <_printf_i+0x1b6>
 800c652:	4615      	mov	r5, r2
 800c654:	fbb6 f1f3 	udiv	r1, r6, r3
 800c658:	fb03 6711 	mls	r7, r3, r1, r6
 800c65c:	5dc7      	ldrb	r7, [r0, r7]
 800c65e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c662:	4637      	mov	r7, r6
 800c664:	42bb      	cmp	r3, r7
 800c666:	460e      	mov	r6, r1
 800c668:	d9f4      	bls.n	800c654 <_printf_i+0x11c>
 800c66a:	2b08      	cmp	r3, #8
 800c66c:	d10b      	bne.n	800c686 <_printf_i+0x14e>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	07de      	lsls	r6, r3, #31
 800c672:	d508      	bpl.n	800c686 <_printf_i+0x14e>
 800c674:	6923      	ldr	r3, [r4, #16]
 800c676:	6861      	ldr	r1, [r4, #4]
 800c678:	4299      	cmp	r1, r3
 800c67a:	bfde      	ittt	le
 800c67c:	2330      	movle	r3, #48	; 0x30
 800c67e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c682:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c686:	1b52      	subs	r2, r2, r5
 800c688:	6122      	str	r2, [r4, #16]
 800c68a:	464b      	mov	r3, r9
 800c68c:	4621      	mov	r1, r4
 800c68e:	4640      	mov	r0, r8
 800c690:	f8cd a000 	str.w	sl, [sp]
 800c694:	aa03      	add	r2, sp, #12
 800c696:	f7ff fedf 	bl	800c458 <_printf_common>
 800c69a:	3001      	adds	r0, #1
 800c69c:	d14c      	bne.n	800c738 <_printf_i+0x200>
 800c69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6a2:	b004      	add	sp, #16
 800c6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a8:	4834      	ldr	r0, [pc, #208]	; (800c77c <_printf_i+0x244>)
 800c6aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6ae:	6829      	ldr	r1, [r5, #0]
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6b6:	6029      	str	r1, [r5, #0]
 800c6b8:	061d      	lsls	r5, r3, #24
 800c6ba:	d514      	bpl.n	800c6e6 <_printf_i+0x1ae>
 800c6bc:	07df      	lsls	r7, r3, #31
 800c6be:	bf44      	itt	mi
 800c6c0:	f043 0320 	orrmi.w	r3, r3, #32
 800c6c4:	6023      	strmi	r3, [r4, #0]
 800c6c6:	b91e      	cbnz	r6, 800c6d0 <_printf_i+0x198>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	f023 0320 	bic.w	r3, r3, #32
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	2310      	movs	r3, #16
 800c6d2:	e7af      	b.n	800c634 <_printf_i+0xfc>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	f043 0320 	orr.w	r3, r3, #32
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	2378      	movs	r3, #120	; 0x78
 800c6de:	4828      	ldr	r0, [pc, #160]	; (800c780 <_printf_i+0x248>)
 800c6e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6e4:	e7e3      	b.n	800c6ae <_printf_i+0x176>
 800c6e6:	0659      	lsls	r1, r3, #25
 800c6e8:	bf48      	it	mi
 800c6ea:	b2b6      	uxthmi	r6, r6
 800c6ec:	e7e6      	b.n	800c6bc <_printf_i+0x184>
 800c6ee:	4615      	mov	r5, r2
 800c6f0:	e7bb      	b.n	800c66a <_printf_i+0x132>
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	6826      	ldr	r6, [r4, #0]
 800c6f6:	1d18      	adds	r0, r3, #4
 800c6f8:	6961      	ldr	r1, [r4, #20]
 800c6fa:	6028      	str	r0, [r5, #0]
 800c6fc:	0635      	lsls	r5, r6, #24
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	d501      	bpl.n	800c706 <_printf_i+0x1ce>
 800c702:	6019      	str	r1, [r3, #0]
 800c704:	e002      	b.n	800c70c <_printf_i+0x1d4>
 800c706:	0670      	lsls	r0, r6, #25
 800c708:	d5fb      	bpl.n	800c702 <_printf_i+0x1ca>
 800c70a:	8019      	strh	r1, [r3, #0]
 800c70c:	2300      	movs	r3, #0
 800c70e:	4615      	mov	r5, r2
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	e7ba      	b.n	800c68a <_printf_i+0x152>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	2100      	movs	r1, #0
 800c718:	1d1a      	adds	r2, r3, #4
 800c71a:	602a      	str	r2, [r5, #0]
 800c71c:	681d      	ldr	r5, [r3, #0]
 800c71e:	6862      	ldr	r2, [r4, #4]
 800c720:	4628      	mov	r0, r5
 800c722:	f002 fb23 	bl	800ed6c <memchr>
 800c726:	b108      	cbz	r0, 800c72c <_printf_i+0x1f4>
 800c728:	1b40      	subs	r0, r0, r5
 800c72a:	6060      	str	r0, [r4, #4]
 800c72c:	6863      	ldr	r3, [r4, #4]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	2300      	movs	r3, #0
 800c732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c736:	e7a8      	b.n	800c68a <_printf_i+0x152>
 800c738:	462a      	mov	r2, r5
 800c73a:	4649      	mov	r1, r9
 800c73c:	4640      	mov	r0, r8
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	47d0      	blx	sl
 800c742:	3001      	adds	r0, #1
 800c744:	d0ab      	beq.n	800c69e <_printf_i+0x166>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	079b      	lsls	r3, r3, #30
 800c74a:	d413      	bmi.n	800c774 <_printf_i+0x23c>
 800c74c:	68e0      	ldr	r0, [r4, #12]
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	4298      	cmp	r0, r3
 800c752:	bfb8      	it	lt
 800c754:	4618      	movlt	r0, r3
 800c756:	e7a4      	b.n	800c6a2 <_printf_i+0x16a>
 800c758:	2301      	movs	r3, #1
 800c75a:	4632      	mov	r2, r6
 800c75c:	4649      	mov	r1, r9
 800c75e:	4640      	mov	r0, r8
 800c760:	47d0      	blx	sl
 800c762:	3001      	adds	r0, #1
 800c764:	d09b      	beq.n	800c69e <_printf_i+0x166>
 800c766:	3501      	adds	r5, #1
 800c768:	68e3      	ldr	r3, [r4, #12]
 800c76a:	9903      	ldr	r1, [sp, #12]
 800c76c:	1a5b      	subs	r3, r3, r1
 800c76e:	42ab      	cmp	r3, r5
 800c770:	dcf2      	bgt.n	800c758 <_printf_i+0x220>
 800c772:	e7eb      	b.n	800c74c <_printf_i+0x214>
 800c774:	2500      	movs	r5, #0
 800c776:	f104 0619 	add.w	r6, r4, #25
 800c77a:	e7f5      	b.n	800c768 <_printf_i+0x230>
 800c77c:	0801089a 	.word	0x0801089a
 800c780:	080108ab 	.word	0x080108ab

0800c784 <_scanf_float>:
 800c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	b087      	sub	sp, #28
 800c78a:	9303      	str	r3, [sp, #12]
 800c78c:	688b      	ldr	r3, [r1, #8]
 800c78e:	4617      	mov	r7, r2
 800c790:	1e5a      	subs	r2, r3, #1
 800c792:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c796:	bf85      	ittet	hi
 800c798:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c79c:	195b      	addhi	r3, r3, r5
 800c79e:	2300      	movls	r3, #0
 800c7a0:	9302      	strhi	r3, [sp, #8]
 800c7a2:	bf88      	it	hi
 800c7a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c7a8:	468b      	mov	fp, r1
 800c7aa:	f04f 0500 	mov.w	r5, #0
 800c7ae:	bf8c      	ite	hi
 800c7b0:	608b      	strhi	r3, [r1, #8]
 800c7b2:	9302      	strls	r3, [sp, #8]
 800c7b4:	680b      	ldr	r3, [r1, #0]
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c7bc:	f84b 3b1c 	str.w	r3, [fp], #28
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	465e      	mov	r6, fp
 800c7c4:	46aa      	mov	sl, r5
 800c7c6:	46a9      	mov	r9, r5
 800c7c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c7cc:	9501      	str	r5, [sp, #4]
 800c7ce:	68a2      	ldr	r2, [r4, #8]
 800c7d0:	b152      	cbz	r2, 800c7e8 <_scanf_float+0x64>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b4e      	cmp	r3, #78	; 0x4e
 800c7d8:	d864      	bhi.n	800c8a4 <_scanf_float+0x120>
 800c7da:	2b40      	cmp	r3, #64	; 0x40
 800c7dc:	d83c      	bhi.n	800c858 <_scanf_float+0xd4>
 800c7de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c7e2:	b2c8      	uxtb	r0, r1
 800c7e4:	280e      	cmp	r0, #14
 800c7e6:	d93a      	bls.n	800c85e <_scanf_float+0xda>
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	d003      	beq.n	800c7f6 <_scanf_float+0x72>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c7fa:	f1ba 0f01 	cmp.w	sl, #1
 800c7fe:	f200 8113 	bhi.w	800ca28 <_scanf_float+0x2a4>
 800c802:	455e      	cmp	r6, fp
 800c804:	f200 8105 	bhi.w	800ca12 <_scanf_float+0x28e>
 800c808:	2501      	movs	r5, #1
 800c80a:	4628      	mov	r0, r5
 800c80c:	b007      	add	sp, #28
 800c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c812:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c816:	2a0d      	cmp	r2, #13
 800c818:	d8e6      	bhi.n	800c7e8 <_scanf_float+0x64>
 800c81a:	a101      	add	r1, pc, #4	; (adr r1, 800c820 <_scanf_float+0x9c>)
 800c81c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c820:	0800c95f 	.word	0x0800c95f
 800c824:	0800c7e9 	.word	0x0800c7e9
 800c828:	0800c7e9 	.word	0x0800c7e9
 800c82c:	0800c7e9 	.word	0x0800c7e9
 800c830:	0800c9bf 	.word	0x0800c9bf
 800c834:	0800c997 	.word	0x0800c997
 800c838:	0800c7e9 	.word	0x0800c7e9
 800c83c:	0800c7e9 	.word	0x0800c7e9
 800c840:	0800c96d 	.word	0x0800c96d
 800c844:	0800c7e9 	.word	0x0800c7e9
 800c848:	0800c7e9 	.word	0x0800c7e9
 800c84c:	0800c7e9 	.word	0x0800c7e9
 800c850:	0800c7e9 	.word	0x0800c7e9
 800c854:	0800c925 	.word	0x0800c925
 800c858:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c85c:	e7db      	b.n	800c816 <_scanf_float+0x92>
 800c85e:	290e      	cmp	r1, #14
 800c860:	d8c2      	bhi.n	800c7e8 <_scanf_float+0x64>
 800c862:	a001      	add	r0, pc, #4	; (adr r0, 800c868 <_scanf_float+0xe4>)
 800c864:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c868:	0800c917 	.word	0x0800c917
 800c86c:	0800c7e9 	.word	0x0800c7e9
 800c870:	0800c917 	.word	0x0800c917
 800c874:	0800c9ab 	.word	0x0800c9ab
 800c878:	0800c7e9 	.word	0x0800c7e9
 800c87c:	0800c8c5 	.word	0x0800c8c5
 800c880:	0800c901 	.word	0x0800c901
 800c884:	0800c901 	.word	0x0800c901
 800c888:	0800c901 	.word	0x0800c901
 800c88c:	0800c901 	.word	0x0800c901
 800c890:	0800c901 	.word	0x0800c901
 800c894:	0800c901 	.word	0x0800c901
 800c898:	0800c901 	.word	0x0800c901
 800c89c:	0800c901 	.word	0x0800c901
 800c8a0:	0800c901 	.word	0x0800c901
 800c8a4:	2b6e      	cmp	r3, #110	; 0x6e
 800c8a6:	d809      	bhi.n	800c8bc <_scanf_float+0x138>
 800c8a8:	2b60      	cmp	r3, #96	; 0x60
 800c8aa:	d8b2      	bhi.n	800c812 <_scanf_float+0x8e>
 800c8ac:	2b54      	cmp	r3, #84	; 0x54
 800c8ae:	d077      	beq.n	800c9a0 <_scanf_float+0x21c>
 800c8b0:	2b59      	cmp	r3, #89	; 0x59
 800c8b2:	d199      	bne.n	800c7e8 <_scanf_float+0x64>
 800c8b4:	2d07      	cmp	r5, #7
 800c8b6:	d197      	bne.n	800c7e8 <_scanf_float+0x64>
 800c8b8:	2508      	movs	r5, #8
 800c8ba:	e029      	b.n	800c910 <_scanf_float+0x18c>
 800c8bc:	2b74      	cmp	r3, #116	; 0x74
 800c8be:	d06f      	beq.n	800c9a0 <_scanf_float+0x21c>
 800c8c0:	2b79      	cmp	r3, #121	; 0x79
 800c8c2:	e7f6      	b.n	800c8b2 <_scanf_float+0x12e>
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	05c8      	lsls	r0, r1, #23
 800c8c8:	d51a      	bpl.n	800c900 <_scanf_float+0x17c>
 800c8ca:	9b02      	ldr	r3, [sp, #8]
 800c8cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c8d0:	6021      	str	r1, [r4, #0]
 800c8d2:	f109 0901 	add.w	r9, r9, #1
 800c8d6:	b11b      	cbz	r3, 800c8e0 <_scanf_float+0x15c>
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	3201      	adds	r2, #1
 800c8dc:	9302      	str	r3, [sp, #8]
 800c8de:	60a2      	str	r2, [r4, #8]
 800c8e0:	68a3      	ldr	r3, [r4, #8]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	60a3      	str	r3, [r4, #8]
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	6123      	str	r3, [r4, #16]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	607b      	str	r3, [r7, #4]
 800c8f4:	f340 8084 	ble.w	800ca00 <_scanf_float+0x27c>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	603b      	str	r3, [r7, #0]
 800c8fe:	e766      	b.n	800c7ce <_scanf_float+0x4a>
 800c900:	eb1a 0f05 	cmn.w	sl, r5
 800c904:	f47f af70 	bne.w	800c7e8 <_scanf_float+0x64>
 800c908:	6822      	ldr	r2, [r4, #0]
 800c90a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c90e:	6022      	str	r2, [r4, #0]
 800c910:	f806 3b01 	strb.w	r3, [r6], #1
 800c914:	e7e4      	b.n	800c8e0 <_scanf_float+0x15c>
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	0610      	lsls	r0, r2, #24
 800c91a:	f57f af65 	bpl.w	800c7e8 <_scanf_float+0x64>
 800c91e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c922:	e7f4      	b.n	800c90e <_scanf_float+0x18a>
 800c924:	f1ba 0f00 	cmp.w	sl, #0
 800c928:	d10e      	bne.n	800c948 <_scanf_float+0x1c4>
 800c92a:	f1b9 0f00 	cmp.w	r9, #0
 800c92e:	d10e      	bne.n	800c94e <_scanf_float+0x1ca>
 800c930:	6822      	ldr	r2, [r4, #0]
 800c932:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c936:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c93a:	d108      	bne.n	800c94e <_scanf_float+0x1ca>
 800c93c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c940:	f04f 0a01 	mov.w	sl, #1
 800c944:	6022      	str	r2, [r4, #0]
 800c946:	e7e3      	b.n	800c910 <_scanf_float+0x18c>
 800c948:	f1ba 0f02 	cmp.w	sl, #2
 800c94c:	d055      	beq.n	800c9fa <_scanf_float+0x276>
 800c94e:	2d01      	cmp	r5, #1
 800c950:	d002      	beq.n	800c958 <_scanf_float+0x1d4>
 800c952:	2d04      	cmp	r5, #4
 800c954:	f47f af48 	bne.w	800c7e8 <_scanf_float+0x64>
 800c958:	3501      	adds	r5, #1
 800c95a:	b2ed      	uxtb	r5, r5
 800c95c:	e7d8      	b.n	800c910 <_scanf_float+0x18c>
 800c95e:	f1ba 0f01 	cmp.w	sl, #1
 800c962:	f47f af41 	bne.w	800c7e8 <_scanf_float+0x64>
 800c966:	f04f 0a02 	mov.w	sl, #2
 800c96a:	e7d1      	b.n	800c910 <_scanf_float+0x18c>
 800c96c:	b97d      	cbnz	r5, 800c98e <_scanf_float+0x20a>
 800c96e:	f1b9 0f00 	cmp.w	r9, #0
 800c972:	f47f af3c 	bne.w	800c7ee <_scanf_float+0x6a>
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c97c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c980:	f47f af39 	bne.w	800c7f6 <_scanf_float+0x72>
 800c984:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c988:	2501      	movs	r5, #1
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	e7c0      	b.n	800c910 <_scanf_float+0x18c>
 800c98e:	2d03      	cmp	r5, #3
 800c990:	d0e2      	beq.n	800c958 <_scanf_float+0x1d4>
 800c992:	2d05      	cmp	r5, #5
 800c994:	e7de      	b.n	800c954 <_scanf_float+0x1d0>
 800c996:	2d02      	cmp	r5, #2
 800c998:	f47f af26 	bne.w	800c7e8 <_scanf_float+0x64>
 800c99c:	2503      	movs	r5, #3
 800c99e:	e7b7      	b.n	800c910 <_scanf_float+0x18c>
 800c9a0:	2d06      	cmp	r5, #6
 800c9a2:	f47f af21 	bne.w	800c7e8 <_scanf_float+0x64>
 800c9a6:	2507      	movs	r5, #7
 800c9a8:	e7b2      	b.n	800c910 <_scanf_float+0x18c>
 800c9aa:	6822      	ldr	r2, [r4, #0]
 800c9ac:	0591      	lsls	r1, r2, #22
 800c9ae:	f57f af1b 	bpl.w	800c7e8 <_scanf_float+0x64>
 800c9b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c9b6:	6022      	str	r2, [r4, #0]
 800c9b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c9bc:	e7a8      	b.n	800c910 <_scanf_float+0x18c>
 800c9be:	6822      	ldr	r2, [r4, #0]
 800c9c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c9c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c9c8:	d006      	beq.n	800c9d8 <_scanf_float+0x254>
 800c9ca:	0550      	lsls	r0, r2, #21
 800c9cc:	f57f af0c 	bpl.w	800c7e8 <_scanf_float+0x64>
 800c9d0:	f1b9 0f00 	cmp.w	r9, #0
 800c9d4:	f43f af0f 	beq.w	800c7f6 <_scanf_float+0x72>
 800c9d8:	0591      	lsls	r1, r2, #22
 800c9da:	bf58      	it	pl
 800c9dc:	9901      	ldrpl	r1, [sp, #4]
 800c9de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9e2:	bf58      	it	pl
 800c9e4:	eba9 0101 	subpl.w	r1, r9, r1
 800c9e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c9ec:	f04f 0900 	mov.w	r9, #0
 800c9f0:	bf58      	it	pl
 800c9f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c9f6:	6022      	str	r2, [r4, #0]
 800c9f8:	e78a      	b.n	800c910 <_scanf_float+0x18c>
 800c9fa:	f04f 0a03 	mov.w	sl, #3
 800c9fe:	e787      	b.n	800c910 <_scanf_float+0x18c>
 800ca00:	4639      	mov	r1, r7
 800ca02:	4640      	mov	r0, r8
 800ca04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca08:	4798      	blx	r3
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	f43f aedf 	beq.w	800c7ce <_scanf_float+0x4a>
 800ca10:	e6ea      	b.n	800c7e8 <_scanf_float+0x64>
 800ca12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca16:	463a      	mov	r2, r7
 800ca18:	4640      	mov	r0, r8
 800ca1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca1e:	4798      	blx	r3
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	6123      	str	r3, [r4, #16]
 800ca26:	e6ec      	b.n	800c802 <_scanf_float+0x7e>
 800ca28:	1e6b      	subs	r3, r5, #1
 800ca2a:	2b06      	cmp	r3, #6
 800ca2c:	d825      	bhi.n	800ca7a <_scanf_float+0x2f6>
 800ca2e:	2d02      	cmp	r5, #2
 800ca30:	d836      	bhi.n	800caa0 <_scanf_float+0x31c>
 800ca32:	455e      	cmp	r6, fp
 800ca34:	f67f aee8 	bls.w	800c808 <_scanf_float+0x84>
 800ca38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca3c:	463a      	mov	r2, r7
 800ca3e:	4640      	mov	r0, r8
 800ca40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca44:	4798      	blx	r3
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	e7f1      	b.n	800ca32 <_scanf_float+0x2ae>
 800ca4e:	9802      	ldr	r0, [sp, #8]
 800ca50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ca58:	463a      	mov	r2, r7
 800ca5a:	9002      	str	r0, [sp, #8]
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	4798      	blx	r3
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	6123      	str	r3, [r4, #16]
 800ca66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ca6a:	fa5f fa8a 	uxtb.w	sl, sl
 800ca6e:	f1ba 0f02 	cmp.w	sl, #2
 800ca72:	d1ec      	bne.n	800ca4e <_scanf_float+0x2ca>
 800ca74:	3d03      	subs	r5, #3
 800ca76:	b2ed      	uxtb	r5, r5
 800ca78:	1b76      	subs	r6, r6, r5
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	05da      	lsls	r2, r3, #23
 800ca7e:	d52f      	bpl.n	800cae0 <_scanf_float+0x35c>
 800ca80:	055b      	lsls	r3, r3, #21
 800ca82:	d510      	bpl.n	800caa6 <_scanf_float+0x322>
 800ca84:	455e      	cmp	r6, fp
 800ca86:	f67f aebf 	bls.w	800c808 <_scanf_float+0x84>
 800ca8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4640      	mov	r0, r8
 800ca92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca96:	4798      	blx	r3
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	e7f1      	b.n	800ca84 <_scanf_float+0x300>
 800caa0:	46aa      	mov	sl, r5
 800caa2:	9602      	str	r6, [sp, #8]
 800caa4:	e7df      	b.n	800ca66 <_scanf_float+0x2e2>
 800caa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	2965      	cmp	r1, #101	; 0x65
 800caae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cab2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800cab6:	6123      	str	r3, [r4, #16]
 800cab8:	d00c      	beq.n	800cad4 <_scanf_float+0x350>
 800caba:	2945      	cmp	r1, #69	; 0x45
 800cabc:	d00a      	beq.n	800cad4 <_scanf_float+0x350>
 800cabe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cac2:	463a      	mov	r2, r7
 800cac4:	4640      	mov	r0, r8
 800cac6:	4798      	blx	r3
 800cac8:	6923      	ldr	r3, [r4, #16]
 800caca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cace:	3b01      	subs	r3, #1
 800cad0:	1eb5      	subs	r5, r6, #2
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	463a      	mov	r2, r7
 800cad6:	4640      	mov	r0, r8
 800cad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cadc:	4798      	blx	r3
 800cade:	462e      	mov	r6, r5
 800cae0:	6825      	ldr	r5, [r4, #0]
 800cae2:	f015 0510 	ands.w	r5, r5, #16
 800cae6:	d155      	bne.n	800cb94 <_scanf_float+0x410>
 800cae8:	7035      	strb	r5, [r6, #0]
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800caf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caf4:	d11b      	bne.n	800cb2e <_scanf_float+0x3aa>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	454b      	cmp	r3, r9
 800cafa:	eba3 0209 	sub.w	r2, r3, r9
 800cafe:	d123      	bne.n	800cb48 <_scanf_float+0x3c4>
 800cb00:	2200      	movs	r2, #0
 800cb02:	4659      	mov	r1, fp
 800cb04:	4640      	mov	r0, r8
 800cb06:	f000 feaf 	bl	800d868 <_strtod_r>
 800cb0a:	6822      	ldr	r2, [r4, #0]
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	f012 0f02 	tst.w	r2, #2
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	d021      	beq.n	800cb5e <_scanf_float+0x3da>
 800cb1a:	1d1a      	adds	r2, r3, #4
 800cb1c:	9903      	ldr	r1, [sp, #12]
 800cb1e:	600a      	str	r2, [r1, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	e9c3 6700 	strd	r6, r7, [r3]
 800cb26:	68e3      	ldr	r3, [r4, #12]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	60e3      	str	r3, [r4, #12]
 800cb2c:	e66d      	b.n	800c80a <_scanf_float+0x86>
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d0e5      	beq.n	800cb00 <_scanf_float+0x37c>
 800cb34:	9905      	ldr	r1, [sp, #20]
 800cb36:	230a      	movs	r3, #10
 800cb38:	462a      	mov	r2, r5
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	3101      	adds	r1, #1
 800cb3e:	f000 ff15 	bl	800d96c <_strtol_r>
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	9e05      	ldr	r6, [sp, #20]
 800cb46:	1ac2      	subs	r2, r0, r3
 800cb48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cb4c:	429e      	cmp	r6, r3
 800cb4e:	bf28      	it	cs
 800cb50:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cb54:	4630      	mov	r0, r6
 800cb56:	4910      	ldr	r1, [pc, #64]	; (800cb98 <_scanf_float+0x414>)
 800cb58:	f000 f85a 	bl	800cc10 <siprintf>
 800cb5c:	e7d0      	b.n	800cb00 <_scanf_float+0x37c>
 800cb5e:	f012 0f04 	tst.w	r2, #4
 800cb62:	f103 0204 	add.w	r2, r3, #4
 800cb66:	d1d9      	bne.n	800cb1c <_scanf_float+0x398>
 800cb68:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cb6c:	f8cc 2000 	str.w	r2, [ip]
 800cb70:	f8d3 8000 	ldr.w	r8, [r3]
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	f7f3 ff48 	bl	8000a0c <__aeabi_dcmpun>
 800cb7c:	b128      	cbz	r0, 800cb8a <_scanf_float+0x406>
 800cb7e:	4807      	ldr	r0, [pc, #28]	; (800cb9c <_scanf_float+0x418>)
 800cb80:	f000 f80e 	bl	800cba0 <nanf>
 800cb84:	f8c8 0000 	str.w	r0, [r8]
 800cb88:	e7cd      	b.n	800cb26 <_scanf_float+0x3a2>
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	4639      	mov	r1, r7
 800cb8e:	f7f3 ff9b 	bl	8000ac8 <__aeabi_d2f>
 800cb92:	e7f7      	b.n	800cb84 <_scanf_float+0x400>
 800cb94:	2500      	movs	r5, #0
 800cb96:	e638      	b.n	800c80a <_scanf_float+0x86>
 800cb98:	080108bc 	.word	0x080108bc
 800cb9c:	08010cc8 	.word	0x08010cc8

0800cba0 <nanf>:
 800cba0:	4800      	ldr	r0, [pc, #0]	; (800cba4 <nanf+0x4>)
 800cba2:	4770      	bx	lr
 800cba4:	7fc00000 	.word	0x7fc00000

0800cba8 <sniprintf>:
 800cba8:	b40c      	push	{r2, r3}
 800cbaa:	b530      	push	{r4, r5, lr}
 800cbac:	4b17      	ldr	r3, [pc, #92]	; (800cc0c <sniprintf+0x64>)
 800cbae:	1e0c      	subs	r4, r1, #0
 800cbb0:	681d      	ldr	r5, [r3, #0]
 800cbb2:	b09d      	sub	sp, #116	; 0x74
 800cbb4:	da08      	bge.n	800cbc8 <sniprintf+0x20>
 800cbb6:	238b      	movs	r3, #139	; 0x8b
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbbc:	602b      	str	r3, [r5, #0]
 800cbbe:	b01d      	add	sp, #116	; 0x74
 800cbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbc4:	b002      	add	sp, #8
 800cbc6:	4770      	bx	lr
 800cbc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cbcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cbd0:	bf0c      	ite	eq
 800cbd2:	4623      	moveq	r3, r4
 800cbd4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cbd8:	9304      	str	r3, [sp, #16]
 800cbda:	9307      	str	r3, [sp, #28]
 800cbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbe0:	9002      	str	r0, [sp, #8]
 800cbe2:	9006      	str	r0, [sp, #24]
 800cbe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbe8:	4628      	mov	r0, r5
 800cbea:	ab21      	add	r3, sp, #132	; 0x84
 800cbec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cbee:	a902      	add	r1, sp, #8
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	f002 fecd 	bl	800f990 <_svfiprintf_r>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	bfbc      	itt	lt
 800cbfa:	238b      	movlt	r3, #139	; 0x8b
 800cbfc:	602b      	strlt	r3, [r5, #0]
 800cbfe:	2c00      	cmp	r4, #0
 800cc00:	d0dd      	beq.n	800cbbe <sniprintf+0x16>
 800cc02:	2200      	movs	r2, #0
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	701a      	strb	r2, [r3, #0]
 800cc08:	e7d9      	b.n	800cbbe <sniprintf+0x16>
 800cc0a:	bf00      	nop
 800cc0c:	2000017c 	.word	0x2000017c

0800cc10 <siprintf>:
 800cc10:	b40e      	push	{r1, r2, r3}
 800cc12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc16:	b500      	push	{lr}
 800cc18:	b09c      	sub	sp, #112	; 0x70
 800cc1a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc1c:	9002      	str	r0, [sp, #8]
 800cc1e:	9006      	str	r0, [sp, #24]
 800cc20:	9107      	str	r1, [sp, #28]
 800cc22:	9104      	str	r1, [sp, #16]
 800cc24:	4808      	ldr	r0, [pc, #32]	; (800cc48 <siprintf+0x38>)
 800cc26:	4909      	ldr	r1, [pc, #36]	; (800cc4c <siprintf+0x3c>)
 800cc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc2c:	9105      	str	r1, [sp, #20]
 800cc2e:	6800      	ldr	r0, [r0, #0]
 800cc30:	a902      	add	r1, sp, #8
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	f002 feac 	bl	800f990 <_svfiprintf_r>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	9b02      	ldr	r3, [sp, #8]
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	b01c      	add	sp, #112	; 0x70
 800cc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc44:	b003      	add	sp, #12
 800cc46:	4770      	bx	lr
 800cc48:	2000017c 	.word	0x2000017c
 800cc4c:	ffff0208 	.word	0xffff0208

0800cc50 <sulp>:
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	460f      	mov	r7, r1
 800cc56:	4690      	mov	r8, r2
 800cc58:	f002 fc06 	bl	800f468 <__ulp>
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	f1b8 0f00 	cmp.w	r8, #0
 800cc64:	d011      	beq.n	800cc8a <sulp+0x3a>
 800cc66:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800cc6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	dd0b      	ble.n	800cc8a <sulp+0x3a>
 800cc72:	2400      	movs	r4, #0
 800cc74:	051b      	lsls	r3, r3, #20
 800cc76:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc7e:	4622      	mov	r2, r4
 800cc80:	462b      	mov	r3, r5
 800cc82:	f7f3 fc29 	bl	80004d8 <__aeabi_dmul>
 800cc86:	4604      	mov	r4, r0
 800cc88:	460d      	mov	r5, r1
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc92:	0000      	movs	r0, r0
 800cc94:	0000      	movs	r0, r0
	...

0800cc98 <_strtod_l>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	469b      	mov	fp, r3
 800cc9e:	2300      	movs	r3, #0
 800cca0:	b09f      	sub	sp, #124	; 0x7c
 800cca2:	931a      	str	r3, [sp, #104]	; 0x68
 800cca4:	4b9e      	ldr	r3, [pc, #632]	; (800cf20 <_strtod_l+0x288>)
 800cca6:	4682      	mov	sl, r0
 800cca8:	681f      	ldr	r7, [r3, #0]
 800ccaa:	460e      	mov	r6, r1
 800ccac:	4638      	mov	r0, r7
 800ccae:	9215      	str	r2, [sp, #84]	; 0x54
 800ccb0:	f7f3 fa4e 	bl	8000150 <strlen>
 800ccb4:	f04f 0800 	mov.w	r8, #0
 800ccb8:	4604      	mov	r4, r0
 800ccba:	f04f 0900 	mov.w	r9, #0
 800ccbe:	9619      	str	r6, [sp, #100]	; 0x64
 800ccc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccc2:	781a      	ldrb	r2, [r3, #0]
 800ccc4:	2a2b      	cmp	r2, #43	; 0x2b
 800ccc6:	d04c      	beq.n	800cd62 <_strtod_l+0xca>
 800ccc8:	d83a      	bhi.n	800cd40 <_strtod_l+0xa8>
 800ccca:	2a0d      	cmp	r2, #13
 800cccc:	d833      	bhi.n	800cd36 <_strtod_l+0x9e>
 800ccce:	2a08      	cmp	r2, #8
 800ccd0:	d833      	bhi.n	800cd3a <_strtod_l+0xa2>
 800ccd2:	2a00      	cmp	r2, #0
 800ccd4:	d03d      	beq.n	800cd52 <_strtod_l+0xba>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	930a      	str	r3, [sp, #40]	; 0x28
 800ccda:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ccdc:	782b      	ldrb	r3, [r5, #0]
 800ccde:	2b30      	cmp	r3, #48	; 0x30
 800cce0:	f040 80aa 	bne.w	800ce38 <_strtod_l+0x1a0>
 800cce4:	786b      	ldrb	r3, [r5, #1]
 800cce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccea:	2b58      	cmp	r3, #88	; 0x58
 800ccec:	d166      	bne.n	800cdbc <_strtod_l+0x124>
 800ccee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	ab1a      	add	r3, sp, #104	; 0x68
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4a8a      	ldr	r2, [pc, #552]	; (800cf24 <_strtod_l+0x28c>)
 800ccfa:	f8cd b008 	str.w	fp, [sp, #8]
 800ccfe:	ab1b      	add	r3, sp, #108	; 0x6c
 800cd00:	a919      	add	r1, sp, #100	; 0x64
 800cd02:	f001 fd17 	bl	800e734 <__gethex>
 800cd06:	f010 0607 	ands.w	r6, r0, #7
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	d005      	beq.n	800cd1a <_strtod_l+0x82>
 800cd0e:	2e06      	cmp	r6, #6
 800cd10:	d129      	bne.n	800cd66 <_strtod_l+0xce>
 800cd12:	2300      	movs	r3, #0
 800cd14:	3501      	adds	r5, #1
 800cd16:	9519      	str	r5, [sp, #100]	; 0x64
 800cd18:	930a      	str	r3, [sp, #40]	; 0x28
 800cd1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f040 858a 	bne.w	800d836 <_strtod_l+0xb9e>
 800cd22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd24:	b1d3      	cbz	r3, 800cd5c <_strtod_l+0xc4>
 800cd26:	4642      	mov	r2, r8
 800cd28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4619      	mov	r1, r3
 800cd30:	b01f      	add	sp, #124	; 0x7c
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd36:	2a20      	cmp	r2, #32
 800cd38:	d1cd      	bne.n	800ccd6 <_strtod_l+0x3e>
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	9319      	str	r3, [sp, #100]	; 0x64
 800cd3e:	e7bf      	b.n	800ccc0 <_strtod_l+0x28>
 800cd40:	2a2d      	cmp	r2, #45	; 0x2d
 800cd42:	d1c8      	bne.n	800ccd6 <_strtod_l+0x3e>
 800cd44:	2201      	movs	r2, #1
 800cd46:	920a      	str	r2, [sp, #40]	; 0x28
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	9219      	str	r2, [sp, #100]	; 0x64
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1c3      	bne.n	800ccda <_strtod_l+0x42>
 800cd52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd54:	9619      	str	r6, [sp, #100]	; 0x64
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f040 856b 	bne.w	800d832 <_strtod_l+0xb9a>
 800cd5c:	4642      	mov	r2, r8
 800cd5e:	464b      	mov	r3, r9
 800cd60:	e7e4      	b.n	800cd2c <_strtod_l+0x94>
 800cd62:	2200      	movs	r2, #0
 800cd64:	e7ef      	b.n	800cd46 <_strtod_l+0xae>
 800cd66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd68:	b13a      	cbz	r2, 800cd7a <_strtod_l+0xe2>
 800cd6a:	2135      	movs	r1, #53	; 0x35
 800cd6c:	a81c      	add	r0, sp, #112	; 0x70
 800cd6e:	f002 fc7f 	bl	800f670 <__copybits>
 800cd72:	4650      	mov	r0, sl
 800cd74:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cd76:	f002 f847 	bl	800ee08 <_Bfree>
 800cd7a:	3e01      	subs	r6, #1
 800cd7c:	2e04      	cmp	r6, #4
 800cd7e:	d806      	bhi.n	800cd8e <_strtod_l+0xf6>
 800cd80:	e8df f006 	tbb	[pc, r6]
 800cd84:	1714030a 	.word	0x1714030a
 800cd88:	0a          	.byte	0x0a
 800cd89:	00          	.byte	0x00
 800cd8a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800cd8e:	0721      	lsls	r1, r4, #28
 800cd90:	d5c3      	bpl.n	800cd1a <_strtod_l+0x82>
 800cd92:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800cd96:	e7c0      	b.n	800cd1a <_strtod_l+0x82>
 800cd98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cd9a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800cd9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cda2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cda6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cdaa:	e7f0      	b.n	800cd8e <_strtod_l+0xf6>
 800cdac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800cf28 <_strtod_l+0x290>
 800cdb0:	e7ed      	b.n	800cd8e <_strtod_l+0xf6>
 800cdb2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cdb6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cdba:	e7e8      	b.n	800cd8e <_strtod_l+0xf6>
 800cdbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	9219      	str	r2, [sp, #100]	; 0x64
 800cdc2:	785b      	ldrb	r3, [r3, #1]
 800cdc4:	2b30      	cmp	r3, #48	; 0x30
 800cdc6:	d0f9      	beq.n	800cdbc <_strtod_l+0x124>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0a6      	beq.n	800cd1a <_strtod_l+0x82>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdd2:	220a      	movs	r2, #10
 800cdd4:	9308      	str	r3, [sp, #32]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	469b      	mov	fp, r3
 800cdda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cdde:	9819      	ldr	r0, [sp, #100]	; 0x64
 800cde0:	7805      	ldrb	r5, [r0, #0]
 800cde2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800cde6:	b2d9      	uxtb	r1, r3
 800cde8:	2909      	cmp	r1, #9
 800cdea:	d927      	bls.n	800ce3c <_strtod_l+0x1a4>
 800cdec:	4622      	mov	r2, r4
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f002 fee4 	bl	800fbbc <strncmp>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d033      	beq.n	800ce60 <_strtod_l+0x1c8>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	465c      	mov	r4, fp
 800cdfe:	4603      	mov	r3, r0
 800ce00:	9004      	str	r0, [sp, #16]
 800ce02:	2a65      	cmp	r2, #101	; 0x65
 800ce04:	d001      	beq.n	800ce0a <_strtod_l+0x172>
 800ce06:	2a45      	cmp	r2, #69	; 0x45
 800ce08:	d114      	bne.n	800ce34 <_strtod_l+0x19c>
 800ce0a:	b91c      	cbnz	r4, 800ce14 <_strtod_l+0x17c>
 800ce0c:	9a07      	ldr	r2, [sp, #28]
 800ce0e:	4302      	orrs	r2, r0
 800ce10:	d09f      	beq.n	800cd52 <_strtod_l+0xba>
 800ce12:	2400      	movs	r4, #0
 800ce14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ce16:	1c72      	adds	r2, r6, #1
 800ce18:	9219      	str	r2, [sp, #100]	; 0x64
 800ce1a:	7872      	ldrb	r2, [r6, #1]
 800ce1c:	2a2b      	cmp	r2, #43	; 0x2b
 800ce1e:	d079      	beq.n	800cf14 <_strtod_l+0x27c>
 800ce20:	2a2d      	cmp	r2, #45	; 0x2d
 800ce22:	f000 8083 	beq.w	800cf2c <_strtod_l+0x294>
 800ce26:	2700      	movs	r7, #0
 800ce28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce2c:	2909      	cmp	r1, #9
 800ce2e:	f240 8083 	bls.w	800cf38 <_strtod_l+0x2a0>
 800ce32:	9619      	str	r6, [sp, #100]	; 0x64
 800ce34:	2500      	movs	r5, #0
 800ce36:	e09f      	b.n	800cf78 <_strtod_l+0x2e0>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	e7c8      	b.n	800cdce <_strtod_l+0x136>
 800ce3c:	f1bb 0f08 	cmp.w	fp, #8
 800ce40:	bfd5      	itete	le
 800ce42:	9906      	ldrle	r1, [sp, #24]
 800ce44:	9905      	ldrgt	r1, [sp, #20]
 800ce46:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce4a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ce4e:	f100 0001 	add.w	r0, r0, #1
 800ce52:	bfd4      	ite	le
 800ce54:	9306      	strle	r3, [sp, #24]
 800ce56:	9305      	strgt	r3, [sp, #20]
 800ce58:	f10b 0b01 	add.w	fp, fp, #1
 800ce5c:	9019      	str	r0, [sp, #100]	; 0x64
 800ce5e:	e7be      	b.n	800cdde <_strtod_l+0x146>
 800ce60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce62:	191a      	adds	r2, r3, r4
 800ce64:	9219      	str	r2, [sp, #100]	; 0x64
 800ce66:	5d1a      	ldrb	r2, [r3, r4]
 800ce68:	f1bb 0f00 	cmp.w	fp, #0
 800ce6c:	d036      	beq.n	800cedc <_strtod_l+0x244>
 800ce6e:	465c      	mov	r4, fp
 800ce70:	9004      	str	r0, [sp, #16]
 800ce72:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce76:	2b09      	cmp	r3, #9
 800ce78:	d912      	bls.n	800cea0 <_strtod_l+0x208>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e7c1      	b.n	800ce02 <_strtod_l+0x16a>
 800ce7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce80:	3001      	adds	r0, #1
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	9219      	str	r2, [sp, #100]	; 0x64
 800ce86:	785a      	ldrb	r2, [r3, #1]
 800ce88:	2a30      	cmp	r2, #48	; 0x30
 800ce8a:	d0f8      	beq.n	800ce7e <_strtod_l+0x1e6>
 800ce8c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	f200 84d5 	bhi.w	800d840 <_strtod_l+0xba8>
 800ce96:	9004      	str	r0, [sp, #16]
 800ce98:	2000      	movs	r0, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce9e:	9308      	str	r3, [sp, #32]
 800cea0:	3a30      	subs	r2, #48	; 0x30
 800cea2:	f100 0301 	add.w	r3, r0, #1
 800cea6:	d013      	beq.n	800ced0 <_strtod_l+0x238>
 800cea8:	9904      	ldr	r1, [sp, #16]
 800ceaa:	1905      	adds	r5, r0, r4
 800ceac:	4419      	add	r1, r3
 800ceae:	9104      	str	r1, [sp, #16]
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	210a      	movs	r1, #10
 800ceb4:	42ab      	cmp	r3, r5
 800ceb6:	d113      	bne.n	800cee0 <_strtod_l+0x248>
 800ceb8:	1823      	adds	r3, r4, r0
 800ceba:	2b08      	cmp	r3, #8
 800cebc:	f104 0401 	add.w	r4, r4, #1
 800cec0:	4404      	add	r4, r0
 800cec2:	dc1b      	bgt.n	800cefc <_strtod_l+0x264>
 800cec4:	230a      	movs	r3, #10
 800cec6:	9906      	ldr	r1, [sp, #24]
 800cec8:	fb03 2301 	mla	r3, r3, r1, r2
 800cecc:	9306      	str	r3, [sp, #24]
 800cece:	2300      	movs	r3, #0
 800ced0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ced2:	4618      	mov	r0, r3
 800ced4:	1c51      	adds	r1, r2, #1
 800ced6:	9119      	str	r1, [sp, #100]	; 0x64
 800ced8:	7852      	ldrb	r2, [r2, #1]
 800ceda:	e7ca      	b.n	800ce72 <_strtod_l+0x1da>
 800cedc:	4658      	mov	r0, fp
 800cede:	e7d3      	b.n	800ce88 <_strtod_l+0x1f0>
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	dc04      	bgt.n	800ceee <_strtod_l+0x256>
 800cee4:	9f06      	ldr	r7, [sp, #24]
 800cee6:	434f      	muls	r7, r1
 800cee8:	9706      	str	r7, [sp, #24]
 800ceea:	3301      	adds	r3, #1
 800ceec:	e7e2      	b.n	800ceb4 <_strtod_l+0x21c>
 800ceee:	1c5f      	adds	r7, r3, #1
 800cef0:	2f10      	cmp	r7, #16
 800cef2:	bfde      	ittt	le
 800cef4:	9f05      	ldrle	r7, [sp, #20]
 800cef6:	434f      	mulle	r7, r1
 800cef8:	9705      	strle	r7, [sp, #20]
 800cefa:	e7f6      	b.n	800ceea <_strtod_l+0x252>
 800cefc:	2c10      	cmp	r4, #16
 800cefe:	bfdf      	itttt	le
 800cf00:	230a      	movle	r3, #10
 800cf02:	9905      	ldrle	r1, [sp, #20]
 800cf04:	fb03 2301 	mlale	r3, r3, r1, r2
 800cf08:	9305      	strle	r3, [sp, #20]
 800cf0a:	e7e0      	b.n	800cece <_strtod_l+0x236>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9304      	str	r3, [sp, #16]
 800cf10:	2301      	movs	r3, #1
 800cf12:	e77b      	b.n	800ce0c <_strtod_l+0x174>
 800cf14:	2700      	movs	r7, #0
 800cf16:	1cb2      	adds	r2, r6, #2
 800cf18:	9219      	str	r2, [sp, #100]	; 0x64
 800cf1a:	78b2      	ldrb	r2, [r6, #2]
 800cf1c:	e784      	b.n	800ce28 <_strtod_l+0x190>
 800cf1e:	bf00      	nop
 800cf20:	08010b10 	.word	0x08010b10
 800cf24:	080108c4 	.word	0x080108c4
 800cf28:	7ff00000 	.word	0x7ff00000
 800cf2c:	2701      	movs	r7, #1
 800cf2e:	e7f2      	b.n	800cf16 <_strtod_l+0x27e>
 800cf30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf32:	1c51      	adds	r1, r2, #1
 800cf34:	9119      	str	r1, [sp, #100]	; 0x64
 800cf36:	7852      	ldrb	r2, [r2, #1]
 800cf38:	2a30      	cmp	r2, #48	; 0x30
 800cf3a:	d0f9      	beq.n	800cf30 <_strtod_l+0x298>
 800cf3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf40:	2908      	cmp	r1, #8
 800cf42:	f63f af77 	bhi.w	800ce34 <_strtod_l+0x19c>
 800cf46:	f04f 0e0a 	mov.w	lr, #10
 800cf4a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800cf4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf50:	9209      	str	r2, [sp, #36]	; 0x24
 800cf52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf54:	1c51      	adds	r1, r2, #1
 800cf56:	9119      	str	r1, [sp, #100]	; 0x64
 800cf58:	7852      	ldrb	r2, [r2, #1]
 800cf5a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800cf5e:	2d09      	cmp	r5, #9
 800cf60:	d935      	bls.n	800cfce <_strtod_l+0x336>
 800cf62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cf64:	1b49      	subs	r1, r1, r5
 800cf66:	2908      	cmp	r1, #8
 800cf68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800cf6c:	dc02      	bgt.n	800cf74 <_strtod_l+0x2dc>
 800cf6e:	4565      	cmp	r5, ip
 800cf70:	bfa8      	it	ge
 800cf72:	4665      	movge	r5, ip
 800cf74:	b107      	cbz	r7, 800cf78 <_strtod_l+0x2e0>
 800cf76:	426d      	negs	r5, r5
 800cf78:	2c00      	cmp	r4, #0
 800cf7a:	d14c      	bne.n	800d016 <_strtod_l+0x37e>
 800cf7c:	9907      	ldr	r1, [sp, #28]
 800cf7e:	4301      	orrs	r1, r0
 800cf80:	f47f aecb 	bne.w	800cd1a <_strtod_l+0x82>
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f47f aee4 	bne.w	800cd52 <_strtod_l+0xba>
 800cf8a:	2a69      	cmp	r2, #105	; 0x69
 800cf8c:	d026      	beq.n	800cfdc <_strtod_l+0x344>
 800cf8e:	dc23      	bgt.n	800cfd8 <_strtod_l+0x340>
 800cf90:	2a49      	cmp	r2, #73	; 0x49
 800cf92:	d023      	beq.n	800cfdc <_strtod_l+0x344>
 800cf94:	2a4e      	cmp	r2, #78	; 0x4e
 800cf96:	f47f aedc 	bne.w	800cd52 <_strtod_l+0xba>
 800cf9a:	499d      	ldr	r1, [pc, #628]	; (800d210 <_strtod_l+0x578>)
 800cf9c:	a819      	add	r0, sp, #100	; 0x64
 800cf9e:	f001 fe17 	bl	800ebd0 <__match>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	f43f aed5 	beq.w	800cd52 <_strtod_l+0xba>
 800cfa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b28      	cmp	r3, #40	; 0x28
 800cfae:	d12c      	bne.n	800d00a <_strtod_l+0x372>
 800cfb0:	4998      	ldr	r1, [pc, #608]	; (800d214 <_strtod_l+0x57c>)
 800cfb2:	aa1c      	add	r2, sp, #112	; 0x70
 800cfb4:	a819      	add	r0, sp, #100	; 0x64
 800cfb6:	f001 fe1f 	bl	800ebf8 <__hexnan>
 800cfba:	2805      	cmp	r0, #5
 800cfbc:	d125      	bne.n	800d00a <_strtod_l+0x372>
 800cfbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800cfc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cfc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cfcc:	e6a5      	b.n	800cd1a <_strtod_l+0x82>
 800cfce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800cfd2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800cfd6:	e7bc      	b.n	800cf52 <_strtod_l+0x2ba>
 800cfd8:	2a6e      	cmp	r2, #110	; 0x6e
 800cfda:	e7dc      	b.n	800cf96 <_strtod_l+0x2fe>
 800cfdc:	498e      	ldr	r1, [pc, #568]	; (800d218 <_strtod_l+0x580>)
 800cfde:	a819      	add	r0, sp, #100	; 0x64
 800cfe0:	f001 fdf6 	bl	800ebd0 <__match>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f43f aeb4 	beq.w	800cd52 <_strtod_l+0xba>
 800cfea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfec:	498b      	ldr	r1, [pc, #556]	; (800d21c <_strtod_l+0x584>)
 800cfee:	3b01      	subs	r3, #1
 800cff0:	a819      	add	r0, sp, #100	; 0x64
 800cff2:	9319      	str	r3, [sp, #100]	; 0x64
 800cff4:	f001 fdec 	bl	800ebd0 <__match>
 800cff8:	b910      	cbnz	r0, 800d000 <_strtod_l+0x368>
 800cffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cffc:	3301      	adds	r3, #1
 800cffe:	9319      	str	r3, [sp, #100]	; 0x64
 800d000:	f04f 0800 	mov.w	r8, #0
 800d004:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800d220 <_strtod_l+0x588>
 800d008:	e687      	b.n	800cd1a <_strtod_l+0x82>
 800d00a:	4886      	ldr	r0, [pc, #536]	; (800d224 <_strtod_l+0x58c>)
 800d00c:	f002 fdc0 	bl	800fb90 <nan>
 800d010:	4680      	mov	r8, r0
 800d012:	4689      	mov	r9, r1
 800d014:	e681      	b.n	800cd1a <_strtod_l+0x82>
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	f1bb 0f00 	cmp.w	fp, #0
 800d01c:	bf08      	it	eq
 800d01e:	46a3      	moveq	fp, r4
 800d020:	1aeb      	subs	r3, r5, r3
 800d022:	2c10      	cmp	r4, #16
 800d024:	9806      	ldr	r0, [sp, #24]
 800d026:	4626      	mov	r6, r4
 800d028:	9307      	str	r3, [sp, #28]
 800d02a:	bfa8      	it	ge
 800d02c:	2610      	movge	r6, #16
 800d02e:	f7f3 f9d9 	bl	80003e4 <__aeabi_ui2d>
 800d032:	2c09      	cmp	r4, #9
 800d034:	4680      	mov	r8, r0
 800d036:	4689      	mov	r9, r1
 800d038:	dd13      	ble.n	800d062 <_strtod_l+0x3ca>
 800d03a:	4b7b      	ldr	r3, [pc, #492]	; (800d228 <_strtod_l+0x590>)
 800d03c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d040:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d044:	f7f3 fa48 	bl	80004d8 <__aeabi_dmul>
 800d048:	4680      	mov	r8, r0
 800d04a:	9805      	ldr	r0, [sp, #20]
 800d04c:	4689      	mov	r9, r1
 800d04e:	f7f3 f9c9 	bl	80003e4 <__aeabi_ui2d>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 f887 	bl	800016c <__adddf3>
 800d05e:	4680      	mov	r8, r0
 800d060:	4689      	mov	r9, r1
 800d062:	2c0f      	cmp	r4, #15
 800d064:	dc36      	bgt.n	800d0d4 <_strtod_l+0x43c>
 800d066:	9b07      	ldr	r3, [sp, #28]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f43f ae56 	beq.w	800cd1a <_strtod_l+0x82>
 800d06e:	dd22      	ble.n	800d0b6 <_strtod_l+0x41e>
 800d070:	2b16      	cmp	r3, #22
 800d072:	dc09      	bgt.n	800d088 <_strtod_l+0x3f0>
 800d074:	496c      	ldr	r1, [pc, #432]	; (800d228 <_strtod_l+0x590>)
 800d076:	4642      	mov	r2, r8
 800d078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d07c:	464b      	mov	r3, r9
 800d07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d082:	f7f3 fa29 	bl	80004d8 <__aeabi_dmul>
 800d086:	e7c3      	b.n	800d010 <_strtod_l+0x378>
 800d088:	9a07      	ldr	r2, [sp, #28]
 800d08a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d08e:	4293      	cmp	r3, r2
 800d090:	db20      	blt.n	800d0d4 <_strtod_l+0x43c>
 800d092:	4d65      	ldr	r5, [pc, #404]	; (800d228 <_strtod_l+0x590>)
 800d094:	f1c4 040f 	rsb	r4, r4, #15
 800d098:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d09c:	4642      	mov	r2, r8
 800d09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a2:	464b      	mov	r3, r9
 800d0a4:	f7f3 fa18 	bl	80004d8 <__aeabi_dmul>
 800d0a8:	9b07      	ldr	r3, [sp, #28]
 800d0aa:	1b1c      	subs	r4, r3, r4
 800d0ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d0b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0b4:	e7e5      	b.n	800d082 <_strtod_l+0x3ea>
 800d0b6:	9b07      	ldr	r3, [sp, #28]
 800d0b8:	3316      	adds	r3, #22
 800d0ba:	db0b      	blt.n	800d0d4 <_strtod_l+0x43c>
 800d0bc:	9b04      	ldr	r3, [sp, #16]
 800d0be:	4640      	mov	r0, r8
 800d0c0:	1b5d      	subs	r5, r3, r5
 800d0c2:	4b59      	ldr	r3, [pc, #356]	; (800d228 <_strtod_l+0x590>)
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0ce:	f7f3 fb2d 	bl	800072c <__aeabi_ddiv>
 800d0d2:	e79d      	b.n	800d010 <_strtod_l+0x378>
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	1ba6      	subs	r6, r4, r6
 800d0d8:	441e      	add	r6, r3
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	dd74      	ble.n	800d1c8 <_strtod_l+0x530>
 800d0de:	f016 030f 	ands.w	r3, r6, #15
 800d0e2:	d00a      	beq.n	800d0fa <_strtod_l+0x462>
 800d0e4:	4950      	ldr	r1, [pc, #320]	; (800d228 <_strtod_l+0x590>)
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	f7f3 f9f1 	bl	80004d8 <__aeabi_dmul>
 800d0f6:	4680      	mov	r8, r0
 800d0f8:	4689      	mov	r9, r1
 800d0fa:	f036 060f 	bics.w	r6, r6, #15
 800d0fe:	d052      	beq.n	800d1a6 <_strtod_l+0x50e>
 800d100:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800d104:	dd27      	ble.n	800d156 <_strtod_l+0x4be>
 800d106:	f04f 0b00 	mov.w	fp, #0
 800d10a:	f8cd b010 	str.w	fp, [sp, #16]
 800d10e:	f8cd b020 	str.w	fp, [sp, #32]
 800d112:	f8cd b018 	str.w	fp, [sp, #24]
 800d116:	2322      	movs	r3, #34	; 0x22
 800d118:	f04f 0800 	mov.w	r8, #0
 800d11c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800d220 <_strtod_l+0x588>
 800d120:	f8ca 3000 	str.w	r3, [sl]
 800d124:	9b08      	ldr	r3, [sp, #32]
 800d126:	2b00      	cmp	r3, #0
 800d128:	f43f adf7 	beq.w	800cd1a <_strtod_l+0x82>
 800d12c:	4650      	mov	r0, sl
 800d12e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d130:	f001 fe6a 	bl	800ee08 <_Bfree>
 800d134:	4650      	mov	r0, sl
 800d136:	9906      	ldr	r1, [sp, #24]
 800d138:	f001 fe66 	bl	800ee08 <_Bfree>
 800d13c:	4650      	mov	r0, sl
 800d13e:	9904      	ldr	r1, [sp, #16]
 800d140:	f001 fe62 	bl	800ee08 <_Bfree>
 800d144:	4650      	mov	r0, sl
 800d146:	9908      	ldr	r1, [sp, #32]
 800d148:	f001 fe5e 	bl	800ee08 <_Bfree>
 800d14c:	4659      	mov	r1, fp
 800d14e:	4650      	mov	r0, sl
 800d150:	f001 fe5a 	bl	800ee08 <_Bfree>
 800d154:	e5e1      	b.n	800cd1a <_strtod_l+0x82>
 800d156:	4b35      	ldr	r3, [pc, #212]	; (800d22c <_strtod_l+0x594>)
 800d158:	4640      	mov	r0, r8
 800d15a:	9305      	str	r3, [sp, #20]
 800d15c:	2300      	movs	r3, #0
 800d15e:	4649      	mov	r1, r9
 800d160:	461f      	mov	r7, r3
 800d162:	1136      	asrs	r6, r6, #4
 800d164:	2e01      	cmp	r6, #1
 800d166:	dc21      	bgt.n	800d1ac <_strtod_l+0x514>
 800d168:	b10b      	cbz	r3, 800d16e <_strtod_l+0x4d6>
 800d16a:	4680      	mov	r8, r0
 800d16c:	4689      	mov	r9, r1
 800d16e:	4b2f      	ldr	r3, [pc, #188]	; (800d22c <_strtod_l+0x594>)
 800d170:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d174:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d178:	4642      	mov	r2, r8
 800d17a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d17e:	464b      	mov	r3, r9
 800d180:	f7f3 f9aa 	bl	80004d8 <__aeabi_dmul>
 800d184:	4b26      	ldr	r3, [pc, #152]	; (800d220 <_strtod_l+0x588>)
 800d186:	460a      	mov	r2, r1
 800d188:	400b      	ands	r3, r1
 800d18a:	4929      	ldr	r1, [pc, #164]	; (800d230 <_strtod_l+0x598>)
 800d18c:	4680      	mov	r8, r0
 800d18e:	428b      	cmp	r3, r1
 800d190:	d8b9      	bhi.n	800d106 <_strtod_l+0x46e>
 800d192:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d196:	428b      	cmp	r3, r1
 800d198:	bf86      	itte	hi
 800d19a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800d19e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800d234 <_strtod_l+0x59c>
 800d1a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9305      	str	r3, [sp, #20]
 800d1aa:	e07f      	b.n	800d2ac <_strtod_l+0x614>
 800d1ac:	07f2      	lsls	r2, r6, #31
 800d1ae:	d505      	bpl.n	800d1bc <_strtod_l+0x524>
 800d1b0:	9b05      	ldr	r3, [sp, #20]
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f7f3 f98f 	bl	80004d8 <__aeabi_dmul>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	9a05      	ldr	r2, [sp, #20]
 800d1be:	3701      	adds	r7, #1
 800d1c0:	3208      	adds	r2, #8
 800d1c2:	1076      	asrs	r6, r6, #1
 800d1c4:	9205      	str	r2, [sp, #20]
 800d1c6:	e7cd      	b.n	800d164 <_strtod_l+0x4cc>
 800d1c8:	d0ed      	beq.n	800d1a6 <_strtod_l+0x50e>
 800d1ca:	4276      	negs	r6, r6
 800d1cc:	f016 020f 	ands.w	r2, r6, #15
 800d1d0:	d00a      	beq.n	800d1e8 <_strtod_l+0x550>
 800d1d2:	4b15      	ldr	r3, [pc, #84]	; (800d228 <_strtod_l+0x590>)
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1da:	4649      	mov	r1, r9
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 faa4 	bl	800072c <__aeabi_ddiv>
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	1136      	asrs	r6, r6, #4
 800d1ea:	d0dc      	beq.n	800d1a6 <_strtod_l+0x50e>
 800d1ec:	2e1f      	cmp	r6, #31
 800d1ee:	dd23      	ble.n	800d238 <_strtod_l+0x5a0>
 800d1f0:	f04f 0b00 	mov.w	fp, #0
 800d1f4:	f8cd b010 	str.w	fp, [sp, #16]
 800d1f8:	f8cd b020 	str.w	fp, [sp, #32]
 800d1fc:	f8cd b018 	str.w	fp, [sp, #24]
 800d200:	2322      	movs	r3, #34	; 0x22
 800d202:	f04f 0800 	mov.w	r8, #0
 800d206:	f04f 0900 	mov.w	r9, #0
 800d20a:	f8ca 3000 	str.w	r3, [sl]
 800d20e:	e789      	b.n	800d124 <_strtod_l+0x48c>
 800d210:	08010895 	.word	0x08010895
 800d214:	080108d8 	.word	0x080108d8
 800d218:	0801088d 	.word	0x0801088d
 800d21c:	08010a1c 	.word	0x08010a1c
 800d220:	7ff00000 	.word	0x7ff00000
 800d224:	08010cc8 	.word	0x08010cc8
 800d228:	08010ba8 	.word	0x08010ba8
 800d22c:	08010b80 	.word	0x08010b80
 800d230:	7ca00000 	.word	0x7ca00000
 800d234:	7fefffff 	.word	0x7fefffff
 800d238:	f016 0310 	ands.w	r3, r6, #16
 800d23c:	bf18      	it	ne
 800d23e:	236a      	movne	r3, #106	; 0x6a
 800d240:	4640      	mov	r0, r8
 800d242:	9305      	str	r3, [sp, #20]
 800d244:	4649      	mov	r1, r9
 800d246:	2300      	movs	r3, #0
 800d248:	4fb0      	ldr	r7, [pc, #704]	; (800d50c <_strtod_l+0x874>)
 800d24a:	07f2      	lsls	r2, r6, #31
 800d24c:	d504      	bpl.n	800d258 <_strtod_l+0x5c0>
 800d24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d252:	f7f3 f941 	bl	80004d8 <__aeabi_dmul>
 800d256:	2301      	movs	r3, #1
 800d258:	1076      	asrs	r6, r6, #1
 800d25a:	f107 0708 	add.w	r7, r7, #8
 800d25e:	d1f4      	bne.n	800d24a <_strtod_l+0x5b2>
 800d260:	b10b      	cbz	r3, 800d266 <_strtod_l+0x5ce>
 800d262:	4680      	mov	r8, r0
 800d264:	4689      	mov	r9, r1
 800d266:	9b05      	ldr	r3, [sp, #20]
 800d268:	b1c3      	cbz	r3, 800d29c <_strtod_l+0x604>
 800d26a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d26e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d272:	2b00      	cmp	r3, #0
 800d274:	4649      	mov	r1, r9
 800d276:	dd11      	ble.n	800d29c <_strtod_l+0x604>
 800d278:	2b1f      	cmp	r3, #31
 800d27a:	f340 8127 	ble.w	800d4cc <_strtod_l+0x834>
 800d27e:	2b34      	cmp	r3, #52	; 0x34
 800d280:	bfd8      	it	le
 800d282:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800d286:	f04f 0800 	mov.w	r8, #0
 800d28a:	bfcf      	iteee	gt
 800d28c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d290:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d294:	fa03 f202 	lslle.w	r2, r3, r2
 800d298:	ea02 0901 	andle.w	r9, r2, r1
 800d29c:	2200      	movs	r2, #0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	f7f3 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1a1      	bne.n	800d1f0 <_strtod_l+0x558>
 800d2ac:	9b06      	ldr	r3, [sp, #24]
 800d2ae:	465a      	mov	r2, fp
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	4623      	mov	r3, r4
 800d2b6:	9908      	ldr	r1, [sp, #32]
 800d2b8:	f001 fe0e 	bl	800eed8 <__s2b>
 800d2bc:	9008      	str	r0, [sp, #32]
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f43f af21 	beq.w	800d106 <_strtod_l+0x46e>
 800d2c4:	9b04      	ldr	r3, [sp, #16]
 800d2c6:	f04f 0b00 	mov.w	fp, #0
 800d2ca:	1b5d      	subs	r5, r3, r5
 800d2cc:	9b07      	ldr	r3, [sp, #28]
 800d2ce:	f8cd b010 	str.w	fp, [sp, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bfb4      	ite	lt
 800d2d6:	462b      	movlt	r3, r5
 800d2d8:	2300      	movge	r3, #0
 800d2da:	930e      	str	r3, [sp, #56]	; 0x38
 800d2dc:	9b07      	ldr	r3, [sp, #28]
 800d2de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2e2:	9314      	str	r3, [sp, #80]	; 0x50
 800d2e4:	9b08      	ldr	r3, [sp, #32]
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	6859      	ldr	r1, [r3, #4]
 800d2ea:	f001 fd4d 	bl	800ed88 <_Balloc>
 800d2ee:	9006      	str	r0, [sp, #24]
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	f43f af10 	beq.w	800d116 <_strtod_l+0x47e>
 800d2f6:	9b08      	ldr	r3, [sp, #32]
 800d2f8:	300c      	adds	r0, #12
 800d2fa:	691a      	ldr	r2, [r3, #16]
 800d2fc:	f103 010c 	add.w	r1, r3, #12
 800d300:	3202      	adds	r2, #2
 800d302:	0092      	lsls	r2, r2, #2
 800d304:	f7fe fdc8 	bl	800be98 <memcpy>
 800d308:	ab1c      	add	r3, sp, #112	; 0x70
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	ab1b      	add	r3, sp, #108	; 0x6c
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	4642      	mov	r2, r8
 800d312:	464b      	mov	r3, r9
 800d314:	4650      	mov	r0, sl
 800d316:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800d31a:	f002 f91f 	bl	800f55c <__d2b>
 800d31e:	901a      	str	r0, [sp, #104]	; 0x68
 800d320:	2800      	cmp	r0, #0
 800d322:	f43f aef8 	beq.w	800d116 <_strtod_l+0x47e>
 800d326:	2101      	movs	r1, #1
 800d328:	4650      	mov	r0, sl
 800d32a:	f001 fe6d 	bl	800f008 <__i2b>
 800d32e:	4603      	mov	r3, r0
 800d330:	9004      	str	r0, [sp, #16]
 800d332:	2800      	cmp	r0, #0
 800d334:	f43f aeef 	beq.w	800d116 <_strtod_l+0x47e>
 800d338:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d33a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	bfab      	itete	ge
 800d340:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d342:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800d344:	18ee      	addge	r6, r5, r3
 800d346:	1b5c      	sublt	r4, r3, r5
 800d348:	9b05      	ldr	r3, [sp, #20]
 800d34a:	bfa8      	it	ge
 800d34c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800d34e:	eba5 0503 	sub.w	r5, r5, r3
 800d352:	4415      	add	r5, r2
 800d354:	4b6e      	ldr	r3, [pc, #440]	; (800d510 <_strtod_l+0x878>)
 800d356:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800d35a:	bfb8      	it	lt
 800d35c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800d35e:	429d      	cmp	r5, r3
 800d360:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d364:	f280 80c4 	bge.w	800d4f0 <_strtod_l+0x858>
 800d368:	1b5b      	subs	r3, r3, r5
 800d36a:	2b1f      	cmp	r3, #31
 800d36c:	f04f 0701 	mov.w	r7, #1
 800d370:	eba2 0203 	sub.w	r2, r2, r3
 800d374:	f300 80b1 	bgt.w	800d4da <_strtod_l+0x842>
 800d378:	2500      	movs	r5, #0
 800d37a:	fa07 f303 	lsl.w	r3, r7, r3
 800d37e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d380:	18b7      	adds	r7, r6, r2
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	42be      	cmp	r6, r7
 800d386:	4414      	add	r4, r2
 800d388:	441c      	add	r4, r3
 800d38a:	4633      	mov	r3, r6
 800d38c:	bfa8      	it	ge
 800d38e:	463b      	movge	r3, r7
 800d390:	42a3      	cmp	r3, r4
 800d392:	bfa8      	it	ge
 800d394:	4623      	movge	r3, r4
 800d396:	2b00      	cmp	r3, #0
 800d398:	bfc2      	ittt	gt
 800d39a:	1aff      	subgt	r7, r7, r3
 800d39c:	1ae4      	subgt	r4, r4, r3
 800d39e:	1af6      	subgt	r6, r6, r3
 800d3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	dd17      	ble.n	800d3d6 <_strtod_l+0x73e>
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	9904      	ldr	r1, [sp, #16]
 800d3ac:	f001 feea 	bl	800f184 <__pow5mult>
 800d3b0:	9004      	str	r0, [sp, #16]
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f43f aeaf 	beq.w	800d116 <_strtod_l+0x47e>
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3bc:	4650      	mov	r0, sl
 800d3be:	f001 fe39 	bl	800f034 <__multiply>
 800d3c2:	9009      	str	r0, [sp, #36]	; 0x24
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	f43f aea6 	beq.w	800d116 <_strtod_l+0x47e>
 800d3ca:	4650      	mov	r0, sl
 800d3cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d3ce:	f001 fd1b 	bl	800ee08 <_Bfree>
 800d3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3d6:	2f00      	cmp	r7, #0
 800d3d8:	f300 808e 	bgt.w	800d4f8 <_strtod_l+0x860>
 800d3dc:	9b07      	ldr	r3, [sp, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd08      	ble.n	800d3f4 <_strtod_l+0x75c>
 800d3e2:	4650      	mov	r0, sl
 800d3e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3e6:	9906      	ldr	r1, [sp, #24]
 800d3e8:	f001 fecc 	bl	800f184 <__pow5mult>
 800d3ec:	9006      	str	r0, [sp, #24]
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f ae91 	beq.w	800d116 <_strtod_l+0x47e>
 800d3f4:	2c00      	cmp	r4, #0
 800d3f6:	dd08      	ble.n	800d40a <_strtod_l+0x772>
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	9906      	ldr	r1, [sp, #24]
 800d3fe:	f001 ff1b 	bl	800f238 <__lshift>
 800d402:	9006      	str	r0, [sp, #24]
 800d404:	2800      	cmp	r0, #0
 800d406:	f43f ae86 	beq.w	800d116 <_strtod_l+0x47e>
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	dd08      	ble.n	800d420 <_strtod_l+0x788>
 800d40e:	4632      	mov	r2, r6
 800d410:	4650      	mov	r0, sl
 800d412:	9904      	ldr	r1, [sp, #16]
 800d414:	f001 ff10 	bl	800f238 <__lshift>
 800d418:	9004      	str	r0, [sp, #16]
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f43f ae7b 	beq.w	800d116 <_strtod_l+0x47e>
 800d420:	4650      	mov	r0, sl
 800d422:	9a06      	ldr	r2, [sp, #24]
 800d424:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d426:	f001 ff93 	bl	800f350 <__mdiff>
 800d42a:	4683      	mov	fp, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	f43f ae72 	beq.w	800d116 <_strtod_l+0x47e>
 800d432:	2400      	movs	r4, #0
 800d434:	68c3      	ldr	r3, [r0, #12]
 800d436:	9904      	ldr	r1, [sp, #16]
 800d438:	60c4      	str	r4, [r0, #12]
 800d43a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d43c:	f001 ff6c 	bl	800f318 <__mcmp>
 800d440:	42a0      	cmp	r0, r4
 800d442:	da6b      	bge.n	800d51c <_strtod_l+0x884>
 800d444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d446:	ea53 0308 	orrs.w	r3, r3, r8
 800d44a:	f040 8091 	bne.w	800d570 <_strtod_l+0x8d8>
 800d44e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d452:	2b00      	cmp	r3, #0
 800d454:	f040 808c 	bne.w	800d570 <_strtod_l+0x8d8>
 800d458:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d45c:	0d1b      	lsrs	r3, r3, #20
 800d45e:	051b      	lsls	r3, r3, #20
 800d460:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d464:	f240 8084 	bls.w	800d570 <_strtod_l+0x8d8>
 800d468:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d46c:	b91b      	cbnz	r3, 800d476 <_strtod_l+0x7de>
 800d46e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d472:	2b01      	cmp	r3, #1
 800d474:	dd7c      	ble.n	800d570 <_strtod_l+0x8d8>
 800d476:	4659      	mov	r1, fp
 800d478:	2201      	movs	r2, #1
 800d47a:	4650      	mov	r0, sl
 800d47c:	f001 fedc 	bl	800f238 <__lshift>
 800d480:	9904      	ldr	r1, [sp, #16]
 800d482:	4683      	mov	fp, r0
 800d484:	f001 ff48 	bl	800f318 <__mcmp>
 800d488:	2800      	cmp	r0, #0
 800d48a:	dd71      	ble.n	800d570 <_strtod_l+0x8d8>
 800d48c:	9905      	ldr	r1, [sp, #20]
 800d48e:	464b      	mov	r3, r9
 800d490:	4a20      	ldr	r2, [pc, #128]	; (800d514 <_strtod_l+0x87c>)
 800d492:	2900      	cmp	r1, #0
 800d494:	f000 808c 	beq.w	800d5b0 <_strtod_l+0x918>
 800d498:	ea02 0109 	and.w	r1, r2, r9
 800d49c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4a0:	f300 8086 	bgt.w	800d5b0 <_strtod_l+0x918>
 800d4a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4a8:	f77f aeaa 	ble.w	800d200 <_strtod_l+0x568>
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	4649      	mov	r1, r9
 800d4b0:	4b19      	ldr	r3, [pc, #100]	; (800d518 <_strtod_l+0x880>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f7f3 f810 	bl	80004d8 <__aeabi_dmul>
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4303      	orrs	r3, r0
 800d4bc:	bf08      	it	eq
 800d4be:	2322      	moveq	r3, #34	; 0x22
 800d4c0:	4680      	mov	r8, r0
 800d4c2:	4689      	mov	r9, r1
 800d4c4:	bf08      	it	eq
 800d4c6:	f8ca 3000 	streq.w	r3, [sl]
 800d4ca:	e62f      	b.n	800d12c <_strtod_l+0x494>
 800d4cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d4:	ea03 0808 	and.w	r8, r3, r8
 800d4d8:	e6e0      	b.n	800d29c <_strtod_l+0x604>
 800d4da:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800d4de:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800d4e2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800d4e6:	35e2      	adds	r5, #226	; 0xe2
 800d4e8:	fa07 f505 	lsl.w	r5, r7, r5
 800d4ec:	970f      	str	r7, [sp, #60]	; 0x3c
 800d4ee:	e747      	b.n	800d380 <_strtod_l+0x6e8>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	2500      	movs	r5, #0
 800d4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4f6:	e743      	b.n	800d380 <_strtod_l+0x6e8>
 800d4f8:	463a      	mov	r2, r7
 800d4fa:	4650      	mov	r0, sl
 800d4fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d4fe:	f001 fe9b 	bl	800f238 <__lshift>
 800d502:	901a      	str	r0, [sp, #104]	; 0x68
 800d504:	2800      	cmp	r0, #0
 800d506:	f47f af69 	bne.w	800d3dc <_strtod_l+0x744>
 800d50a:	e604      	b.n	800d116 <_strtod_l+0x47e>
 800d50c:	080108f0 	.word	0x080108f0
 800d510:	fffffc02 	.word	0xfffffc02
 800d514:	7ff00000 	.word	0x7ff00000
 800d518:	39500000 	.word	0x39500000
 800d51c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d520:	d165      	bne.n	800d5ee <_strtod_l+0x956>
 800d522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d524:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d528:	b35a      	cbz	r2, 800d582 <_strtod_l+0x8ea>
 800d52a:	4a99      	ldr	r2, [pc, #612]	; (800d790 <_strtod_l+0xaf8>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d12b      	bne.n	800d588 <_strtod_l+0x8f0>
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	4641      	mov	r1, r8
 800d534:	b303      	cbz	r3, 800d578 <_strtod_l+0x8e0>
 800d536:	464a      	mov	r2, r9
 800d538:	4b96      	ldr	r3, [pc, #600]	; (800d794 <_strtod_l+0xafc>)
 800d53a:	4013      	ands	r3, r2
 800d53c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d544:	d81b      	bhi.n	800d57e <_strtod_l+0x8e6>
 800d546:	0d1b      	lsrs	r3, r3, #20
 800d548:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d54c:	fa02 f303 	lsl.w	r3, r2, r3
 800d550:	4299      	cmp	r1, r3
 800d552:	d119      	bne.n	800d588 <_strtod_l+0x8f0>
 800d554:	4b90      	ldr	r3, [pc, #576]	; (800d798 <_strtod_l+0xb00>)
 800d556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d558:	429a      	cmp	r2, r3
 800d55a:	d102      	bne.n	800d562 <_strtod_l+0x8ca>
 800d55c:	3101      	adds	r1, #1
 800d55e:	f43f adda 	beq.w	800d116 <_strtod_l+0x47e>
 800d562:	f04f 0800 	mov.w	r8, #0
 800d566:	4b8b      	ldr	r3, [pc, #556]	; (800d794 <_strtod_l+0xafc>)
 800d568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d56a:	401a      	ands	r2, r3
 800d56c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800d570:	9b05      	ldr	r3, [sp, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d19a      	bne.n	800d4ac <_strtod_l+0x814>
 800d576:	e5d9      	b.n	800d12c <_strtod_l+0x494>
 800d578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d57c:	e7e8      	b.n	800d550 <_strtod_l+0x8b8>
 800d57e:	4613      	mov	r3, r2
 800d580:	e7e6      	b.n	800d550 <_strtod_l+0x8b8>
 800d582:	ea53 0308 	orrs.w	r3, r3, r8
 800d586:	d081      	beq.n	800d48c <_strtod_l+0x7f4>
 800d588:	b1e5      	cbz	r5, 800d5c4 <_strtod_l+0x92c>
 800d58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58c:	421d      	tst	r5, r3
 800d58e:	d0ef      	beq.n	800d570 <_strtod_l+0x8d8>
 800d590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d592:	4640      	mov	r0, r8
 800d594:	4649      	mov	r1, r9
 800d596:	9a05      	ldr	r2, [sp, #20]
 800d598:	b1c3      	cbz	r3, 800d5cc <_strtod_l+0x934>
 800d59a:	f7ff fb59 	bl	800cc50 <sulp>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5a6:	f7f2 fde1 	bl	800016c <__adddf3>
 800d5aa:	4680      	mov	r8, r0
 800d5ac:	4689      	mov	r9, r1
 800d5ae:	e7df      	b.n	800d570 <_strtod_l+0x8d8>
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5b6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d5ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d5be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d5c2:	e7d5      	b.n	800d570 <_strtod_l+0x8d8>
 800d5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5c6:	ea13 0f08 	tst.w	r3, r8
 800d5ca:	e7e0      	b.n	800d58e <_strtod_l+0x8f6>
 800d5cc:	f7ff fb40 	bl	800cc50 <sulp>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5d8:	f7f2 fdc6 	bl	8000168 <__aeabi_dsub>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	4689      	mov	r9, r1
 800d5e4:	f7f3 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0c1      	beq.n	800d570 <_strtod_l+0x8d8>
 800d5ec:	e608      	b.n	800d200 <_strtod_l+0x568>
 800d5ee:	4658      	mov	r0, fp
 800d5f0:	9904      	ldr	r1, [sp, #16]
 800d5f2:	f002 f80f 	bl	800f614 <__ratio>
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	460f      	mov	r7, r1
 800d600:	f7f3 f9e6 	bl	80009d0 <__aeabi_dcmple>
 800d604:	2800      	cmp	r0, #0
 800d606:	d070      	beq.n	800d6ea <_strtod_l+0xa52>
 800d608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d042      	beq.n	800d694 <_strtod_l+0x9fc>
 800d60e:	2600      	movs	r6, #0
 800d610:	4f62      	ldr	r7, [pc, #392]	; (800d79c <_strtod_l+0xb04>)
 800d612:	4d62      	ldr	r5, [pc, #392]	; (800d79c <_strtod_l+0xb04>)
 800d614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d61a:	0d1b      	lsrs	r3, r3, #20
 800d61c:	051b      	lsls	r3, r3, #20
 800d61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d622:	4b5f      	ldr	r3, [pc, #380]	; (800d7a0 <_strtod_l+0xb08>)
 800d624:	429a      	cmp	r2, r3
 800d626:	f040 80c3 	bne.w	800d7b0 <_strtod_l+0xb18>
 800d62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62c:	4640      	mov	r0, r8
 800d62e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800d632:	4649      	mov	r1, r9
 800d634:	f001 ff18 	bl	800f468 <__ulp>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4630      	mov	r0, r6
 800d63e:	4639      	mov	r1, r7
 800d640:	f7f2 ff4a 	bl	80004d8 <__aeabi_dmul>
 800d644:	4642      	mov	r2, r8
 800d646:	464b      	mov	r3, r9
 800d648:	f7f2 fd90 	bl	800016c <__adddf3>
 800d64c:	460b      	mov	r3, r1
 800d64e:	4951      	ldr	r1, [pc, #324]	; (800d794 <_strtod_l+0xafc>)
 800d650:	4a54      	ldr	r2, [pc, #336]	; (800d7a4 <_strtod_l+0xb0c>)
 800d652:	4019      	ands	r1, r3
 800d654:	4291      	cmp	r1, r2
 800d656:	4680      	mov	r8, r0
 800d658:	d95d      	bls.n	800d716 <_strtod_l+0xa7e>
 800d65a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d65c:	4b4e      	ldr	r3, [pc, #312]	; (800d798 <_strtod_l+0xb00>)
 800d65e:	429a      	cmp	r2, r3
 800d660:	d103      	bne.n	800d66a <_strtod_l+0x9d2>
 800d662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d664:	3301      	adds	r3, #1
 800d666:	f43f ad56 	beq.w	800d116 <_strtod_l+0x47e>
 800d66a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d66e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800d798 <_strtod_l+0xb00>
 800d672:	4650      	mov	r0, sl
 800d674:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d676:	f001 fbc7 	bl	800ee08 <_Bfree>
 800d67a:	4650      	mov	r0, sl
 800d67c:	9906      	ldr	r1, [sp, #24]
 800d67e:	f001 fbc3 	bl	800ee08 <_Bfree>
 800d682:	4650      	mov	r0, sl
 800d684:	9904      	ldr	r1, [sp, #16]
 800d686:	f001 fbbf 	bl	800ee08 <_Bfree>
 800d68a:	4659      	mov	r1, fp
 800d68c:	4650      	mov	r0, sl
 800d68e:	f001 fbbb 	bl	800ee08 <_Bfree>
 800d692:	e627      	b.n	800d2e4 <_strtod_l+0x64c>
 800d694:	f1b8 0f00 	cmp.w	r8, #0
 800d698:	d119      	bne.n	800d6ce <_strtod_l+0xa36>
 800d69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6a0:	b9e3      	cbnz	r3, 800d6dc <_strtod_l+0xa44>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	4639      	mov	r1, r7
 800d6a8:	4b3c      	ldr	r3, [pc, #240]	; (800d79c <_strtod_l+0xb04>)
 800d6aa:	f7f3 f987 	bl	80009bc <__aeabi_dcmplt>
 800d6ae:	b9c8      	cbnz	r0, 800d6e4 <_strtod_l+0xa4c>
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	4b3c      	ldr	r3, [pc, #240]	; (800d7a8 <_strtod_l+0xb10>)
 800d6b8:	f7f2 ff0e 	bl	80004d8 <__aeabi_dmul>
 800d6bc:	4604      	mov	r4, r0
 800d6be:	460d      	mov	r5, r1
 800d6c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d6c4:	9416      	str	r4, [sp, #88]	; 0x58
 800d6c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6c8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800d6cc:	e7a2      	b.n	800d614 <_strtod_l+0x97c>
 800d6ce:	f1b8 0f01 	cmp.w	r8, #1
 800d6d2:	d103      	bne.n	800d6dc <_strtod_l+0xa44>
 800d6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f43f ad92 	beq.w	800d200 <_strtod_l+0x568>
 800d6dc:	2600      	movs	r6, #0
 800d6de:	2400      	movs	r4, #0
 800d6e0:	4f32      	ldr	r7, [pc, #200]	; (800d7ac <_strtod_l+0xb14>)
 800d6e2:	e796      	b.n	800d612 <_strtod_l+0x97a>
 800d6e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d6e6:	4d30      	ldr	r5, [pc, #192]	; (800d7a8 <_strtod_l+0xb10>)
 800d6e8:	e7ea      	b.n	800d6c0 <_strtod_l+0xa28>
 800d6ea:	4b2f      	ldr	r3, [pc, #188]	; (800d7a8 <_strtod_l+0xb10>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	f7f2 fef1 	bl	80004d8 <__aeabi_dmul>
 800d6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	b933      	cbnz	r3, 800d70c <_strtod_l+0xa74>
 800d6fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d702:	9010      	str	r0, [sp, #64]	; 0x40
 800d704:	9311      	str	r3, [sp, #68]	; 0x44
 800d706:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d70a:	e783      	b.n	800d614 <_strtod_l+0x97c>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d714:	e7f7      	b.n	800d706 <_strtod_l+0xa6e>
 800d716:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d71a:	9b05      	ldr	r3, [sp, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1a8      	bne.n	800d672 <_strtod_l+0x9da>
 800d720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d726:	0d1b      	lsrs	r3, r3, #20
 800d728:	051b      	lsls	r3, r3, #20
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d1a1      	bne.n	800d672 <_strtod_l+0x9da>
 800d72e:	4620      	mov	r0, r4
 800d730:	4629      	mov	r1, r5
 800d732:	f7f3 fc77 	bl	8001024 <__aeabi_d2lz>
 800d736:	f7f2 fea1 	bl	800047c <__aeabi_l2d>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f2 fd11 	bl	8000168 <__aeabi_dsub>
 800d746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d74c:	ea43 0308 	orr.w	r3, r3, r8
 800d750:	4313      	orrs	r3, r2
 800d752:	4604      	mov	r4, r0
 800d754:	460d      	mov	r5, r1
 800d756:	d066      	beq.n	800d826 <_strtod_l+0xb8e>
 800d758:	a309      	add	r3, pc, #36	; (adr r3, 800d780 <_strtod_l+0xae8>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f3 f92d 	bl	80009bc <__aeabi_dcmplt>
 800d762:	2800      	cmp	r0, #0
 800d764:	f47f ace2 	bne.w	800d12c <_strtod_l+0x494>
 800d768:	a307      	add	r3, pc, #28	; (adr r3, 800d788 <_strtod_l+0xaf0>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f3 f941 	bl	80009f8 <__aeabi_dcmpgt>
 800d776:	2800      	cmp	r0, #0
 800d778:	f43f af7b 	beq.w	800d672 <_strtod_l+0x9da>
 800d77c:	e4d6      	b.n	800d12c <_strtod_l+0x494>
 800d77e:	bf00      	nop
 800d780:	94a03595 	.word	0x94a03595
 800d784:	3fdfffff 	.word	0x3fdfffff
 800d788:	35afe535 	.word	0x35afe535
 800d78c:	3fe00000 	.word	0x3fe00000
 800d790:	000fffff 	.word	0x000fffff
 800d794:	7ff00000 	.word	0x7ff00000
 800d798:	7fefffff 	.word	0x7fefffff
 800d79c:	3ff00000 	.word	0x3ff00000
 800d7a0:	7fe00000 	.word	0x7fe00000
 800d7a4:	7c9fffff 	.word	0x7c9fffff
 800d7a8:	3fe00000 	.word	0x3fe00000
 800d7ac:	bff00000 	.word	0xbff00000
 800d7b0:	9b05      	ldr	r3, [sp, #20]
 800d7b2:	b313      	cbz	r3, 800d7fa <_strtod_l+0xb62>
 800d7b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7ba:	d81e      	bhi.n	800d7fa <_strtod_l+0xb62>
 800d7bc:	a326      	add	r3, pc, #152	; (adr r3, 800d858 <_strtod_l+0xbc0>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	f7f3 f903 	bl	80009d0 <__aeabi_dcmple>
 800d7ca:	b190      	cbz	r0, 800d7f2 <_strtod_l+0xb5a>
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f7f3 f95a 	bl	8000a88 <__aeabi_d2uiz>
 800d7d4:	2801      	cmp	r0, #1
 800d7d6:	bf38      	it	cc
 800d7d8:	2001      	movcc	r0, #1
 800d7da:	f7f2 fe03 	bl	80003e4 <__aeabi_ui2d>
 800d7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	b9d3      	cbnz	r3, 800d81c <_strtod_l+0xb84>
 800d7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7ea:	9012      	str	r0, [sp, #72]	; 0x48
 800d7ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800d7f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800d7f8:	1a9f      	subs	r7, r3, r2
 800d7fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d7fe:	f001 fe33 	bl	800f468 <__ulp>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4630      	mov	r0, r6
 800d808:	4639      	mov	r1, r7
 800d80a:	f7f2 fe65 	bl	80004d8 <__aeabi_dmul>
 800d80e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d812:	f7f2 fcab 	bl	800016c <__adddf3>
 800d816:	4680      	mov	r8, r0
 800d818:	4689      	mov	r9, r1
 800d81a:	e77e      	b.n	800d71a <_strtod_l+0xa82>
 800d81c:	4602      	mov	r2, r0
 800d81e:	460b      	mov	r3, r1
 800d820:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800d824:	e7e3      	b.n	800d7ee <_strtod_l+0xb56>
 800d826:	a30e      	add	r3, pc, #56	; (adr r3, 800d860 <_strtod_l+0xbc8>)
 800d828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82c:	f7f3 f8c6 	bl	80009bc <__aeabi_dcmplt>
 800d830:	e7a1      	b.n	800d776 <_strtod_l+0xade>
 800d832:	2300      	movs	r3, #0
 800d834:	930a      	str	r3, [sp, #40]	; 0x28
 800d836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d838:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	f7ff ba71 	b.w	800cd22 <_strtod_l+0x8a>
 800d840:	2a65      	cmp	r2, #101	; 0x65
 800d842:	f43f ab63 	beq.w	800cf0c <_strtod_l+0x274>
 800d846:	2a45      	cmp	r2, #69	; 0x45
 800d848:	f43f ab60 	beq.w	800cf0c <_strtod_l+0x274>
 800d84c:	2301      	movs	r3, #1
 800d84e:	f7ff bb95 	b.w	800cf7c <_strtod_l+0x2e4>
 800d852:	bf00      	nop
 800d854:	f3af 8000 	nop.w
 800d858:	ffc00000 	.word	0xffc00000
 800d85c:	41dfffff 	.word	0x41dfffff
 800d860:	94a03595 	.word	0x94a03595
 800d864:	3fcfffff 	.word	0x3fcfffff

0800d868 <_strtod_r>:
 800d868:	4b01      	ldr	r3, [pc, #4]	; (800d870 <_strtod_r+0x8>)
 800d86a:	f7ff ba15 	b.w	800cc98 <_strtod_l>
 800d86e:	bf00      	nop
 800d870:	200001e4 	.word	0x200001e4

0800d874 <_strtol_l.constprop.0>:
 800d874:	2b01      	cmp	r3, #1
 800d876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d87a:	4680      	mov	r8, r0
 800d87c:	d001      	beq.n	800d882 <_strtol_l.constprop.0+0xe>
 800d87e:	2b24      	cmp	r3, #36	; 0x24
 800d880:	d906      	bls.n	800d890 <_strtol_l.constprop.0+0x1c>
 800d882:	f7fe fadf 	bl	800be44 <__errno>
 800d886:	2316      	movs	r3, #22
 800d888:	6003      	str	r3, [r0, #0]
 800d88a:	2000      	movs	r0, #0
 800d88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d890:	460d      	mov	r5, r1
 800d892:	4f35      	ldr	r7, [pc, #212]	; (800d968 <_strtol_l.constprop.0+0xf4>)
 800d894:	4628      	mov	r0, r5
 800d896:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d89a:	5de6      	ldrb	r6, [r4, r7]
 800d89c:	f016 0608 	ands.w	r6, r6, #8
 800d8a0:	d1f8      	bne.n	800d894 <_strtol_l.constprop.0+0x20>
 800d8a2:	2c2d      	cmp	r4, #45	; 0x2d
 800d8a4:	d12f      	bne.n	800d906 <_strtol_l.constprop.0+0x92>
 800d8a6:	2601      	movs	r6, #1
 800d8a8:	782c      	ldrb	r4, [r5, #0]
 800d8aa:	1c85      	adds	r5, r0, #2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d057      	beq.n	800d960 <_strtol_l.constprop.0+0xec>
 800d8b0:	2b10      	cmp	r3, #16
 800d8b2:	d109      	bne.n	800d8c8 <_strtol_l.constprop.0+0x54>
 800d8b4:	2c30      	cmp	r4, #48	; 0x30
 800d8b6:	d107      	bne.n	800d8c8 <_strtol_l.constprop.0+0x54>
 800d8b8:	7828      	ldrb	r0, [r5, #0]
 800d8ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d8be:	2858      	cmp	r0, #88	; 0x58
 800d8c0:	d149      	bne.n	800d956 <_strtol_l.constprop.0+0xe2>
 800d8c2:	2310      	movs	r3, #16
 800d8c4:	786c      	ldrb	r4, [r5, #1]
 800d8c6:	3502      	adds	r5, #2
 800d8c8:	2700      	movs	r7, #0
 800d8ca:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800d8ce:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d8d2:	fbbe f9f3 	udiv	r9, lr, r3
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	fb03 ea19 	mls	sl, r3, r9, lr
 800d8dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d8e0:	f1bc 0f09 	cmp.w	ip, #9
 800d8e4:	d814      	bhi.n	800d910 <_strtol_l.constprop.0+0x9c>
 800d8e6:	4664      	mov	r4, ip
 800d8e8:	42a3      	cmp	r3, r4
 800d8ea:	dd22      	ble.n	800d932 <_strtol_l.constprop.0+0xbe>
 800d8ec:	2f00      	cmp	r7, #0
 800d8ee:	db1d      	blt.n	800d92c <_strtol_l.constprop.0+0xb8>
 800d8f0:	4581      	cmp	r9, r0
 800d8f2:	d31b      	bcc.n	800d92c <_strtol_l.constprop.0+0xb8>
 800d8f4:	d101      	bne.n	800d8fa <_strtol_l.constprop.0+0x86>
 800d8f6:	45a2      	cmp	sl, r4
 800d8f8:	db18      	blt.n	800d92c <_strtol_l.constprop.0+0xb8>
 800d8fa:	2701      	movs	r7, #1
 800d8fc:	fb00 4003 	mla	r0, r0, r3, r4
 800d900:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d904:	e7ea      	b.n	800d8dc <_strtol_l.constprop.0+0x68>
 800d906:	2c2b      	cmp	r4, #43	; 0x2b
 800d908:	bf04      	itt	eq
 800d90a:	782c      	ldrbeq	r4, [r5, #0]
 800d90c:	1c85      	addeq	r5, r0, #2
 800d90e:	e7cd      	b.n	800d8ac <_strtol_l.constprop.0+0x38>
 800d910:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d914:	f1bc 0f19 	cmp.w	ip, #25
 800d918:	d801      	bhi.n	800d91e <_strtol_l.constprop.0+0xaa>
 800d91a:	3c37      	subs	r4, #55	; 0x37
 800d91c:	e7e4      	b.n	800d8e8 <_strtol_l.constprop.0+0x74>
 800d91e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d922:	f1bc 0f19 	cmp.w	ip, #25
 800d926:	d804      	bhi.n	800d932 <_strtol_l.constprop.0+0xbe>
 800d928:	3c57      	subs	r4, #87	; 0x57
 800d92a:	e7dd      	b.n	800d8e8 <_strtol_l.constprop.0+0x74>
 800d92c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d930:	e7e6      	b.n	800d900 <_strtol_l.constprop.0+0x8c>
 800d932:	2f00      	cmp	r7, #0
 800d934:	da07      	bge.n	800d946 <_strtol_l.constprop.0+0xd2>
 800d936:	2322      	movs	r3, #34	; 0x22
 800d938:	4670      	mov	r0, lr
 800d93a:	f8c8 3000 	str.w	r3, [r8]
 800d93e:	2a00      	cmp	r2, #0
 800d940:	d0a4      	beq.n	800d88c <_strtol_l.constprop.0+0x18>
 800d942:	1e69      	subs	r1, r5, #1
 800d944:	e005      	b.n	800d952 <_strtol_l.constprop.0+0xde>
 800d946:	b106      	cbz	r6, 800d94a <_strtol_l.constprop.0+0xd6>
 800d948:	4240      	negs	r0, r0
 800d94a:	2a00      	cmp	r2, #0
 800d94c:	d09e      	beq.n	800d88c <_strtol_l.constprop.0+0x18>
 800d94e:	2f00      	cmp	r7, #0
 800d950:	d1f7      	bne.n	800d942 <_strtol_l.constprop.0+0xce>
 800d952:	6011      	str	r1, [r2, #0]
 800d954:	e79a      	b.n	800d88c <_strtol_l.constprop.0+0x18>
 800d956:	2430      	movs	r4, #48	; 0x30
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1b5      	bne.n	800d8c8 <_strtol_l.constprop.0+0x54>
 800d95c:	2308      	movs	r3, #8
 800d95e:	e7b3      	b.n	800d8c8 <_strtol_l.constprop.0+0x54>
 800d960:	2c30      	cmp	r4, #48	; 0x30
 800d962:	d0a9      	beq.n	800d8b8 <_strtol_l.constprop.0+0x44>
 800d964:	230a      	movs	r3, #10
 800d966:	e7af      	b.n	800d8c8 <_strtol_l.constprop.0+0x54>
 800d968:	08010919 	.word	0x08010919

0800d96c <_strtol_r>:
 800d96c:	f7ff bf82 	b.w	800d874 <_strtol_l.constprop.0>

0800d970 <quorem>:
 800d970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	6903      	ldr	r3, [r0, #16]
 800d976:	690c      	ldr	r4, [r1, #16]
 800d978:	4607      	mov	r7, r0
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	f2c0 8082 	blt.w	800da84 <quorem+0x114>
 800d980:	3c01      	subs	r4, #1
 800d982:	f100 0514 	add.w	r5, r0, #20
 800d986:	f101 0814 	add.w	r8, r1, #20
 800d98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d998:	3301      	adds	r3, #1
 800d99a:	429a      	cmp	r2, r3
 800d99c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9a8:	d331      	bcc.n	800da0e <quorem+0x9e>
 800d9aa:	f04f 0e00 	mov.w	lr, #0
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	46ac      	mov	ip, r5
 800d9b2:	46f2      	mov	sl, lr
 800d9b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9b8:	b293      	uxth	r3, r2
 800d9ba:	fb06 e303 	mla	r3, r6, r3, lr
 800d9be:	0c12      	lsrs	r2, r2, #16
 800d9c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	fb06 e202 	mla	r2, r6, r2, lr
 800d9ca:	ebaa 0303 	sub.w	r3, sl, r3
 800d9ce:	f8dc a000 	ldr.w	sl, [ip]
 800d9d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9d6:	fa1f fa8a 	uxth.w	sl, sl
 800d9da:	4453      	add	r3, sl
 800d9dc:	f8dc a000 	ldr.w	sl, [ip]
 800d9e0:	b292      	uxth	r2, r2
 800d9e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9f0:	4581      	cmp	r9, r0
 800d9f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9f6:	f84c 3b04 	str.w	r3, [ip], #4
 800d9fa:	d2db      	bcs.n	800d9b4 <quorem+0x44>
 800d9fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800da00:	b92b      	cbnz	r3, 800da0e <quorem+0x9e>
 800da02:	9b01      	ldr	r3, [sp, #4]
 800da04:	3b04      	subs	r3, #4
 800da06:	429d      	cmp	r5, r3
 800da08:	461a      	mov	r2, r3
 800da0a:	d32f      	bcc.n	800da6c <quorem+0xfc>
 800da0c:	613c      	str	r4, [r7, #16]
 800da0e:	4638      	mov	r0, r7
 800da10:	f001 fc82 	bl	800f318 <__mcmp>
 800da14:	2800      	cmp	r0, #0
 800da16:	db25      	blt.n	800da64 <quorem+0xf4>
 800da18:	4628      	mov	r0, r5
 800da1a:	f04f 0c00 	mov.w	ip, #0
 800da1e:	3601      	adds	r6, #1
 800da20:	f858 1b04 	ldr.w	r1, [r8], #4
 800da24:	f8d0 e000 	ldr.w	lr, [r0]
 800da28:	b28b      	uxth	r3, r1
 800da2a:	ebac 0303 	sub.w	r3, ip, r3
 800da2e:	fa1f f28e 	uxth.w	r2, lr
 800da32:	4413      	add	r3, r2
 800da34:	0c0a      	lsrs	r2, r1, #16
 800da36:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da3e:	b29b      	uxth	r3, r3
 800da40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da44:	45c1      	cmp	r9, r8
 800da46:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da4a:	f840 3b04 	str.w	r3, [r0], #4
 800da4e:	d2e7      	bcs.n	800da20 <quorem+0xb0>
 800da50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da58:	b922      	cbnz	r2, 800da64 <quorem+0xf4>
 800da5a:	3b04      	subs	r3, #4
 800da5c:	429d      	cmp	r5, r3
 800da5e:	461a      	mov	r2, r3
 800da60:	d30a      	bcc.n	800da78 <quorem+0x108>
 800da62:	613c      	str	r4, [r7, #16]
 800da64:	4630      	mov	r0, r6
 800da66:	b003      	add	sp, #12
 800da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	3b04      	subs	r3, #4
 800da70:	2a00      	cmp	r2, #0
 800da72:	d1cb      	bne.n	800da0c <quorem+0x9c>
 800da74:	3c01      	subs	r4, #1
 800da76:	e7c6      	b.n	800da06 <quorem+0x96>
 800da78:	6812      	ldr	r2, [r2, #0]
 800da7a:	3b04      	subs	r3, #4
 800da7c:	2a00      	cmp	r2, #0
 800da7e:	d1f0      	bne.n	800da62 <quorem+0xf2>
 800da80:	3c01      	subs	r4, #1
 800da82:	e7eb      	b.n	800da5c <quorem+0xec>
 800da84:	2000      	movs	r0, #0
 800da86:	e7ee      	b.n	800da66 <quorem+0xf6>

0800da88 <_dtoa_r>:
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	4616      	mov	r6, r2
 800da8e:	461f      	mov	r7, r3
 800da90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800da92:	b099      	sub	sp, #100	; 0x64
 800da94:	4605      	mov	r5, r0
 800da96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800da9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800da9e:	b974      	cbnz	r4, 800dabe <_dtoa_r+0x36>
 800daa0:	2010      	movs	r0, #16
 800daa2:	f001 f949 	bl	800ed38 <malloc>
 800daa6:	4602      	mov	r2, r0
 800daa8:	6268      	str	r0, [r5, #36]	; 0x24
 800daaa:	b920      	cbnz	r0, 800dab6 <_dtoa_r+0x2e>
 800daac:	21ea      	movs	r1, #234	; 0xea
 800daae:	4ba8      	ldr	r3, [pc, #672]	; (800dd50 <_dtoa_r+0x2c8>)
 800dab0:	48a8      	ldr	r0, [pc, #672]	; (800dd54 <_dtoa_r+0x2cc>)
 800dab2:	f002 f8a5 	bl	800fc00 <__assert_func>
 800dab6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daba:	6004      	str	r4, [r0, #0]
 800dabc:	60c4      	str	r4, [r0, #12]
 800dabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dac0:	6819      	ldr	r1, [r3, #0]
 800dac2:	b151      	cbz	r1, 800dada <_dtoa_r+0x52>
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	2301      	movs	r3, #1
 800dac8:	4093      	lsls	r3, r2
 800daca:	604a      	str	r2, [r1, #4]
 800dacc:	608b      	str	r3, [r1, #8]
 800dace:	4628      	mov	r0, r5
 800dad0:	f001 f99a 	bl	800ee08 <_Bfree>
 800dad4:	2200      	movs	r2, #0
 800dad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	1e3b      	subs	r3, r7, #0
 800dadc:	bfaf      	iteee	ge
 800dade:	2300      	movge	r3, #0
 800dae0:	2201      	movlt	r2, #1
 800dae2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dae6:	9305      	strlt	r3, [sp, #20]
 800dae8:	bfa8      	it	ge
 800daea:	f8c8 3000 	strge.w	r3, [r8]
 800daee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800daf2:	4b99      	ldr	r3, [pc, #612]	; (800dd58 <_dtoa_r+0x2d0>)
 800daf4:	bfb8      	it	lt
 800daf6:	f8c8 2000 	strlt.w	r2, [r8]
 800dafa:	ea33 0309 	bics.w	r3, r3, r9
 800dafe:	d119      	bne.n	800db34 <_dtoa_r+0xac>
 800db00:	f242 730f 	movw	r3, #9999	; 0x270f
 800db04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800db06:	6013      	str	r3, [r2, #0]
 800db08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db0c:	4333      	orrs	r3, r6
 800db0e:	f000 857f 	beq.w	800e610 <_dtoa_r+0xb88>
 800db12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db14:	b953      	cbnz	r3, 800db2c <_dtoa_r+0xa4>
 800db16:	4b91      	ldr	r3, [pc, #580]	; (800dd5c <_dtoa_r+0x2d4>)
 800db18:	e022      	b.n	800db60 <_dtoa_r+0xd8>
 800db1a:	4b91      	ldr	r3, [pc, #580]	; (800dd60 <_dtoa_r+0x2d8>)
 800db1c:	9303      	str	r3, [sp, #12]
 800db1e:	3308      	adds	r3, #8
 800db20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800db22:	6013      	str	r3, [r2, #0]
 800db24:	9803      	ldr	r0, [sp, #12]
 800db26:	b019      	add	sp, #100	; 0x64
 800db28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2c:	4b8b      	ldr	r3, [pc, #556]	; (800dd5c <_dtoa_r+0x2d4>)
 800db2e:	9303      	str	r3, [sp, #12]
 800db30:	3303      	adds	r3, #3
 800db32:	e7f5      	b.n	800db20 <_dtoa_r+0x98>
 800db34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800db38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800db3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db40:	2200      	movs	r2, #0
 800db42:	2300      	movs	r3, #0
 800db44:	f7f2 ff30 	bl	80009a8 <__aeabi_dcmpeq>
 800db48:	4680      	mov	r8, r0
 800db4a:	b158      	cbz	r0, 800db64 <_dtoa_r+0xdc>
 800db4c:	2301      	movs	r3, #1
 800db4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 8558 	beq.w	800e60a <_dtoa_r+0xb82>
 800db5a:	4882      	ldr	r0, [pc, #520]	; (800dd64 <_dtoa_r+0x2dc>)
 800db5c:	6018      	str	r0, [r3, #0]
 800db5e:	1e43      	subs	r3, r0, #1
 800db60:	9303      	str	r3, [sp, #12]
 800db62:	e7df      	b.n	800db24 <_dtoa_r+0x9c>
 800db64:	ab16      	add	r3, sp, #88	; 0x58
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	ab17      	add	r3, sp, #92	; 0x5c
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	4628      	mov	r0, r5
 800db6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800db72:	f001 fcf3 	bl	800f55c <__d2b>
 800db76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800db7a:	4683      	mov	fp, r0
 800db7c:	2c00      	cmp	r4, #0
 800db7e:	d07f      	beq.n	800dc80 <_dtoa_r+0x1f8>
 800db80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800db8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800db92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800db96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800db9a:	2200      	movs	r2, #0
 800db9c:	4b72      	ldr	r3, [pc, #456]	; (800dd68 <_dtoa_r+0x2e0>)
 800db9e:	f7f2 fae3 	bl	8000168 <__aeabi_dsub>
 800dba2:	a365      	add	r3, pc, #404	; (adr r3, 800dd38 <_dtoa_r+0x2b0>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	f7f2 fc96 	bl	80004d8 <__aeabi_dmul>
 800dbac:	a364      	add	r3, pc, #400	; (adr r3, 800dd40 <_dtoa_r+0x2b8>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fadb 	bl	800016c <__adddf3>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	4620      	mov	r0, r4
 800dbba:	460f      	mov	r7, r1
 800dbbc:	f7f2 fc22 	bl	8000404 <__aeabi_i2d>
 800dbc0:	a361      	add	r3, pc, #388	; (adr r3, 800dd48 <_dtoa_r+0x2c0>)
 800dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc6:	f7f2 fc87 	bl	80004d8 <__aeabi_dmul>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4630      	mov	r0, r6
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	f7f2 facb 	bl	800016c <__adddf3>
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460f      	mov	r7, r1
 800dbda:	f7f2 ff2d 	bl	8000a38 <__aeabi_d2iz>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4682      	mov	sl, r0
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f7f2 fee8 	bl	80009bc <__aeabi_dcmplt>
 800dbec:	b148      	cbz	r0, 800dc02 <_dtoa_r+0x17a>
 800dbee:	4650      	mov	r0, sl
 800dbf0:	f7f2 fc08 	bl	8000404 <__aeabi_i2d>
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	f7f2 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 800dbfc:	b908      	cbnz	r0, 800dc02 <_dtoa_r+0x17a>
 800dbfe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dc02:	f1ba 0f16 	cmp.w	sl, #22
 800dc06:	d858      	bhi.n	800dcba <_dtoa_r+0x232>
 800dc08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc0c:	4b57      	ldr	r3, [pc, #348]	; (800dd6c <_dtoa_r+0x2e4>)
 800dc0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f2 fed1 	bl	80009bc <__aeabi_dcmplt>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d04f      	beq.n	800dcbe <_dtoa_r+0x236>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dc24:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc28:	1b1c      	subs	r4, r3, r4
 800dc2a:	1e63      	subs	r3, r4, #1
 800dc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc2e:	bf49      	itett	mi
 800dc30:	f1c4 0301 	rsbmi	r3, r4, #1
 800dc34:	2300      	movpl	r3, #0
 800dc36:	9306      	strmi	r3, [sp, #24]
 800dc38:	2300      	movmi	r3, #0
 800dc3a:	bf54      	ite	pl
 800dc3c:	9306      	strpl	r3, [sp, #24]
 800dc3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800dc40:	f1ba 0f00 	cmp.w	sl, #0
 800dc44:	db3d      	blt.n	800dcc2 <_dtoa_r+0x23a>
 800dc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dc4c:	4453      	add	r3, sl
 800dc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc50:	2300      	movs	r3, #0
 800dc52:	930a      	str	r3, [sp, #40]	; 0x28
 800dc54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	f200 808c 	bhi.w	800dd74 <_dtoa_r+0x2ec>
 800dc5c:	2b05      	cmp	r3, #5
 800dc5e:	bfc4      	itt	gt
 800dc60:	3b04      	subgt	r3, #4
 800dc62:	9322      	strgt	r3, [sp, #136]	; 0x88
 800dc64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc66:	bfc8      	it	gt
 800dc68:	2400      	movgt	r4, #0
 800dc6a:	f1a3 0302 	sub.w	r3, r3, #2
 800dc6e:	bfd8      	it	le
 800dc70:	2401      	movle	r4, #1
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	f200 808a 	bhi.w	800dd8c <_dtoa_r+0x304>
 800dc78:	e8df f003 	tbb	[pc, r3]
 800dc7c:	5b4d4f2d 	.word	0x5b4d4f2d
 800dc80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800dc84:	441c      	add	r4, r3
 800dc86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800dc8a:	2b20      	cmp	r3, #32
 800dc8c:	bfc3      	ittte	gt
 800dc8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800dc96:	fa09 f303 	lslgt.w	r3, r9, r3
 800dc9a:	f1c3 0320 	rsble	r3, r3, #32
 800dc9e:	bfc6      	itte	gt
 800dca0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dca4:	4318      	orrgt	r0, r3
 800dca6:	fa06 f003 	lslle.w	r0, r6, r3
 800dcaa:	f7f2 fb9b 	bl	80003e4 <__aeabi_ui2d>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800dcb4:	3c01      	subs	r4, #1
 800dcb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800dcb8:	e76f      	b.n	800db9a <_dtoa_r+0x112>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e7b2      	b.n	800dc24 <_dtoa_r+0x19c>
 800dcbe:	900f      	str	r0, [sp, #60]	; 0x3c
 800dcc0:	e7b1      	b.n	800dc26 <_dtoa_r+0x19e>
 800dcc2:	9b06      	ldr	r3, [sp, #24]
 800dcc4:	eba3 030a 	sub.w	r3, r3, sl
 800dcc8:	9306      	str	r3, [sp, #24]
 800dcca:	f1ca 0300 	rsb	r3, sl, #0
 800dcce:	930a      	str	r3, [sp, #40]	; 0x28
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	930e      	str	r3, [sp, #56]	; 0x38
 800dcd4:	e7be      	b.n	800dc54 <_dtoa_r+0x1cc>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc58      	bgt.n	800dd92 <_dtoa_r+0x30a>
 800dce0:	f04f 0901 	mov.w	r9, #1
 800dce4:	464b      	mov	r3, r9
 800dce6:	f8cd 9020 	str.w	r9, [sp, #32]
 800dcea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800dcee:	2200      	movs	r2, #0
 800dcf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800dcf2:	6042      	str	r2, [r0, #4]
 800dcf4:	2204      	movs	r2, #4
 800dcf6:	f102 0614 	add.w	r6, r2, #20
 800dcfa:	429e      	cmp	r6, r3
 800dcfc:	6841      	ldr	r1, [r0, #4]
 800dcfe:	d94e      	bls.n	800dd9e <_dtoa_r+0x316>
 800dd00:	4628      	mov	r0, r5
 800dd02:	f001 f841 	bl	800ed88 <_Balloc>
 800dd06:	9003      	str	r0, [sp, #12]
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d14c      	bne.n	800dda6 <_dtoa_r+0x31e>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd12:	4b17      	ldr	r3, [pc, #92]	; (800dd70 <_dtoa_r+0x2e8>)
 800dd14:	e6cc      	b.n	800dab0 <_dtoa_r+0x28>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e7de      	b.n	800dcd8 <_dtoa_r+0x250>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd20:	eb0a 0903 	add.w	r9, sl, r3
 800dd24:	f109 0301 	add.w	r3, r9, #1
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	9308      	str	r3, [sp, #32]
 800dd2c:	bfb8      	it	lt
 800dd2e:	2301      	movlt	r3, #1
 800dd30:	e7dd      	b.n	800dcee <_dtoa_r+0x266>
 800dd32:	2301      	movs	r3, #1
 800dd34:	e7f2      	b.n	800dd1c <_dtoa_r+0x294>
 800dd36:	bf00      	nop
 800dd38:	636f4361 	.word	0x636f4361
 800dd3c:	3fd287a7 	.word	0x3fd287a7
 800dd40:	8b60c8b3 	.word	0x8b60c8b3
 800dd44:	3fc68a28 	.word	0x3fc68a28
 800dd48:	509f79fb 	.word	0x509f79fb
 800dd4c:	3fd34413 	.word	0x3fd34413
 800dd50:	08010a26 	.word	0x08010a26
 800dd54:	08010a3d 	.word	0x08010a3d
 800dd58:	7ff00000 	.word	0x7ff00000
 800dd5c:	08010a22 	.word	0x08010a22
 800dd60:	08010a19 	.word	0x08010a19
 800dd64:	08010899 	.word	0x08010899
 800dd68:	3ff80000 	.word	0x3ff80000
 800dd6c:	08010ba8 	.word	0x08010ba8
 800dd70:	08010a98 	.word	0x08010a98
 800dd74:	2401      	movs	r4, #1
 800dd76:	2300      	movs	r3, #0
 800dd78:	940b      	str	r4, [sp, #44]	; 0x2c
 800dd7a:	9322      	str	r3, [sp, #136]	; 0x88
 800dd7c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800dd80:	2200      	movs	r2, #0
 800dd82:	2312      	movs	r3, #18
 800dd84:	f8cd 9020 	str.w	r9, [sp, #32]
 800dd88:	9223      	str	r2, [sp, #140]	; 0x8c
 800dd8a:	e7b0      	b.n	800dcee <_dtoa_r+0x266>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd90:	e7f4      	b.n	800dd7c <_dtoa_r+0x2f4>
 800dd92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800dd96:	464b      	mov	r3, r9
 800dd98:	f8cd 9020 	str.w	r9, [sp, #32]
 800dd9c:	e7a7      	b.n	800dcee <_dtoa_r+0x266>
 800dd9e:	3101      	adds	r1, #1
 800dda0:	6041      	str	r1, [r0, #4]
 800dda2:	0052      	lsls	r2, r2, #1
 800dda4:	e7a7      	b.n	800dcf6 <_dtoa_r+0x26e>
 800dda6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dda8:	9a03      	ldr	r2, [sp, #12]
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	9b08      	ldr	r3, [sp, #32]
 800ddae:	2b0e      	cmp	r3, #14
 800ddb0:	f200 80a8 	bhi.w	800df04 <_dtoa_r+0x47c>
 800ddb4:	2c00      	cmp	r4, #0
 800ddb6:	f000 80a5 	beq.w	800df04 <_dtoa_r+0x47c>
 800ddba:	f1ba 0f00 	cmp.w	sl, #0
 800ddbe:	dd34      	ble.n	800de2a <_dtoa_r+0x3a2>
 800ddc0:	4a9a      	ldr	r2, [pc, #616]	; (800e02c <_dtoa_r+0x5a4>)
 800ddc2:	f00a 030f 	and.w	r3, sl, #15
 800ddc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ddca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ddce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ddd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ddd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ddda:	d016      	beq.n	800de0a <_dtoa_r+0x382>
 800dddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dde0:	4b93      	ldr	r3, [pc, #588]	; (800e030 <_dtoa_r+0x5a8>)
 800dde2:	2703      	movs	r7, #3
 800dde4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dde8:	f7f2 fca0 	bl	800072c <__aeabi_ddiv>
 800ddec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf0:	f004 040f 	and.w	r4, r4, #15
 800ddf4:	4e8e      	ldr	r6, [pc, #568]	; (800e030 <_dtoa_r+0x5a8>)
 800ddf6:	b954      	cbnz	r4, 800de0e <_dtoa_r+0x386>
 800ddf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de00:	f7f2 fc94 	bl	800072c <__aeabi_ddiv>
 800de04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de08:	e029      	b.n	800de5e <_dtoa_r+0x3d6>
 800de0a:	2702      	movs	r7, #2
 800de0c:	e7f2      	b.n	800ddf4 <_dtoa_r+0x36c>
 800de0e:	07e1      	lsls	r1, r4, #31
 800de10:	d508      	bpl.n	800de24 <_dtoa_r+0x39c>
 800de12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de16:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de1a:	f7f2 fb5d 	bl	80004d8 <__aeabi_dmul>
 800de1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800de22:	3701      	adds	r7, #1
 800de24:	1064      	asrs	r4, r4, #1
 800de26:	3608      	adds	r6, #8
 800de28:	e7e5      	b.n	800ddf6 <_dtoa_r+0x36e>
 800de2a:	f000 80a5 	beq.w	800df78 <_dtoa_r+0x4f0>
 800de2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de32:	f1ca 0400 	rsb	r4, sl, #0
 800de36:	4b7d      	ldr	r3, [pc, #500]	; (800e02c <_dtoa_r+0x5a4>)
 800de38:	f004 020f 	and.w	r2, r4, #15
 800de3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	f7f2 fb48 	bl	80004d8 <__aeabi_dmul>
 800de48:	2702      	movs	r7, #2
 800de4a:	2300      	movs	r3, #0
 800de4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de50:	4e77      	ldr	r6, [pc, #476]	; (800e030 <_dtoa_r+0x5a8>)
 800de52:	1124      	asrs	r4, r4, #4
 800de54:	2c00      	cmp	r4, #0
 800de56:	f040 8084 	bne.w	800df62 <_dtoa_r+0x4da>
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1d2      	bne.n	800de04 <_dtoa_r+0x37c>
 800de5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 808b 	beq.w	800df7c <_dtoa_r+0x4f4>
 800de66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800de6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800de6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de72:	2200      	movs	r2, #0
 800de74:	4b6f      	ldr	r3, [pc, #444]	; (800e034 <_dtoa_r+0x5ac>)
 800de76:	f7f2 fda1 	bl	80009bc <__aeabi_dcmplt>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d07e      	beq.n	800df7c <_dtoa_r+0x4f4>
 800de7e:	9b08      	ldr	r3, [sp, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d07b      	beq.n	800df7c <_dtoa_r+0x4f4>
 800de84:	f1b9 0f00 	cmp.w	r9, #0
 800de88:	dd38      	ble.n	800defc <_dtoa_r+0x474>
 800de8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de8e:	2200      	movs	r2, #0
 800de90:	4b69      	ldr	r3, [pc, #420]	; (800e038 <_dtoa_r+0x5b0>)
 800de92:	f7f2 fb21 	bl	80004d8 <__aeabi_dmul>
 800de96:	464c      	mov	r4, r9
 800de98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de9c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800dea0:	3701      	adds	r7, #1
 800dea2:	4638      	mov	r0, r7
 800dea4:	f7f2 faae 	bl	8000404 <__aeabi_i2d>
 800dea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deac:	f7f2 fb14 	bl	80004d8 <__aeabi_dmul>
 800deb0:	2200      	movs	r2, #0
 800deb2:	4b62      	ldr	r3, [pc, #392]	; (800e03c <_dtoa_r+0x5b4>)
 800deb4:	f7f2 f95a 	bl	800016c <__adddf3>
 800deb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800debc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dec0:	9611      	str	r6, [sp, #68]	; 0x44
 800dec2:	2c00      	cmp	r4, #0
 800dec4:	d15d      	bne.n	800df82 <_dtoa_r+0x4fa>
 800dec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deca:	2200      	movs	r2, #0
 800decc:	4b5c      	ldr	r3, [pc, #368]	; (800e040 <_dtoa_r+0x5b8>)
 800dece:	f7f2 f94b 	bl	8000168 <__aeabi_dsub>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800deda:	4633      	mov	r3, r6
 800dedc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dede:	f7f2 fd8b 	bl	80009f8 <__aeabi_dcmpgt>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	f040 829c 	bne.w	800e420 <_dtoa_r+0x998>
 800dee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800deee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800def2:	f7f2 fd63 	bl	80009bc <__aeabi_dcmplt>
 800def6:	2800      	cmp	r0, #0
 800def8:	f040 8290 	bne.w	800e41c <_dtoa_r+0x994>
 800defc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800df00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800df04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df06:	2b00      	cmp	r3, #0
 800df08:	f2c0 8152 	blt.w	800e1b0 <_dtoa_r+0x728>
 800df0c:	f1ba 0f0e 	cmp.w	sl, #14
 800df10:	f300 814e 	bgt.w	800e1b0 <_dtoa_r+0x728>
 800df14:	4b45      	ldr	r3, [pc, #276]	; (800e02c <_dtoa_r+0x5a4>)
 800df16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800df1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800df22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800df24:	2b00      	cmp	r3, #0
 800df26:	f280 80db 	bge.w	800e0e0 <_dtoa_r+0x658>
 800df2a:	9b08      	ldr	r3, [sp, #32]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f300 80d7 	bgt.w	800e0e0 <_dtoa_r+0x658>
 800df32:	f040 8272 	bne.w	800e41a <_dtoa_r+0x992>
 800df36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df3a:	2200      	movs	r2, #0
 800df3c:	4b40      	ldr	r3, [pc, #256]	; (800e040 <_dtoa_r+0x5b8>)
 800df3e:	f7f2 facb 	bl	80004d8 <__aeabi_dmul>
 800df42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df46:	f7f2 fd4d 	bl	80009e4 <__aeabi_dcmpge>
 800df4a:	9c08      	ldr	r4, [sp, #32]
 800df4c:	4626      	mov	r6, r4
 800df4e:	2800      	cmp	r0, #0
 800df50:	f040 8248 	bne.w	800e3e4 <_dtoa_r+0x95c>
 800df54:	2331      	movs	r3, #49	; 0x31
 800df56:	9f03      	ldr	r7, [sp, #12]
 800df58:	f10a 0a01 	add.w	sl, sl, #1
 800df5c:	f807 3b01 	strb.w	r3, [r7], #1
 800df60:	e244      	b.n	800e3ec <_dtoa_r+0x964>
 800df62:	07e2      	lsls	r2, r4, #31
 800df64:	d505      	bpl.n	800df72 <_dtoa_r+0x4ea>
 800df66:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df6a:	f7f2 fab5 	bl	80004d8 <__aeabi_dmul>
 800df6e:	2301      	movs	r3, #1
 800df70:	3701      	adds	r7, #1
 800df72:	1064      	asrs	r4, r4, #1
 800df74:	3608      	adds	r6, #8
 800df76:	e76d      	b.n	800de54 <_dtoa_r+0x3cc>
 800df78:	2702      	movs	r7, #2
 800df7a:	e770      	b.n	800de5e <_dtoa_r+0x3d6>
 800df7c:	46d0      	mov	r8, sl
 800df7e:	9c08      	ldr	r4, [sp, #32]
 800df80:	e78f      	b.n	800dea2 <_dtoa_r+0x41a>
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	4b29      	ldr	r3, [pc, #164]	; (800e02c <_dtoa_r+0x5a4>)
 800df86:	4421      	add	r1, r4
 800df88:	9112      	str	r1, [sp, #72]	; 0x48
 800df8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800df94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df98:	2900      	cmp	r1, #0
 800df9a:	d055      	beq.n	800e048 <_dtoa_r+0x5c0>
 800df9c:	2000      	movs	r0, #0
 800df9e:	4929      	ldr	r1, [pc, #164]	; (800e044 <_dtoa_r+0x5bc>)
 800dfa0:	f7f2 fbc4 	bl	800072c <__aeabi_ddiv>
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	4632      	mov	r2, r6
 800dfa8:	f7f2 f8de 	bl	8000168 <__aeabi_dsub>
 800dfac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dfb0:	9f03      	ldr	r7, [sp, #12]
 800dfb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfb6:	f7f2 fd3f 	bl	8000a38 <__aeabi_d2iz>
 800dfba:	4604      	mov	r4, r0
 800dfbc:	f7f2 fa22 	bl	8000404 <__aeabi_i2d>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfc8:	f7f2 f8ce 	bl	8000168 <__aeabi_dsub>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	3430      	adds	r4, #48	; 0x30
 800dfd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfda:	f807 4b01 	strb.w	r4, [r7], #1
 800dfde:	f7f2 fced 	bl	80009bc <__aeabi_dcmplt>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d174      	bne.n	800e0d0 <_dtoa_r+0x648>
 800dfe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfea:	2000      	movs	r0, #0
 800dfec:	4911      	ldr	r1, [pc, #68]	; (800e034 <_dtoa_r+0x5ac>)
 800dfee:	f7f2 f8bb 	bl	8000168 <__aeabi_dsub>
 800dff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dff6:	f7f2 fce1 	bl	80009bc <__aeabi_dcmplt>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	f040 80b7 	bne.w	800e16e <_dtoa_r+0x6e6>
 800e000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e002:	429f      	cmp	r7, r3
 800e004:	f43f af7a 	beq.w	800defc <_dtoa_r+0x474>
 800e008:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e00c:	2200      	movs	r2, #0
 800e00e:	4b0a      	ldr	r3, [pc, #40]	; (800e038 <_dtoa_r+0x5b0>)
 800e010:	f7f2 fa62 	bl	80004d8 <__aeabi_dmul>
 800e014:	2200      	movs	r2, #0
 800e016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e01e:	4b06      	ldr	r3, [pc, #24]	; (800e038 <_dtoa_r+0x5b0>)
 800e020:	f7f2 fa5a 	bl	80004d8 <__aeabi_dmul>
 800e024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e028:	e7c3      	b.n	800dfb2 <_dtoa_r+0x52a>
 800e02a:	bf00      	nop
 800e02c:	08010ba8 	.word	0x08010ba8
 800e030:	08010b80 	.word	0x08010b80
 800e034:	3ff00000 	.word	0x3ff00000
 800e038:	40240000 	.word	0x40240000
 800e03c:	401c0000 	.word	0x401c0000
 800e040:	40140000 	.word	0x40140000
 800e044:	3fe00000 	.word	0x3fe00000
 800e048:	4630      	mov	r0, r6
 800e04a:	4639      	mov	r1, r7
 800e04c:	f7f2 fa44 	bl	80004d8 <__aeabi_dmul>
 800e050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e052:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e056:	9c03      	ldr	r4, [sp, #12]
 800e058:	9314      	str	r3, [sp, #80]	; 0x50
 800e05a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e05e:	f7f2 fceb 	bl	8000a38 <__aeabi_d2iz>
 800e062:	9015      	str	r0, [sp, #84]	; 0x54
 800e064:	f7f2 f9ce 	bl	8000404 <__aeabi_i2d>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e070:	f7f2 f87a 	bl	8000168 <__aeabi_dsub>
 800e074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e076:	4606      	mov	r6, r0
 800e078:	3330      	adds	r3, #48	; 0x30
 800e07a:	f804 3b01 	strb.w	r3, [r4], #1
 800e07e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e080:	460f      	mov	r7, r1
 800e082:	429c      	cmp	r4, r3
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	d124      	bne.n	800e0d4 <_dtoa_r+0x64c>
 800e08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e08e:	4bb0      	ldr	r3, [pc, #704]	; (800e350 <_dtoa_r+0x8c8>)
 800e090:	f7f2 f86c 	bl	800016c <__adddf3>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f2 fcac 	bl	80009f8 <__aeabi_dcmpgt>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d163      	bne.n	800e16c <_dtoa_r+0x6e4>
 800e0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	49a9      	ldr	r1, [pc, #676]	; (800e350 <_dtoa_r+0x8c8>)
 800e0ac:	f7f2 f85c 	bl	8000168 <__aeabi_dsub>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	4639      	mov	r1, r7
 800e0b8:	f7f2 fc80 	bl	80009bc <__aeabi_dcmplt>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f43f af1d 	beq.w	800defc <_dtoa_r+0x474>
 800e0c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e0c4:	1e7b      	subs	r3, r7, #1
 800e0c6:	9314      	str	r3, [sp, #80]	; 0x50
 800e0c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e0cc:	2b30      	cmp	r3, #48	; 0x30
 800e0ce:	d0f8      	beq.n	800e0c2 <_dtoa_r+0x63a>
 800e0d0:	46c2      	mov	sl, r8
 800e0d2:	e03b      	b.n	800e14c <_dtoa_r+0x6c4>
 800e0d4:	4b9f      	ldr	r3, [pc, #636]	; (800e354 <_dtoa_r+0x8cc>)
 800e0d6:	f7f2 f9ff 	bl	80004d8 <__aeabi_dmul>
 800e0da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0de:	e7bc      	b.n	800e05a <_dtoa_r+0x5d2>
 800e0e0:	9f03      	ldr	r7, [sp, #12]
 800e0e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e0e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fb1d 	bl	800072c <__aeabi_ddiv>
 800e0f2:	f7f2 fca1 	bl	8000a38 <__aeabi_d2iz>
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	f7f2 f984 	bl	8000404 <__aeabi_i2d>
 800e0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e100:	f7f2 f9ea 	bl	80004d8 <__aeabi_dmul>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4640      	mov	r0, r8
 800e10a:	4649      	mov	r1, r9
 800e10c:	f7f2 f82c 	bl	8000168 <__aeabi_dsub>
 800e110:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e114:	f807 6b01 	strb.w	r6, [r7], #1
 800e118:	9e03      	ldr	r6, [sp, #12]
 800e11a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e11e:	1bbe      	subs	r6, r7, r6
 800e120:	45b4      	cmp	ip, r6
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	d136      	bne.n	800e196 <_dtoa_r+0x70e>
 800e128:	f7f2 f820 	bl	800016c <__adddf3>
 800e12c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e130:	4680      	mov	r8, r0
 800e132:	4689      	mov	r9, r1
 800e134:	f7f2 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 800e138:	bb58      	cbnz	r0, 800e192 <_dtoa_r+0x70a>
 800e13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e13e:	4640      	mov	r0, r8
 800e140:	4649      	mov	r1, r9
 800e142:	f7f2 fc31 	bl	80009a8 <__aeabi_dcmpeq>
 800e146:	b108      	cbz	r0, 800e14c <_dtoa_r+0x6c4>
 800e148:	07e1      	lsls	r1, r4, #31
 800e14a:	d422      	bmi.n	800e192 <_dtoa_r+0x70a>
 800e14c:	4628      	mov	r0, r5
 800e14e:	4659      	mov	r1, fp
 800e150:	f000 fe5a 	bl	800ee08 <_Bfree>
 800e154:	2300      	movs	r3, #0
 800e156:	703b      	strb	r3, [r7, #0]
 800e158:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e15a:	f10a 0001 	add.w	r0, sl, #1
 800e15e:	6018      	str	r0, [r3, #0]
 800e160:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e162:	2b00      	cmp	r3, #0
 800e164:	f43f acde 	beq.w	800db24 <_dtoa_r+0x9c>
 800e168:	601f      	str	r7, [r3, #0]
 800e16a:	e4db      	b.n	800db24 <_dtoa_r+0x9c>
 800e16c:	4627      	mov	r7, r4
 800e16e:	463b      	mov	r3, r7
 800e170:	461f      	mov	r7, r3
 800e172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e176:	2a39      	cmp	r2, #57	; 0x39
 800e178:	d107      	bne.n	800e18a <_dtoa_r+0x702>
 800e17a:	9a03      	ldr	r2, [sp, #12]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d1f7      	bne.n	800e170 <_dtoa_r+0x6e8>
 800e180:	2230      	movs	r2, #48	; 0x30
 800e182:	9903      	ldr	r1, [sp, #12]
 800e184:	f108 0801 	add.w	r8, r8, #1
 800e188:	700a      	strb	r2, [r1, #0]
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	3201      	adds	r2, #1
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e79e      	b.n	800e0d0 <_dtoa_r+0x648>
 800e192:	46d0      	mov	r8, sl
 800e194:	e7eb      	b.n	800e16e <_dtoa_r+0x6e6>
 800e196:	2200      	movs	r2, #0
 800e198:	4b6e      	ldr	r3, [pc, #440]	; (800e354 <_dtoa_r+0x8cc>)
 800e19a:	f7f2 f99d 	bl	80004d8 <__aeabi_dmul>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4680      	mov	r8, r0
 800e1a4:	4689      	mov	r9, r1
 800e1a6:	f7f2 fbff 	bl	80009a8 <__aeabi_dcmpeq>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d09b      	beq.n	800e0e6 <_dtoa_r+0x65e>
 800e1ae:	e7cd      	b.n	800e14c <_dtoa_r+0x6c4>
 800e1b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	f000 80d0 	beq.w	800e358 <_dtoa_r+0x8d0>
 800e1b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e1ba:	2a01      	cmp	r2, #1
 800e1bc:	f300 80ae 	bgt.w	800e31c <_dtoa_r+0x894>
 800e1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	f000 80a6 	beq.w	800e314 <_dtoa_r+0x88c>
 800e1c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e1ce:	9f06      	ldr	r7, [sp, #24]
 800e1d0:	9a06      	ldr	r2, [sp, #24]
 800e1d2:	2101      	movs	r1, #1
 800e1d4:	441a      	add	r2, r3
 800e1d6:	9206      	str	r2, [sp, #24]
 800e1d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1da:	4628      	mov	r0, r5
 800e1dc:	441a      	add	r2, r3
 800e1de:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e0:	f000 ff12 	bl	800f008 <__i2b>
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	2f00      	cmp	r7, #0
 800e1e8:	dd0c      	ble.n	800e204 <_dtoa_r+0x77c>
 800e1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dd09      	ble.n	800e204 <_dtoa_r+0x77c>
 800e1f0:	42bb      	cmp	r3, r7
 800e1f2:	bfa8      	it	ge
 800e1f4:	463b      	movge	r3, r7
 800e1f6:	9a06      	ldr	r2, [sp, #24]
 800e1f8:	1aff      	subs	r7, r7, r3
 800e1fa:	1ad2      	subs	r2, r2, r3
 800e1fc:	9206      	str	r2, [sp, #24]
 800e1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	9309      	str	r3, [sp, #36]	; 0x24
 800e204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e206:	b1f3      	cbz	r3, 800e246 <_dtoa_r+0x7be>
 800e208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f000 80a8 	beq.w	800e360 <_dtoa_r+0x8d8>
 800e210:	2c00      	cmp	r4, #0
 800e212:	dd10      	ble.n	800e236 <_dtoa_r+0x7ae>
 800e214:	4631      	mov	r1, r6
 800e216:	4622      	mov	r2, r4
 800e218:	4628      	mov	r0, r5
 800e21a:	f000 ffb3 	bl	800f184 <__pow5mult>
 800e21e:	465a      	mov	r2, fp
 800e220:	4601      	mov	r1, r0
 800e222:	4606      	mov	r6, r0
 800e224:	4628      	mov	r0, r5
 800e226:	f000 ff05 	bl	800f034 <__multiply>
 800e22a:	4680      	mov	r8, r0
 800e22c:	4659      	mov	r1, fp
 800e22e:	4628      	mov	r0, r5
 800e230:	f000 fdea 	bl	800ee08 <_Bfree>
 800e234:	46c3      	mov	fp, r8
 800e236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e238:	1b1a      	subs	r2, r3, r4
 800e23a:	d004      	beq.n	800e246 <_dtoa_r+0x7be>
 800e23c:	4659      	mov	r1, fp
 800e23e:	4628      	mov	r0, r5
 800e240:	f000 ffa0 	bl	800f184 <__pow5mult>
 800e244:	4683      	mov	fp, r0
 800e246:	2101      	movs	r1, #1
 800e248:	4628      	mov	r0, r5
 800e24a:	f000 fedd 	bl	800f008 <__i2b>
 800e24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e250:	4604      	mov	r4, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	f340 8086 	ble.w	800e364 <_dtoa_r+0x8dc>
 800e258:	461a      	mov	r2, r3
 800e25a:	4601      	mov	r1, r0
 800e25c:	4628      	mov	r0, r5
 800e25e:	f000 ff91 	bl	800f184 <__pow5mult>
 800e262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e264:	4604      	mov	r4, r0
 800e266:	2b01      	cmp	r3, #1
 800e268:	dd7f      	ble.n	800e36a <_dtoa_r+0x8e2>
 800e26a:	f04f 0800 	mov.w	r8, #0
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e274:	6918      	ldr	r0, [r3, #16]
 800e276:	f000 fe79 	bl	800ef6c <__hi0bits>
 800e27a:	f1c0 0020 	rsb	r0, r0, #32
 800e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e280:	4418      	add	r0, r3
 800e282:	f010 001f 	ands.w	r0, r0, #31
 800e286:	f000 8092 	beq.w	800e3ae <_dtoa_r+0x926>
 800e28a:	f1c0 0320 	rsb	r3, r0, #32
 800e28e:	2b04      	cmp	r3, #4
 800e290:	f340 808a 	ble.w	800e3a8 <_dtoa_r+0x920>
 800e294:	f1c0 001c 	rsb	r0, r0, #28
 800e298:	9b06      	ldr	r3, [sp, #24]
 800e29a:	4407      	add	r7, r0
 800e29c:	4403      	add	r3, r0
 800e29e:	9306      	str	r3, [sp, #24]
 800e2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a2:	4403      	add	r3, r0
 800e2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2a6:	9b06      	ldr	r3, [sp, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	dd05      	ble.n	800e2b8 <_dtoa_r+0x830>
 800e2ac:	4659      	mov	r1, fp
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	f000 ffc1 	bl	800f238 <__lshift>
 800e2b6:	4683      	mov	fp, r0
 800e2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	dd05      	ble.n	800e2ca <_dtoa_r+0x842>
 800e2be:	4621      	mov	r1, r4
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f000 ffb8 	bl	800f238 <__lshift>
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d070      	beq.n	800e3b2 <_dtoa_r+0x92a>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4658      	mov	r0, fp
 800e2d4:	f001 f820 	bl	800f318 <__mcmp>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	da6a      	bge.n	800e3b2 <_dtoa_r+0x92a>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4659      	mov	r1, fp
 800e2e0:	220a      	movs	r2, #10
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 fdb2 	bl	800ee4c <__multadd>
 800e2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2ea:	4683      	mov	fp, r0
 800e2ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8194 	beq.w	800e61e <_dtoa_r+0xb96>
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	220a      	movs	r2, #10
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f000 fda5 	bl	800ee4c <__multadd>
 800e302:	f1b9 0f00 	cmp.w	r9, #0
 800e306:	4606      	mov	r6, r0
 800e308:	f300 8093 	bgt.w	800e432 <_dtoa_r+0x9aa>
 800e30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e30e:	2b02      	cmp	r3, #2
 800e310:	dc57      	bgt.n	800e3c2 <_dtoa_r+0x93a>
 800e312:	e08e      	b.n	800e432 <_dtoa_r+0x9aa>
 800e314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e31a:	e757      	b.n	800e1cc <_dtoa_r+0x744>
 800e31c:	9b08      	ldr	r3, [sp, #32]
 800e31e:	1e5c      	subs	r4, r3, #1
 800e320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e322:	42a3      	cmp	r3, r4
 800e324:	bfb7      	itett	lt
 800e326:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e328:	1b1c      	subge	r4, r3, r4
 800e32a:	1ae2      	sublt	r2, r4, r3
 800e32c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e32e:	bfbe      	ittt	lt
 800e330:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e332:	189b      	addlt	r3, r3, r2
 800e334:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e336:	9b08      	ldr	r3, [sp, #32]
 800e338:	bfb8      	it	lt
 800e33a:	2400      	movlt	r4, #0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfbb      	ittet	lt
 800e340:	9b06      	ldrlt	r3, [sp, #24]
 800e342:	9a08      	ldrlt	r2, [sp, #32]
 800e344:	9f06      	ldrge	r7, [sp, #24]
 800e346:	1a9f      	sublt	r7, r3, r2
 800e348:	bfac      	ite	ge
 800e34a:	9b08      	ldrge	r3, [sp, #32]
 800e34c:	2300      	movlt	r3, #0
 800e34e:	e73f      	b.n	800e1d0 <_dtoa_r+0x748>
 800e350:	3fe00000 	.word	0x3fe00000
 800e354:	40240000 	.word	0x40240000
 800e358:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e35a:	9f06      	ldr	r7, [sp, #24]
 800e35c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e35e:	e742      	b.n	800e1e6 <_dtoa_r+0x75e>
 800e360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e362:	e76b      	b.n	800e23c <_dtoa_r+0x7b4>
 800e364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e366:	2b01      	cmp	r3, #1
 800e368:	dc19      	bgt.n	800e39e <_dtoa_r+0x916>
 800e36a:	9b04      	ldr	r3, [sp, #16]
 800e36c:	b9bb      	cbnz	r3, 800e39e <_dtoa_r+0x916>
 800e36e:	9b05      	ldr	r3, [sp, #20]
 800e370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e374:	b99b      	cbnz	r3, 800e39e <_dtoa_r+0x916>
 800e376:	9b05      	ldr	r3, [sp, #20]
 800e378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e37c:	0d1b      	lsrs	r3, r3, #20
 800e37e:	051b      	lsls	r3, r3, #20
 800e380:	b183      	cbz	r3, 800e3a4 <_dtoa_r+0x91c>
 800e382:	f04f 0801 	mov.w	r8, #1
 800e386:	9b06      	ldr	r3, [sp, #24]
 800e388:	3301      	adds	r3, #1
 800e38a:	9306      	str	r3, [sp, #24]
 800e38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e38e:	3301      	adds	r3, #1
 800e390:	9309      	str	r3, [sp, #36]	; 0x24
 800e392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e394:	2b00      	cmp	r3, #0
 800e396:	f47f af6a 	bne.w	800e26e <_dtoa_r+0x7e6>
 800e39a:	2001      	movs	r0, #1
 800e39c:	e76f      	b.n	800e27e <_dtoa_r+0x7f6>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	e7f6      	b.n	800e392 <_dtoa_r+0x90a>
 800e3a4:	4698      	mov	r8, r3
 800e3a6:	e7f4      	b.n	800e392 <_dtoa_r+0x90a>
 800e3a8:	f43f af7d 	beq.w	800e2a6 <_dtoa_r+0x81e>
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	301c      	adds	r0, #28
 800e3b0:	e772      	b.n	800e298 <_dtoa_r+0x810>
 800e3b2:	9b08      	ldr	r3, [sp, #32]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	dc36      	bgt.n	800e426 <_dtoa_r+0x99e>
 800e3b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	dd33      	ble.n	800e426 <_dtoa_r+0x99e>
 800e3be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e3c2:	f1b9 0f00 	cmp.w	r9, #0
 800e3c6:	d10d      	bne.n	800e3e4 <_dtoa_r+0x95c>
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	2205      	movs	r2, #5
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f000 fd3c 	bl	800ee4c <__multadd>
 800e3d4:	4601      	mov	r1, r0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4658      	mov	r0, fp
 800e3da:	f000 ff9d 	bl	800f318 <__mcmp>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f73f adb8 	bgt.w	800df54 <_dtoa_r+0x4cc>
 800e3e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e3e6:	9f03      	ldr	r7, [sp, #12]
 800e3e8:	ea6f 0a03 	mvn.w	sl, r3
 800e3ec:	f04f 0800 	mov.w	r8, #0
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 fd08 	bl	800ee08 <_Bfree>
 800e3f8:	2e00      	cmp	r6, #0
 800e3fa:	f43f aea7 	beq.w	800e14c <_dtoa_r+0x6c4>
 800e3fe:	f1b8 0f00 	cmp.w	r8, #0
 800e402:	d005      	beq.n	800e410 <_dtoa_r+0x988>
 800e404:	45b0      	cmp	r8, r6
 800e406:	d003      	beq.n	800e410 <_dtoa_r+0x988>
 800e408:	4641      	mov	r1, r8
 800e40a:	4628      	mov	r0, r5
 800e40c:	f000 fcfc 	bl	800ee08 <_Bfree>
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	f000 fcf8 	bl	800ee08 <_Bfree>
 800e418:	e698      	b.n	800e14c <_dtoa_r+0x6c4>
 800e41a:	2400      	movs	r4, #0
 800e41c:	4626      	mov	r6, r4
 800e41e:	e7e1      	b.n	800e3e4 <_dtoa_r+0x95c>
 800e420:	46c2      	mov	sl, r8
 800e422:	4626      	mov	r6, r4
 800e424:	e596      	b.n	800df54 <_dtoa_r+0x4cc>
 800e426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 80fd 	beq.w	800e62c <_dtoa_r+0xba4>
 800e432:	2f00      	cmp	r7, #0
 800e434:	dd05      	ble.n	800e442 <_dtoa_r+0x9ba>
 800e436:	4631      	mov	r1, r6
 800e438:	463a      	mov	r2, r7
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 fefc 	bl	800f238 <__lshift>
 800e440:	4606      	mov	r6, r0
 800e442:	f1b8 0f00 	cmp.w	r8, #0
 800e446:	d05c      	beq.n	800e502 <_dtoa_r+0xa7a>
 800e448:	4628      	mov	r0, r5
 800e44a:	6871      	ldr	r1, [r6, #4]
 800e44c:	f000 fc9c 	bl	800ed88 <_Balloc>
 800e450:	4607      	mov	r7, r0
 800e452:	b928      	cbnz	r0, 800e460 <_dtoa_r+0x9d8>
 800e454:	4602      	mov	r2, r0
 800e456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e45a:	4b7f      	ldr	r3, [pc, #508]	; (800e658 <_dtoa_r+0xbd0>)
 800e45c:	f7ff bb28 	b.w	800dab0 <_dtoa_r+0x28>
 800e460:	6932      	ldr	r2, [r6, #16]
 800e462:	f106 010c 	add.w	r1, r6, #12
 800e466:	3202      	adds	r2, #2
 800e468:	0092      	lsls	r2, r2, #2
 800e46a:	300c      	adds	r0, #12
 800e46c:	f7fd fd14 	bl	800be98 <memcpy>
 800e470:	2201      	movs	r2, #1
 800e472:	4639      	mov	r1, r7
 800e474:	4628      	mov	r0, r5
 800e476:	f000 fedf 	bl	800f238 <__lshift>
 800e47a:	46b0      	mov	r8, r6
 800e47c:	4606      	mov	r6, r0
 800e47e:	9b03      	ldr	r3, [sp, #12]
 800e480:	3301      	adds	r3, #1
 800e482:	9308      	str	r3, [sp, #32]
 800e484:	9b03      	ldr	r3, [sp, #12]
 800e486:	444b      	add	r3, r9
 800e488:	930a      	str	r3, [sp, #40]	; 0x28
 800e48a:	9b04      	ldr	r3, [sp, #16]
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	9309      	str	r3, [sp, #36]	; 0x24
 800e492:	9b08      	ldr	r3, [sp, #32]
 800e494:	4621      	mov	r1, r4
 800e496:	3b01      	subs	r3, #1
 800e498:	4658      	mov	r0, fp
 800e49a:	9304      	str	r3, [sp, #16]
 800e49c:	f7ff fa68 	bl	800d970 <quorem>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	4641      	mov	r1, r8
 800e4a4:	3330      	adds	r3, #48	; 0x30
 800e4a6:	9006      	str	r0, [sp, #24]
 800e4a8:	4658      	mov	r0, fp
 800e4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ac:	f000 ff34 	bl	800f318 <__mcmp>
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	4681      	mov	r9, r0
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f000 ff4a 	bl	800f350 <__mdiff>
 800e4bc:	68c2      	ldr	r2, [r0, #12]
 800e4be:	4607      	mov	r7, r0
 800e4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c2:	bb02      	cbnz	r2, 800e506 <_dtoa_r+0xa7e>
 800e4c4:	4601      	mov	r1, r0
 800e4c6:	4658      	mov	r0, fp
 800e4c8:	f000 ff26 	bl	800f318 <__mcmp>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e4d8:	f000 fc96 	bl	800ee08 <_Bfree>
 800e4dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4e0:	9f08      	ldr	r7, [sp, #32]
 800e4e2:	ea43 0102 	orr.w	r1, r3, r2
 800e4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e8:	430b      	orrs	r3, r1
 800e4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ec:	d10d      	bne.n	800e50a <_dtoa_r+0xa82>
 800e4ee:	2b39      	cmp	r3, #57	; 0x39
 800e4f0:	d029      	beq.n	800e546 <_dtoa_r+0xabe>
 800e4f2:	f1b9 0f00 	cmp.w	r9, #0
 800e4f6:	dd01      	ble.n	800e4fc <_dtoa_r+0xa74>
 800e4f8:	9b06      	ldr	r3, [sp, #24]
 800e4fa:	3331      	adds	r3, #49	; 0x31
 800e4fc:	9a04      	ldr	r2, [sp, #16]
 800e4fe:	7013      	strb	r3, [r2, #0]
 800e500:	e776      	b.n	800e3f0 <_dtoa_r+0x968>
 800e502:	4630      	mov	r0, r6
 800e504:	e7b9      	b.n	800e47a <_dtoa_r+0x9f2>
 800e506:	2201      	movs	r2, #1
 800e508:	e7e2      	b.n	800e4d0 <_dtoa_r+0xa48>
 800e50a:	f1b9 0f00 	cmp.w	r9, #0
 800e50e:	db06      	blt.n	800e51e <_dtoa_r+0xa96>
 800e510:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e512:	ea41 0909 	orr.w	r9, r1, r9
 800e516:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e518:	ea59 0101 	orrs.w	r1, r9, r1
 800e51c:	d120      	bne.n	800e560 <_dtoa_r+0xad8>
 800e51e:	2a00      	cmp	r2, #0
 800e520:	ddec      	ble.n	800e4fc <_dtoa_r+0xa74>
 800e522:	4659      	mov	r1, fp
 800e524:	2201      	movs	r2, #1
 800e526:	4628      	mov	r0, r5
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	f000 fe85 	bl	800f238 <__lshift>
 800e52e:	4621      	mov	r1, r4
 800e530:	4683      	mov	fp, r0
 800e532:	f000 fef1 	bl	800f318 <__mcmp>
 800e536:	2800      	cmp	r0, #0
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	dc02      	bgt.n	800e542 <_dtoa_r+0xaba>
 800e53c:	d1de      	bne.n	800e4fc <_dtoa_r+0xa74>
 800e53e:	07da      	lsls	r2, r3, #31
 800e540:	d5dc      	bpl.n	800e4fc <_dtoa_r+0xa74>
 800e542:	2b39      	cmp	r3, #57	; 0x39
 800e544:	d1d8      	bne.n	800e4f8 <_dtoa_r+0xa70>
 800e546:	2339      	movs	r3, #57	; 0x39
 800e548:	9a04      	ldr	r2, [sp, #16]
 800e54a:	7013      	strb	r3, [r2, #0]
 800e54c:	463b      	mov	r3, r7
 800e54e:	461f      	mov	r7, r3
 800e550:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e554:	3b01      	subs	r3, #1
 800e556:	2a39      	cmp	r2, #57	; 0x39
 800e558:	d050      	beq.n	800e5fc <_dtoa_r+0xb74>
 800e55a:	3201      	adds	r2, #1
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	e747      	b.n	800e3f0 <_dtoa_r+0x968>
 800e560:	2a00      	cmp	r2, #0
 800e562:	dd03      	ble.n	800e56c <_dtoa_r+0xae4>
 800e564:	2b39      	cmp	r3, #57	; 0x39
 800e566:	d0ee      	beq.n	800e546 <_dtoa_r+0xabe>
 800e568:	3301      	adds	r3, #1
 800e56a:	e7c7      	b.n	800e4fc <_dtoa_r+0xa74>
 800e56c:	9a08      	ldr	r2, [sp, #32]
 800e56e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e570:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e574:	428a      	cmp	r2, r1
 800e576:	d02a      	beq.n	800e5ce <_dtoa_r+0xb46>
 800e578:	4659      	mov	r1, fp
 800e57a:	2300      	movs	r3, #0
 800e57c:	220a      	movs	r2, #10
 800e57e:	4628      	mov	r0, r5
 800e580:	f000 fc64 	bl	800ee4c <__multadd>
 800e584:	45b0      	cmp	r8, r6
 800e586:	4683      	mov	fp, r0
 800e588:	f04f 0300 	mov.w	r3, #0
 800e58c:	f04f 020a 	mov.w	r2, #10
 800e590:	4641      	mov	r1, r8
 800e592:	4628      	mov	r0, r5
 800e594:	d107      	bne.n	800e5a6 <_dtoa_r+0xb1e>
 800e596:	f000 fc59 	bl	800ee4c <__multadd>
 800e59a:	4680      	mov	r8, r0
 800e59c:	4606      	mov	r6, r0
 800e59e:	9b08      	ldr	r3, [sp, #32]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	9308      	str	r3, [sp, #32]
 800e5a4:	e775      	b.n	800e492 <_dtoa_r+0xa0a>
 800e5a6:	f000 fc51 	bl	800ee4c <__multadd>
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	4680      	mov	r8, r0
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	220a      	movs	r2, #10
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f000 fc4a 	bl	800ee4c <__multadd>
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	e7f0      	b.n	800e59e <_dtoa_r+0xb16>
 800e5bc:	f1b9 0f00 	cmp.w	r9, #0
 800e5c0:	bfcc      	ite	gt
 800e5c2:	464f      	movgt	r7, r9
 800e5c4:	2701      	movle	r7, #1
 800e5c6:	f04f 0800 	mov.w	r8, #0
 800e5ca:	9a03      	ldr	r2, [sp, #12]
 800e5cc:	4417      	add	r7, r2
 800e5ce:	4659      	mov	r1, fp
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	9308      	str	r3, [sp, #32]
 800e5d6:	f000 fe2f 	bl	800f238 <__lshift>
 800e5da:	4621      	mov	r1, r4
 800e5dc:	4683      	mov	fp, r0
 800e5de:	f000 fe9b 	bl	800f318 <__mcmp>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	dcb2      	bgt.n	800e54c <_dtoa_r+0xac4>
 800e5e6:	d102      	bne.n	800e5ee <_dtoa_r+0xb66>
 800e5e8:	9b08      	ldr	r3, [sp, #32]
 800e5ea:	07db      	lsls	r3, r3, #31
 800e5ec:	d4ae      	bmi.n	800e54c <_dtoa_r+0xac4>
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	461f      	mov	r7, r3
 800e5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5f6:	2a30      	cmp	r2, #48	; 0x30
 800e5f8:	d0fa      	beq.n	800e5f0 <_dtoa_r+0xb68>
 800e5fa:	e6f9      	b.n	800e3f0 <_dtoa_r+0x968>
 800e5fc:	9a03      	ldr	r2, [sp, #12]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d1a5      	bne.n	800e54e <_dtoa_r+0xac6>
 800e602:	2331      	movs	r3, #49	; 0x31
 800e604:	f10a 0a01 	add.w	sl, sl, #1
 800e608:	e779      	b.n	800e4fe <_dtoa_r+0xa76>
 800e60a:	4b14      	ldr	r3, [pc, #80]	; (800e65c <_dtoa_r+0xbd4>)
 800e60c:	f7ff baa8 	b.w	800db60 <_dtoa_r+0xd8>
 800e610:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e612:	2b00      	cmp	r3, #0
 800e614:	f47f aa81 	bne.w	800db1a <_dtoa_r+0x92>
 800e618:	4b11      	ldr	r3, [pc, #68]	; (800e660 <_dtoa_r+0xbd8>)
 800e61a:	f7ff baa1 	b.w	800db60 <_dtoa_r+0xd8>
 800e61e:	f1b9 0f00 	cmp.w	r9, #0
 800e622:	dc03      	bgt.n	800e62c <_dtoa_r+0xba4>
 800e624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e626:	2b02      	cmp	r3, #2
 800e628:	f73f aecb 	bgt.w	800e3c2 <_dtoa_r+0x93a>
 800e62c:	9f03      	ldr	r7, [sp, #12]
 800e62e:	4621      	mov	r1, r4
 800e630:	4658      	mov	r0, fp
 800e632:	f7ff f99d 	bl	800d970 <quorem>
 800e636:	9a03      	ldr	r2, [sp, #12]
 800e638:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e63c:	f807 3b01 	strb.w	r3, [r7], #1
 800e640:	1aba      	subs	r2, r7, r2
 800e642:	4591      	cmp	r9, r2
 800e644:	ddba      	ble.n	800e5bc <_dtoa_r+0xb34>
 800e646:	4659      	mov	r1, fp
 800e648:	2300      	movs	r3, #0
 800e64a:	220a      	movs	r2, #10
 800e64c:	4628      	mov	r0, r5
 800e64e:	f000 fbfd 	bl	800ee4c <__multadd>
 800e652:	4683      	mov	fp, r0
 800e654:	e7eb      	b.n	800e62e <_dtoa_r+0xba6>
 800e656:	bf00      	nop
 800e658:	08010a98 	.word	0x08010a98
 800e65c:	08010898 	.word	0x08010898
 800e660:	08010a19 	.word	0x08010a19

0800e664 <rshift>:
 800e664:	6903      	ldr	r3, [r0, #16]
 800e666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e66a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e66e:	f100 0414 	add.w	r4, r0, #20
 800e672:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e676:	dd46      	ble.n	800e706 <rshift+0xa2>
 800e678:	f011 011f 	ands.w	r1, r1, #31
 800e67c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e680:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e684:	d10c      	bne.n	800e6a0 <rshift+0x3c>
 800e686:	4629      	mov	r1, r5
 800e688:	f100 0710 	add.w	r7, r0, #16
 800e68c:	42b1      	cmp	r1, r6
 800e68e:	d335      	bcc.n	800e6fc <rshift+0x98>
 800e690:	1a9b      	subs	r3, r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	1eea      	subs	r2, r5, #3
 800e696:	4296      	cmp	r6, r2
 800e698:	bf38      	it	cc
 800e69a:	2300      	movcc	r3, #0
 800e69c:	4423      	add	r3, r4
 800e69e:	e015      	b.n	800e6cc <rshift+0x68>
 800e6a0:	46a1      	mov	r9, r4
 800e6a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6a6:	f1c1 0820 	rsb	r8, r1, #32
 800e6aa:	40cf      	lsrs	r7, r1
 800e6ac:	f105 0e04 	add.w	lr, r5, #4
 800e6b0:	4576      	cmp	r6, lr
 800e6b2:	46f4      	mov	ip, lr
 800e6b4:	d816      	bhi.n	800e6e4 <rshift+0x80>
 800e6b6:	1a9a      	subs	r2, r3, r2
 800e6b8:	0092      	lsls	r2, r2, #2
 800e6ba:	3a04      	subs	r2, #4
 800e6bc:	3501      	adds	r5, #1
 800e6be:	42ae      	cmp	r6, r5
 800e6c0:	bf38      	it	cc
 800e6c2:	2200      	movcc	r2, #0
 800e6c4:	18a3      	adds	r3, r4, r2
 800e6c6:	50a7      	str	r7, [r4, r2]
 800e6c8:	b107      	cbz	r7, 800e6cc <rshift+0x68>
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	eba3 0204 	sub.w	r2, r3, r4
 800e6d2:	bf08      	it	eq
 800e6d4:	2300      	moveq	r3, #0
 800e6d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6da:	6102      	str	r2, [r0, #16]
 800e6dc:	bf08      	it	eq
 800e6de:	6143      	streq	r3, [r0, #20]
 800e6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6e4:	f8dc c000 	ldr.w	ip, [ip]
 800e6e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6ec:	ea4c 0707 	orr.w	r7, ip, r7
 800e6f0:	f849 7b04 	str.w	r7, [r9], #4
 800e6f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6f8:	40cf      	lsrs	r7, r1
 800e6fa:	e7d9      	b.n	800e6b0 <rshift+0x4c>
 800e6fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800e700:	f847 cf04 	str.w	ip, [r7, #4]!
 800e704:	e7c2      	b.n	800e68c <rshift+0x28>
 800e706:	4623      	mov	r3, r4
 800e708:	e7e0      	b.n	800e6cc <rshift+0x68>

0800e70a <__hexdig_fun>:
 800e70a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e70e:	2b09      	cmp	r3, #9
 800e710:	d802      	bhi.n	800e718 <__hexdig_fun+0xe>
 800e712:	3820      	subs	r0, #32
 800e714:	b2c0      	uxtb	r0, r0
 800e716:	4770      	bx	lr
 800e718:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e71c:	2b05      	cmp	r3, #5
 800e71e:	d801      	bhi.n	800e724 <__hexdig_fun+0x1a>
 800e720:	3847      	subs	r0, #71	; 0x47
 800e722:	e7f7      	b.n	800e714 <__hexdig_fun+0xa>
 800e724:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e728:	2b05      	cmp	r3, #5
 800e72a:	d801      	bhi.n	800e730 <__hexdig_fun+0x26>
 800e72c:	3827      	subs	r0, #39	; 0x27
 800e72e:	e7f1      	b.n	800e714 <__hexdig_fun+0xa>
 800e730:	2000      	movs	r0, #0
 800e732:	4770      	bx	lr

0800e734 <__gethex>:
 800e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e738:	b08b      	sub	sp, #44	; 0x2c
 800e73a:	9305      	str	r3, [sp, #20]
 800e73c:	4bb2      	ldr	r3, [pc, #712]	; (800ea08 <__gethex+0x2d4>)
 800e73e:	9002      	str	r0, [sp, #8]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	468b      	mov	fp, r1
 800e744:	4618      	mov	r0, r3
 800e746:	4690      	mov	r8, r2
 800e748:	9303      	str	r3, [sp, #12]
 800e74a:	f7f1 fd01 	bl	8000150 <strlen>
 800e74e:	4682      	mov	sl, r0
 800e750:	9b03      	ldr	r3, [sp, #12]
 800e752:	f8db 2000 	ldr.w	r2, [fp]
 800e756:	4403      	add	r3, r0
 800e758:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e75c:	9306      	str	r3, [sp, #24]
 800e75e:	1c93      	adds	r3, r2, #2
 800e760:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e764:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e768:	32fe      	adds	r2, #254	; 0xfe
 800e76a:	18d1      	adds	r1, r2, r3
 800e76c:	461f      	mov	r7, r3
 800e76e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e772:	9101      	str	r1, [sp, #4]
 800e774:	2830      	cmp	r0, #48	; 0x30
 800e776:	d0f8      	beq.n	800e76a <__gethex+0x36>
 800e778:	f7ff ffc7 	bl	800e70a <__hexdig_fun>
 800e77c:	4604      	mov	r4, r0
 800e77e:	2800      	cmp	r0, #0
 800e780:	d13a      	bne.n	800e7f8 <__gethex+0xc4>
 800e782:	4652      	mov	r2, sl
 800e784:	4638      	mov	r0, r7
 800e786:	9903      	ldr	r1, [sp, #12]
 800e788:	f001 fa18 	bl	800fbbc <strncmp>
 800e78c:	4605      	mov	r5, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	d166      	bne.n	800e860 <__gethex+0x12c>
 800e792:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e796:	eb07 060a 	add.w	r6, r7, sl
 800e79a:	f7ff ffb6 	bl	800e70a <__hexdig_fun>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d060      	beq.n	800e864 <__gethex+0x130>
 800e7a2:	4633      	mov	r3, r6
 800e7a4:	7818      	ldrb	r0, [r3, #0]
 800e7a6:	461f      	mov	r7, r3
 800e7a8:	2830      	cmp	r0, #48	; 0x30
 800e7aa:	f103 0301 	add.w	r3, r3, #1
 800e7ae:	d0f9      	beq.n	800e7a4 <__gethex+0x70>
 800e7b0:	f7ff ffab 	bl	800e70a <__hexdig_fun>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	fab0 f480 	clz	r4, r0
 800e7ba:	4635      	mov	r5, r6
 800e7bc:	0964      	lsrs	r4, r4, #5
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	463a      	mov	r2, r7
 800e7c2:	4616      	mov	r6, r2
 800e7c4:	7830      	ldrb	r0, [r6, #0]
 800e7c6:	3201      	adds	r2, #1
 800e7c8:	f7ff ff9f 	bl	800e70a <__hexdig_fun>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d1f8      	bne.n	800e7c2 <__gethex+0x8e>
 800e7d0:	4652      	mov	r2, sl
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	9903      	ldr	r1, [sp, #12]
 800e7d6:	f001 f9f1 	bl	800fbbc <strncmp>
 800e7da:	b980      	cbnz	r0, 800e7fe <__gethex+0xca>
 800e7dc:	b94d      	cbnz	r5, 800e7f2 <__gethex+0xbe>
 800e7de:	eb06 050a 	add.w	r5, r6, sl
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4616      	mov	r6, r2
 800e7e6:	7830      	ldrb	r0, [r6, #0]
 800e7e8:	3201      	adds	r2, #1
 800e7ea:	f7ff ff8e 	bl	800e70a <__hexdig_fun>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d1f8      	bne.n	800e7e4 <__gethex+0xb0>
 800e7f2:	1bad      	subs	r5, r5, r6
 800e7f4:	00ad      	lsls	r5, r5, #2
 800e7f6:	e004      	b.n	800e802 <__gethex+0xce>
 800e7f8:	2400      	movs	r4, #0
 800e7fa:	4625      	mov	r5, r4
 800e7fc:	e7e0      	b.n	800e7c0 <__gethex+0x8c>
 800e7fe:	2d00      	cmp	r5, #0
 800e800:	d1f7      	bne.n	800e7f2 <__gethex+0xbe>
 800e802:	7833      	ldrb	r3, [r6, #0]
 800e804:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e808:	2b50      	cmp	r3, #80	; 0x50
 800e80a:	d139      	bne.n	800e880 <__gethex+0x14c>
 800e80c:	7873      	ldrb	r3, [r6, #1]
 800e80e:	2b2b      	cmp	r3, #43	; 0x2b
 800e810:	d02a      	beq.n	800e868 <__gethex+0x134>
 800e812:	2b2d      	cmp	r3, #45	; 0x2d
 800e814:	d02c      	beq.n	800e870 <__gethex+0x13c>
 800e816:	f04f 0900 	mov.w	r9, #0
 800e81a:	1c71      	adds	r1, r6, #1
 800e81c:	7808      	ldrb	r0, [r1, #0]
 800e81e:	f7ff ff74 	bl	800e70a <__hexdig_fun>
 800e822:	1e43      	subs	r3, r0, #1
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b18      	cmp	r3, #24
 800e828:	d82a      	bhi.n	800e880 <__gethex+0x14c>
 800e82a:	f1a0 0210 	sub.w	r2, r0, #16
 800e82e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e832:	f7ff ff6a 	bl	800e70a <__hexdig_fun>
 800e836:	1e43      	subs	r3, r0, #1
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b18      	cmp	r3, #24
 800e83c:	d91b      	bls.n	800e876 <__gethex+0x142>
 800e83e:	f1b9 0f00 	cmp.w	r9, #0
 800e842:	d000      	beq.n	800e846 <__gethex+0x112>
 800e844:	4252      	negs	r2, r2
 800e846:	4415      	add	r5, r2
 800e848:	f8cb 1000 	str.w	r1, [fp]
 800e84c:	b1d4      	cbz	r4, 800e884 <__gethex+0x150>
 800e84e:	9b01      	ldr	r3, [sp, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	bf14      	ite	ne
 800e854:	2700      	movne	r7, #0
 800e856:	2706      	moveq	r7, #6
 800e858:	4638      	mov	r0, r7
 800e85a:	b00b      	add	sp, #44	; 0x2c
 800e85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e860:	463e      	mov	r6, r7
 800e862:	4625      	mov	r5, r4
 800e864:	2401      	movs	r4, #1
 800e866:	e7cc      	b.n	800e802 <__gethex+0xce>
 800e868:	f04f 0900 	mov.w	r9, #0
 800e86c:	1cb1      	adds	r1, r6, #2
 800e86e:	e7d5      	b.n	800e81c <__gethex+0xe8>
 800e870:	f04f 0901 	mov.w	r9, #1
 800e874:	e7fa      	b.n	800e86c <__gethex+0x138>
 800e876:	230a      	movs	r3, #10
 800e878:	fb03 0202 	mla	r2, r3, r2, r0
 800e87c:	3a10      	subs	r2, #16
 800e87e:	e7d6      	b.n	800e82e <__gethex+0xfa>
 800e880:	4631      	mov	r1, r6
 800e882:	e7e1      	b.n	800e848 <__gethex+0x114>
 800e884:	4621      	mov	r1, r4
 800e886:	1bf3      	subs	r3, r6, r7
 800e888:	3b01      	subs	r3, #1
 800e88a:	2b07      	cmp	r3, #7
 800e88c:	dc0a      	bgt.n	800e8a4 <__gethex+0x170>
 800e88e:	9802      	ldr	r0, [sp, #8]
 800e890:	f000 fa7a 	bl	800ed88 <_Balloc>
 800e894:	4604      	mov	r4, r0
 800e896:	b940      	cbnz	r0, 800e8aa <__gethex+0x176>
 800e898:	4602      	mov	r2, r0
 800e89a:	21de      	movs	r1, #222	; 0xde
 800e89c:	4b5b      	ldr	r3, [pc, #364]	; (800ea0c <__gethex+0x2d8>)
 800e89e:	485c      	ldr	r0, [pc, #368]	; (800ea10 <__gethex+0x2dc>)
 800e8a0:	f001 f9ae 	bl	800fc00 <__assert_func>
 800e8a4:	3101      	adds	r1, #1
 800e8a6:	105b      	asrs	r3, r3, #1
 800e8a8:	e7ef      	b.n	800e88a <__gethex+0x156>
 800e8aa:	f04f 0b00 	mov.w	fp, #0
 800e8ae:	f100 0914 	add.w	r9, r0, #20
 800e8b2:	f1ca 0301 	rsb	r3, sl, #1
 800e8b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800e8ba:	f8cd b004 	str.w	fp, [sp, #4]
 800e8be:	9308      	str	r3, [sp, #32]
 800e8c0:	42b7      	cmp	r7, r6
 800e8c2:	d33f      	bcc.n	800e944 <__gethex+0x210>
 800e8c4:	9f04      	ldr	r7, [sp, #16]
 800e8c6:	9b01      	ldr	r3, [sp, #4]
 800e8c8:	f847 3b04 	str.w	r3, [r7], #4
 800e8cc:	eba7 0709 	sub.w	r7, r7, r9
 800e8d0:	10bf      	asrs	r7, r7, #2
 800e8d2:	6127      	str	r7, [r4, #16]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 fb49 	bl	800ef6c <__hi0bits>
 800e8da:	017f      	lsls	r7, r7, #5
 800e8dc:	f8d8 6000 	ldr.w	r6, [r8]
 800e8e0:	1a3f      	subs	r7, r7, r0
 800e8e2:	42b7      	cmp	r7, r6
 800e8e4:	dd62      	ble.n	800e9ac <__gethex+0x278>
 800e8e6:	1bbf      	subs	r7, r7, r6
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 fee3 	bl	800f6b6 <__any_on>
 800e8f0:	4682      	mov	sl, r0
 800e8f2:	b1a8      	cbz	r0, 800e920 <__gethex+0x1ec>
 800e8f4:	f04f 0a01 	mov.w	sl, #1
 800e8f8:	1e7b      	subs	r3, r7, #1
 800e8fa:	1159      	asrs	r1, r3, #5
 800e8fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e900:	f003 021f 	and.w	r2, r3, #31
 800e904:	fa0a f202 	lsl.w	r2, sl, r2
 800e908:	420a      	tst	r2, r1
 800e90a:	d009      	beq.n	800e920 <__gethex+0x1ec>
 800e90c:	4553      	cmp	r3, sl
 800e90e:	dd05      	ble.n	800e91c <__gethex+0x1e8>
 800e910:	4620      	mov	r0, r4
 800e912:	1eb9      	subs	r1, r7, #2
 800e914:	f000 fecf 	bl	800f6b6 <__any_on>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d144      	bne.n	800e9a6 <__gethex+0x272>
 800e91c:	f04f 0a02 	mov.w	sl, #2
 800e920:	4639      	mov	r1, r7
 800e922:	4620      	mov	r0, r4
 800e924:	f7ff fe9e 	bl	800e664 <rshift>
 800e928:	443d      	add	r5, r7
 800e92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e92e:	42ab      	cmp	r3, r5
 800e930:	da4a      	bge.n	800e9c8 <__gethex+0x294>
 800e932:	4621      	mov	r1, r4
 800e934:	9802      	ldr	r0, [sp, #8]
 800e936:	f000 fa67 	bl	800ee08 <_Bfree>
 800e93a:	2300      	movs	r3, #0
 800e93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e93e:	27a3      	movs	r7, #163	; 0xa3
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	e789      	b.n	800e858 <__gethex+0x124>
 800e944:	1e73      	subs	r3, r6, #1
 800e946:	9a06      	ldr	r2, [sp, #24]
 800e948:	9307      	str	r3, [sp, #28]
 800e94a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e94e:	4293      	cmp	r3, r2
 800e950:	d019      	beq.n	800e986 <__gethex+0x252>
 800e952:	f1bb 0f20 	cmp.w	fp, #32
 800e956:	d107      	bne.n	800e968 <__gethex+0x234>
 800e958:	9b04      	ldr	r3, [sp, #16]
 800e95a:	9a01      	ldr	r2, [sp, #4]
 800e95c:	f843 2b04 	str.w	r2, [r3], #4
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	2300      	movs	r3, #0
 800e964:	469b      	mov	fp, r3
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e96c:	f7ff fecd 	bl	800e70a <__hexdig_fun>
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	f000 000f 	and.w	r0, r0, #15
 800e976:	fa00 f00b 	lsl.w	r0, r0, fp
 800e97a:	4303      	orrs	r3, r0
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	f10b 0b04 	add.w	fp, fp, #4
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	e00d      	b.n	800e9a2 <__gethex+0x26e>
 800e986:	9a08      	ldr	r2, [sp, #32]
 800e988:	1e73      	subs	r3, r6, #1
 800e98a:	4413      	add	r3, r2
 800e98c:	42bb      	cmp	r3, r7
 800e98e:	d3e0      	bcc.n	800e952 <__gethex+0x21e>
 800e990:	4618      	mov	r0, r3
 800e992:	4652      	mov	r2, sl
 800e994:	9903      	ldr	r1, [sp, #12]
 800e996:	9309      	str	r3, [sp, #36]	; 0x24
 800e998:	f001 f910 	bl	800fbbc <strncmp>
 800e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1d7      	bne.n	800e952 <__gethex+0x21e>
 800e9a2:	461e      	mov	r6, r3
 800e9a4:	e78c      	b.n	800e8c0 <__gethex+0x18c>
 800e9a6:	f04f 0a03 	mov.w	sl, #3
 800e9aa:	e7b9      	b.n	800e920 <__gethex+0x1ec>
 800e9ac:	da09      	bge.n	800e9c2 <__gethex+0x28e>
 800e9ae:	1bf7      	subs	r7, r6, r7
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	463a      	mov	r2, r7
 800e9b4:	9802      	ldr	r0, [sp, #8]
 800e9b6:	f000 fc3f 	bl	800f238 <__lshift>
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	1bed      	subs	r5, r5, r7
 800e9be:	f100 0914 	add.w	r9, r0, #20
 800e9c2:	f04f 0a00 	mov.w	sl, #0
 800e9c6:	e7b0      	b.n	800e92a <__gethex+0x1f6>
 800e9c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e9cc:	42a8      	cmp	r0, r5
 800e9ce:	dd72      	ble.n	800eab6 <__gethex+0x382>
 800e9d0:	1b45      	subs	r5, r0, r5
 800e9d2:	42ae      	cmp	r6, r5
 800e9d4:	dc35      	bgt.n	800ea42 <__gethex+0x30e>
 800e9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d029      	beq.n	800ea32 <__gethex+0x2fe>
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d02b      	beq.n	800ea3a <__gethex+0x306>
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d11c      	bne.n	800ea20 <__gethex+0x2ec>
 800e9e6:	42ae      	cmp	r6, r5
 800e9e8:	d11a      	bne.n	800ea20 <__gethex+0x2ec>
 800e9ea:	2e01      	cmp	r6, #1
 800e9ec:	d112      	bne.n	800ea14 <__gethex+0x2e0>
 800e9ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9f2:	9a05      	ldr	r2, [sp, #20]
 800e9f4:	2762      	movs	r7, #98	; 0x62
 800e9f6:	6013      	str	r3, [r2, #0]
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	6123      	str	r3, [r4, #16]
 800e9fc:	f8c9 3000 	str.w	r3, [r9]
 800ea00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea02:	601c      	str	r4, [r3, #0]
 800ea04:	e728      	b.n	800e858 <__gethex+0x124>
 800ea06:	bf00      	nop
 800ea08:	08010b10 	.word	0x08010b10
 800ea0c:	08010a98 	.word	0x08010a98
 800ea10:	08010aa9 	.word	0x08010aa9
 800ea14:	4620      	mov	r0, r4
 800ea16:	1e71      	subs	r1, r6, #1
 800ea18:	f000 fe4d 	bl	800f6b6 <__any_on>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d1e6      	bne.n	800e9ee <__gethex+0x2ba>
 800ea20:	4621      	mov	r1, r4
 800ea22:	9802      	ldr	r0, [sp, #8]
 800ea24:	f000 f9f0 	bl	800ee08 <_Bfree>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea2c:	2750      	movs	r7, #80	; 0x50
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	e712      	b.n	800e858 <__gethex+0x124>
 800ea32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1f3      	bne.n	800ea20 <__gethex+0x2ec>
 800ea38:	e7d9      	b.n	800e9ee <__gethex+0x2ba>
 800ea3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1d6      	bne.n	800e9ee <__gethex+0x2ba>
 800ea40:	e7ee      	b.n	800ea20 <__gethex+0x2ec>
 800ea42:	1e6f      	subs	r7, r5, #1
 800ea44:	f1ba 0f00 	cmp.w	sl, #0
 800ea48:	d132      	bne.n	800eab0 <__gethex+0x37c>
 800ea4a:	b127      	cbz	r7, 800ea56 <__gethex+0x322>
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fe31 	bl	800f6b6 <__any_on>
 800ea54:	4682      	mov	sl, r0
 800ea56:	2101      	movs	r1, #1
 800ea58:	117b      	asrs	r3, r7, #5
 800ea5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ea5e:	f007 071f 	and.w	r7, r7, #31
 800ea62:	fa01 f707 	lsl.w	r7, r1, r7
 800ea66:	421f      	tst	r7, r3
 800ea68:	f04f 0702 	mov.w	r7, #2
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	4620      	mov	r0, r4
 800ea70:	bf18      	it	ne
 800ea72:	f04a 0a02 	orrne.w	sl, sl, #2
 800ea76:	1b76      	subs	r6, r6, r5
 800ea78:	f7ff fdf4 	bl	800e664 <rshift>
 800ea7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea80:	f1ba 0f00 	cmp.w	sl, #0
 800ea84:	d048      	beq.n	800eb18 <__gethex+0x3e4>
 800ea86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d015      	beq.n	800eaba <__gethex+0x386>
 800ea8e:	2b03      	cmp	r3, #3
 800ea90:	d017      	beq.n	800eac2 <__gethex+0x38e>
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d109      	bne.n	800eaaa <__gethex+0x376>
 800ea96:	f01a 0f02 	tst.w	sl, #2
 800ea9a:	d006      	beq.n	800eaaa <__gethex+0x376>
 800ea9c:	f8d9 0000 	ldr.w	r0, [r9]
 800eaa0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eaa4:	f01a 0f01 	tst.w	sl, #1
 800eaa8:	d10e      	bne.n	800eac8 <__gethex+0x394>
 800eaaa:	f047 0710 	orr.w	r7, r7, #16
 800eaae:	e033      	b.n	800eb18 <__gethex+0x3e4>
 800eab0:	f04f 0a01 	mov.w	sl, #1
 800eab4:	e7cf      	b.n	800ea56 <__gethex+0x322>
 800eab6:	2701      	movs	r7, #1
 800eab8:	e7e2      	b.n	800ea80 <__gethex+0x34c>
 800eaba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eabc:	f1c3 0301 	rsb	r3, r3, #1
 800eac0:	9315      	str	r3, [sp, #84]	; 0x54
 800eac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d0f0      	beq.n	800eaaa <__gethex+0x376>
 800eac8:	f04f 0c00 	mov.w	ip, #0
 800eacc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ead0:	f104 0314 	add.w	r3, r4, #20
 800ead4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ead8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eadc:	4618      	mov	r0, r3
 800eade:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800eae6:	d01c      	beq.n	800eb22 <__gethex+0x3ee>
 800eae8:	3201      	adds	r2, #1
 800eaea:	6002      	str	r2, [r0, #0]
 800eaec:	2f02      	cmp	r7, #2
 800eaee:	f104 0314 	add.w	r3, r4, #20
 800eaf2:	d13d      	bne.n	800eb70 <__gethex+0x43c>
 800eaf4:	f8d8 2000 	ldr.w	r2, [r8]
 800eaf8:	3a01      	subs	r2, #1
 800eafa:	42b2      	cmp	r2, r6
 800eafc:	d10a      	bne.n	800eb14 <__gethex+0x3e0>
 800eafe:	2201      	movs	r2, #1
 800eb00:	1171      	asrs	r1, r6, #5
 800eb02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb06:	f006 061f 	and.w	r6, r6, #31
 800eb0a:	fa02 f606 	lsl.w	r6, r2, r6
 800eb0e:	421e      	tst	r6, r3
 800eb10:	bf18      	it	ne
 800eb12:	4617      	movne	r7, r2
 800eb14:	f047 0720 	orr.w	r7, r7, #32
 800eb18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb1a:	601c      	str	r4, [r3, #0]
 800eb1c:	9b05      	ldr	r3, [sp, #20]
 800eb1e:	601d      	str	r5, [r3, #0]
 800eb20:	e69a      	b.n	800e858 <__gethex+0x124>
 800eb22:	4299      	cmp	r1, r3
 800eb24:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb28:	d8d8      	bhi.n	800eadc <__gethex+0x3a8>
 800eb2a:	68a3      	ldr	r3, [r4, #8]
 800eb2c:	459b      	cmp	fp, r3
 800eb2e:	db17      	blt.n	800eb60 <__gethex+0x42c>
 800eb30:	6861      	ldr	r1, [r4, #4]
 800eb32:	9802      	ldr	r0, [sp, #8]
 800eb34:	3101      	adds	r1, #1
 800eb36:	f000 f927 	bl	800ed88 <_Balloc>
 800eb3a:	4681      	mov	r9, r0
 800eb3c:	b918      	cbnz	r0, 800eb46 <__gethex+0x412>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	2184      	movs	r1, #132	; 0x84
 800eb42:	4b19      	ldr	r3, [pc, #100]	; (800eba8 <__gethex+0x474>)
 800eb44:	e6ab      	b.n	800e89e <__gethex+0x16a>
 800eb46:	6922      	ldr	r2, [r4, #16]
 800eb48:	f104 010c 	add.w	r1, r4, #12
 800eb4c:	3202      	adds	r2, #2
 800eb4e:	0092      	lsls	r2, r2, #2
 800eb50:	300c      	adds	r0, #12
 800eb52:	f7fd f9a1 	bl	800be98 <memcpy>
 800eb56:	4621      	mov	r1, r4
 800eb58:	9802      	ldr	r0, [sp, #8]
 800eb5a:	f000 f955 	bl	800ee08 <_Bfree>
 800eb5e:	464c      	mov	r4, r9
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	6122      	str	r2, [r4, #16]
 800eb66:	2201      	movs	r2, #1
 800eb68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb6c:	615a      	str	r2, [r3, #20]
 800eb6e:	e7bd      	b.n	800eaec <__gethex+0x3b8>
 800eb70:	6922      	ldr	r2, [r4, #16]
 800eb72:	455a      	cmp	r2, fp
 800eb74:	dd0b      	ble.n	800eb8e <__gethex+0x45a>
 800eb76:	2101      	movs	r1, #1
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f7ff fd73 	bl	800e664 <rshift>
 800eb7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb82:	3501      	adds	r5, #1
 800eb84:	42ab      	cmp	r3, r5
 800eb86:	f6ff aed4 	blt.w	800e932 <__gethex+0x1fe>
 800eb8a:	2701      	movs	r7, #1
 800eb8c:	e7c2      	b.n	800eb14 <__gethex+0x3e0>
 800eb8e:	f016 061f 	ands.w	r6, r6, #31
 800eb92:	d0fa      	beq.n	800eb8a <__gethex+0x456>
 800eb94:	4453      	add	r3, sl
 800eb96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb9a:	f000 f9e7 	bl	800ef6c <__hi0bits>
 800eb9e:	f1c6 0620 	rsb	r6, r6, #32
 800eba2:	42b0      	cmp	r0, r6
 800eba4:	dbe7      	blt.n	800eb76 <__gethex+0x442>
 800eba6:	e7f0      	b.n	800eb8a <__gethex+0x456>
 800eba8:	08010a98 	.word	0x08010a98

0800ebac <L_shift>:
 800ebac:	f1c2 0208 	rsb	r2, r2, #8
 800ebb0:	0092      	lsls	r2, r2, #2
 800ebb2:	b570      	push	{r4, r5, r6, lr}
 800ebb4:	f1c2 0620 	rsb	r6, r2, #32
 800ebb8:	6843      	ldr	r3, [r0, #4]
 800ebba:	6804      	ldr	r4, [r0, #0]
 800ebbc:	fa03 f506 	lsl.w	r5, r3, r6
 800ebc0:	432c      	orrs	r4, r5
 800ebc2:	40d3      	lsrs	r3, r2
 800ebc4:	6004      	str	r4, [r0, #0]
 800ebc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebca:	4288      	cmp	r0, r1
 800ebcc:	d3f4      	bcc.n	800ebb8 <L_shift+0xc>
 800ebce:	bd70      	pop	{r4, r5, r6, pc}

0800ebd0 <__match>:
 800ebd0:	b530      	push	{r4, r5, lr}
 800ebd2:	6803      	ldr	r3, [r0, #0]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebda:	b914      	cbnz	r4, 800ebe2 <__match+0x12>
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	2001      	movs	r0, #1
 800ebe0:	bd30      	pop	{r4, r5, pc}
 800ebe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ebea:	2d19      	cmp	r5, #25
 800ebec:	bf98      	it	ls
 800ebee:	3220      	addls	r2, #32
 800ebf0:	42a2      	cmp	r2, r4
 800ebf2:	d0f0      	beq.n	800ebd6 <__match+0x6>
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	e7f3      	b.n	800ebe0 <__match+0x10>

0800ebf8 <__hexnan>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	2500      	movs	r5, #0
 800ebfe:	680b      	ldr	r3, [r1, #0]
 800ec00:	4682      	mov	sl, r0
 800ec02:	115e      	asrs	r6, r3, #5
 800ec04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec08:	f013 031f 	ands.w	r3, r3, #31
 800ec0c:	bf18      	it	ne
 800ec0e:	3604      	addne	r6, #4
 800ec10:	1f37      	subs	r7, r6, #4
 800ec12:	46b9      	mov	r9, r7
 800ec14:	463c      	mov	r4, r7
 800ec16:	46ab      	mov	fp, r5
 800ec18:	b087      	sub	sp, #28
 800ec1a:	4690      	mov	r8, r2
 800ec1c:	6802      	ldr	r2, [r0, #0]
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec24:	9502      	str	r5, [sp, #8]
 800ec26:	7851      	ldrb	r1, [r2, #1]
 800ec28:	1c53      	adds	r3, r2, #1
 800ec2a:	9303      	str	r3, [sp, #12]
 800ec2c:	b341      	cbz	r1, 800ec80 <__hexnan+0x88>
 800ec2e:	4608      	mov	r0, r1
 800ec30:	9205      	str	r2, [sp, #20]
 800ec32:	9104      	str	r1, [sp, #16]
 800ec34:	f7ff fd69 	bl	800e70a <__hexdig_fun>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d14f      	bne.n	800ecdc <__hexnan+0xe4>
 800ec3c:	9904      	ldr	r1, [sp, #16]
 800ec3e:	9a05      	ldr	r2, [sp, #20]
 800ec40:	2920      	cmp	r1, #32
 800ec42:	d818      	bhi.n	800ec76 <__hexnan+0x7e>
 800ec44:	9b02      	ldr	r3, [sp, #8]
 800ec46:	459b      	cmp	fp, r3
 800ec48:	dd13      	ble.n	800ec72 <__hexnan+0x7a>
 800ec4a:	454c      	cmp	r4, r9
 800ec4c:	d206      	bcs.n	800ec5c <__hexnan+0x64>
 800ec4e:	2d07      	cmp	r5, #7
 800ec50:	dc04      	bgt.n	800ec5c <__hexnan+0x64>
 800ec52:	462a      	mov	r2, r5
 800ec54:	4649      	mov	r1, r9
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7ff ffa8 	bl	800ebac <L_shift>
 800ec5c:	4544      	cmp	r4, r8
 800ec5e:	d950      	bls.n	800ed02 <__hexnan+0x10a>
 800ec60:	2300      	movs	r3, #0
 800ec62:	f1a4 0904 	sub.w	r9, r4, #4
 800ec66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec6a:	461d      	mov	r5, r3
 800ec6c:	464c      	mov	r4, r9
 800ec6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ec72:	9a03      	ldr	r2, [sp, #12]
 800ec74:	e7d7      	b.n	800ec26 <__hexnan+0x2e>
 800ec76:	2929      	cmp	r1, #41	; 0x29
 800ec78:	d156      	bne.n	800ed28 <__hexnan+0x130>
 800ec7a:	3202      	adds	r2, #2
 800ec7c:	f8ca 2000 	str.w	r2, [sl]
 800ec80:	f1bb 0f00 	cmp.w	fp, #0
 800ec84:	d050      	beq.n	800ed28 <__hexnan+0x130>
 800ec86:	454c      	cmp	r4, r9
 800ec88:	d206      	bcs.n	800ec98 <__hexnan+0xa0>
 800ec8a:	2d07      	cmp	r5, #7
 800ec8c:	dc04      	bgt.n	800ec98 <__hexnan+0xa0>
 800ec8e:	462a      	mov	r2, r5
 800ec90:	4649      	mov	r1, r9
 800ec92:	4620      	mov	r0, r4
 800ec94:	f7ff ff8a 	bl	800ebac <L_shift>
 800ec98:	4544      	cmp	r4, r8
 800ec9a:	d934      	bls.n	800ed06 <__hexnan+0x10e>
 800ec9c:	4623      	mov	r3, r4
 800ec9e:	f1a8 0204 	sub.w	r2, r8, #4
 800eca2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eca6:	429f      	cmp	r7, r3
 800eca8:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecac:	d2f9      	bcs.n	800eca2 <__hexnan+0xaa>
 800ecae:	1b3b      	subs	r3, r7, r4
 800ecb0:	f023 0303 	bic.w	r3, r3, #3
 800ecb4:	3304      	adds	r3, #4
 800ecb6:	3401      	adds	r4, #1
 800ecb8:	3e03      	subs	r6, #3
 800ecba:	42b4      	cmp	r4, r6
 800ecbc:	bf88      	it	hi
 800ecbe:	2304      	movhi	r3, #4
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4443      	add	r3, r8
 800ecc4:	f843 2b04 	str.w	r2, [r3], #4
 800ecc8:	429f      	cmp	r7, r3
 800ecca:	d2fb      	bcs.n	800ecc4 <__hexnan+0xcc>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	b91b      	cbnz	r3, 800ecd8 <__hexnan+0xe0>
 800ecd0:	4547      	cmp	r7, r8
 800ecd2:	d127      	bne.n	800ed24 <__hexnan+0x12c>
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	603b      	str	r3, [r7, #0]
 800ecd8:	2005      	movs	r0, #5
 800ecda:	e026      	b.n	800ed2a <__hexnan+0x132>
 800ecdc:	3501      	adds	r5, #1
 800ecde:	2d08      	cmp	r5, #8
 800ece0:	f10b 0b01 	add.w	fp, fp, #1
 800ece4:	dd06      	ble.n	800ecf4 <__hexnan+0xfc>
 800ece6:	4544      	cmp	r4, r8
 800ece8:	d9c3      	bls.n	800ec72 <__hexnan+0x7a>
 800ecea:	2300      	movs	r3, #0
 800ecec:	2501      	movs	r5, #1
 800ecee:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecf2:	3c04      	subs	r4, #4
 800ecf4:	6822      	ldr	r2, [r4, #0]
 800ecf6:	f000 000f 	and.w	r0, r0, #15
 800ecfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ecfe:	6022      	str	r2, [r4, #0]
 800ed00:	e7b7      	b.n	800ec72 <__hexnan+0x7a>
 800ed02:	2508      	movs	r5, #8
 800ed04:	e7b5      	b.n	800ec72 <__hexnan+0x7a>
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0df      	beq.n	800eccc <__hexnan+0xd4>
 800ed0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed10:	f1c3 0320 	rsb	r3, r3, #32
 800ed14:	fa22 f303 	lsr.w	r3, r2, r3
 800ed18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed1c:	401a      	ands	r2, r3
 800ed1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed22:	e7d3      	b.n	800eccc <__hexnan+0xd4>
 800ed24:	3f04      	subs	r7, #4
 800ed26:	e7d1      	b.n	800eccc <__hexnan+0xd4>
 800ed28:	2004      	movs	r0, #4
 800ed2a:	b007      	add	sp, #28
 800ed2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed30 <_localeconv_r>:
 800ed30:	4800      	ldr	r0, [pc, #0]	; (800ed34 <_localeconv_r+0x4>)
 800ed32:	4770      	bx	lr
 800ed34:	200002d4 	.word	0x200002d4

0800ed38 <malloc>:
 800ed38:	4b02      	ldr	r3, [pc, #8]	; (800ed44 <malloc+0xc>)
 800ed3a:	4601      	mov	r1, r0
 800ed3c:	6818      	ldr	r0, [r3, #0]
 800ed3e:	f000 bd57 	b.w	800f7f0 <_malloc_r>
 800ed42:	bf00      	nop
 800ed44:	2000017c 	.word	0x2000017c

0800ed48 <__ascii_mbtowc>:
 800ed48:	b082      	sub	sp, #8
 800ed4a:	b901      	cbnz	r1, 800ed4e <__ascii_mbtowc+0x6>
 800ed4c:	a901      	add	r1, sp, #4
 800ed4e:	b142      	cbz	r2, 800ed62 <__ascii_mbtowc+0x1a>
 800ed50:	b14b      	cbz	r3, 800ed66 <__ascii_mbtowc+0x1e>
 800ed52:	7813      	ldrb	r3, [r2, #0]
 800ed54:	600b      	str	r3, [r1, #0]
 800ed56:	7812      	ldrb	r2, [r2, #0]
 800ed58:	1e10      	subs	r0, r2, #0
 800ed5a:	bf18      	it	ne
 800ed5c:	2001      	movne	r0, #1
 800ed5e:	b002      	add	sp, #8
 800ed60:	4770      	bx	lr
 800ed62:	4610      	mov	r0, r2
 800ed64:	e7fb      	b.n	800ed5e <__ascii_mbtowc+0x16>
 800ed66:	f06f 0001 	mvn.w	r0, #1
 800ed6a:	e7f8      	b.n	800ed5e <__ascii_mbtowc+0x16>

0800ed6c <memchr>:
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	b510      	push	{r4, lr}
 800ed70:	b2c9      	uxtb	r1, r1
 800ed72:	4402      	add	r2, r0
 800ed74:	4293      	cmp	r3, r2
 800ed76:	4618      	mov	r0, r3
 800ed78:	d101      	bne.n	800ed7e <memchr+0x12>
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e003      	b.n	800ed86 <memchr+0x1a>
 800ed7e:	7804      	ldrb	r4, [r0, #0]
 800ed80:	3301      	adds	r3, #1
 800ed82:	428c      	cmp	r4, r1
 800ed84:	d1f6      	bne.n	800ed74 <memchr+0x8>
 800ed86:	bd10      	pop	{r4, pc}

0800ed88 <_Balloc>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	460d      	mov	r5, r1
 800ed90:	b976      	cbnz	r6, 800edb0 <_Balloc+0x28>
 800ed92:	2010      	movs	r0, #16
 800ed94:	f7ff ffd0 	bl	800ed38 <malloc>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ed9c:	b920      	cbnz	r0, 800eda8 <_Balloc+0x20>
 800ed9e:	2166      	movs	r1, #102	; 0x66
 800eda0:	4b17      	ldr	r3, [pc, #92]	; (800ee00 <_Balloc+0x78>)
 800eda2:	4818      	ldr	r0, [pc, #96]	; (800ee04 <_Balloc+0x7c>)
 800eda4:	f000 ff2c 	bl	800fc00 <__assert_func>
 800eda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edac:	6006      	str	r6, [r0, #0]
 800edae:	60c6      	str	r6, [r0, #12]
 800edb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edb2:	68f3      	ldr	r3, [r6, #12]
 800edb4:	b183      	cbz	r3, 800edd8 <_Balloc+0x50>
 800edb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800edbe:	b9b8      	cbnz	r0, 800edf0 <_Balloc+0x68>
 800edc0:	2101      	movs	r1, #1
 800edc2:	fa01 f605 	lsl.w	r6, r1, r5
 800edc6:	1d72      	adds	r2, r6, #5
 800edc8:	4620      	mov	r0, r4
 800edca:	0092      	lsls	r2, r2, #2
 800edcc:	f000 fc94 	bl	800f6f8 <_calloc_r>
 800edd0:	b160      	cbz	r0, 800edec <_Balloc+0x64>
 800edd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800edd6:	e00e      	b.n	800edf6 <_Balloc+0x6e>
 800edd8:	2221      	movs	r2, #33	; 0x21
 800edda:	2104      	movs	r1, #4
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fc8b 	bl	800f6f8 <_calloc_r>
 800ede2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede4:	60f0      	str	r0, [r6, #12]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e4      	bne.n	800edb6 <_Balloc+0x2e>
 800edec:	2000      	movs	r0, #0
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	6802      	ldr	r2, [r0, #0]
 800edf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edf6:	2300      	movs	r3, #0
 800edf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edfc:	e7f7      	b.n	800edee <_Balloc+0x66>
 800edfe:	bf00      	nop
 800ee00:	08010a26 	.word	0x08010a26
 800ee04:	08010b24 	.word	0x08010b24

0800ee08 <_Bfree>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	460c      	mov	r4, r1
 800ee10:	b976      	cbnz	r6, 800ee30 <_Bfree+0x28>
 800ee12:	2010      	movs	r0, #16
 800ee14:	f7ff ff90 	bl	800ed38 <malloc>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	6268      	str	r0, [r5, #36]	; 0x24
 800ee1c:	b920      	cbnz	r0, 800ee28 <_Bfree+0x20>
 800ee1e:	218a      	movs	r1, #138	; 0x8a
 800ee20:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <_Bfree+0x3c>)
 800ee22:	4809      	ldr	r0, [pc, #36]	; (800ee48 <_Bfree+0x40>)
 800ee24:	f000 feec 	bl	800fc00 <__assert_func>
 800ee28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee2c:	6006      	str	r6, [r0, #0]
 800ee2e:	60c6      	str	r6, [r0, #12]
 800ee30:	b13c      	cbz	r4, 800ee42 <_Bfree+0x3a>
 800ee32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee34:	6862      	ldr	r2, [r4, #4]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee3c:	6021      	str	r1, [r4, #0]
 800ee3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee42:	bd70      	pop	{r4, r5, r6, pc}
 800ee44:	08010a26 	.word	0x08010a26
 800ee48:	08010b24 	.word	0x08010b24

0800ee4c <__multadd>:
 800ee4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee50:	4607      	mov	r7, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	461e      	mov	r6, r3
 800ee56:	2000      	movs	r0, #0
 800ee58:	690d      	ldr	r5, [r1, #16]
 800ee5a:	f101 0c14 	add.w	ip, r1, #20
 800ee5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee62:	3001      	adds	r0, #1
 800ee64:	b299      	uxth	r1, r3
 800ee66:	fb02 6101 	mla	r1, r2, r1, r6
 800ee6a:	0c1e      	lsrs	r6, r3, #16
 800ee6c:	0c0b      	lsrs	r3, r1, #16
 800ee6e:	fb02 3306 	mla	r3, r2, r6, r3
 800ee72:	b289      	uxth	r1, r1
 800ee74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee78:	4285      	cmp	r5, r0
 800ee7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ee82:	dcec      	bgt.n	800ee5e <__multadd+0x12>
 800ee84:	b30e      	cbz	r6, 800eeca <__multadd+0x7e>
 800ee86:	68a3      	ldr	r3, [r4, #8]
 800ee88:	42ab      	cmp	r3, r5
 800ee8a:	dc19      	bgt.n	800eec0 <__multadd+0x74>
 800ee8c:	6861      	ldr	r1, [r4, #4]
 800ee8e:	4638      	mov	r0, r7
 800ee90:	3101      	adds	r1, #1
 800ee92:	f7ff ff79 	bl	800ed88 <_Balloc>
 800ee96:	4680      	mov	r8, r0
 800ee98:	b928      	cbnz	r0, 800eea6 <__multadd+0x5a>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	21b5      	movs	r1, #181	; 0xb5
 800ee9e:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <__multadd+0x84>)
 800eea0:	480c      	ldr	r0, [pc, #48]	; (800eed4 <__multadd+0x88>)
 800eea2:	f000 fead 	bl	800fc00 <__assert_func>
 800eea6:	6922      	ldr	r2, [r4, #16]
 800eea8:	f104 010c 	add.w	r1, r4, #12
 800eeac:	3202      	adds	r2, #2
 800eeae:	0092      	lsls	r2, r2, #2
 800eeb0:	300c      	adds	r0, #12
 800eeb2:	f7fc fff1 	bl	800be98 <memcpy>
 800eeb6:	4621      	mov	r1, r4
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7ff ffa5 	bl	800ee08 <_Bfree>
 800eebe:	4644      	mov	r4, r8
 800eec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eec4:	3501      	adds	r5, #1
 800eec6:	615e      	str	r6, [r3, #20]
 800eec8:	6125      	str	r5, [r4, #16]
 800eeca:	4620      	mov	r0, r4
 800eecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed0:	08010a98 	.word	0x08010a98
 800eed4:	08010b24 	.word	0x08010b24

0800eed8 <__s2b>:
 800eed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eedc:	4615      	mov	r5, r2
 800eede:	2209      	movs	r2, #9
 800eee0:	461f      	mov	r7, r3
 800eee2:	3308      	adds	r3, #8
 800eee4:	460c      	mov	r4, r1
 800eee6:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeea:	4606      	mov	r6, r0
 800eeec:	2201      	movs	r2, #1
 800eeee:	2100      	movs	r1, #0
 800eef0:	429a      	cmp	r2, r3
 800eef2:	db09      	blt.n	800ef08 <__s2b+0x30>
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ff47 	bl	800ed88 <_Balloc>
 800eefa:	b940      	cbnz	r0, 800ef0e <__s2b+0x36>
 800eefc:	4602      	mov	r2, r0
 800eefe:	21ce      	movs	r1, #206	; 0xce
 800ef00:	4b18      	ldr	r3, [pc, #96]	; (800ef64 <__s2b+0x8c>)
 800ef02:	4819      	ldr	r0, [pc, #100]	; (800ef68 <__s2b+0x90>)
 800ef04:	f000 fe7c 	bl	800fc00 <__assert_func>
 800ef08:	0052      	lsls	r2, r2, #1
 800ef0a:	3101      	adds	r1, #1
 800ef0c:	e7f0      	b.n	800eef0 <__s2b+0x18>
 800ef0e:	9b08      	ldr	r3, [sp, #32]
 800ef10:	2d09      	cmp	r5, #9
 800ef12:	6143      	str	r3, [r0, #20]
 800ef14:	f04f 0301 	mov.w	r3, #1
 800ef18:	6103      	str	r3, [r0, #16]
 800ef1a:	dd16      	ble.n	800ef4a <__s2b+0x72>
 800ef1c:	f104 0909 	add.w	r9, r4, #9
 800ef20:	46c8      	mov	r8, r9
 800ef22:	442c      	add	r4, r5
 800ef24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef28:	4601      	mov	r1, r0
 800ef2a:	220a      	movs	r2, #10
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	3b30      	subs	r3, #48	; 0x30
 800ef30:	f7ff ff8c 	bl	800ee4c <__multadd>
 800ef34:	45a0      	cmp	r8, r4
 800ef36:	d1f5      	bne.n	800ef24 <__s2b+0x4c>
 800ef38:	f1a5 0408 	sub.w	r4, r5, #8
 800ef3c:	444c      	add	r4, r9
 800ef3e:	1b2d      	subs	r5, r5, r4
 800ef40:	1963      	adds	r3, r4, r5
 800ef42:	42bb      	cmp	r3, r7
 800ef44:	db04      	blt.n	800ef50 <__s2b+0x78>
 800ef46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef4a:	2509      	movs	r5, #9
 800ef4c:	340a      	adds	r4, #10
 800ef4e:	e7f6      	b.n	800ef3e <__s2b+0x66>
 800ef50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef54:	4601      	mov	r1, r0
 800ef56:	220a      	movs	r2, #10
 800ef58:	4630      	mov	r0, r6
 800ef5a:	3b30      	subs	r3, #48	; 0x30
 800ef5c:	f7ff ff76 	bl	800ee4c <__multadd>
 800ef60:	e7ee      	b.n	800ef40 <__s2b+0x68>
 800ef62:	bf00      	nop
 800ef64:	08010a98 	.word	0x08010a98
 800ef68:	08010b24 	.word	0x08010b24

0800ef6c <__hi0bits>:
 800ef6c:	0c02      	lsrs	r2, r0, #16
 800ef6e:	0412      	lsls	r2, r2, #16
 800ef70:	4603      	mov	r3, r0
 800ef72:	b9ca      	cbnz	r2, 800efa8 <__hi0bits+0x3c>
 800ef74:	0403      	lsls	r3, r0, #16
 800ef76:	2010      	movs	r0, #16
 800ef78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ef7c:	bf04      	itt	eq
 800ef7e:	021b      	lsleq	r3, r3, #8
 800ef80:	3008      	addeq	r0, #8
 800ef82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ef86:	bf04      	itt	eq
 800ef88:	011b      	lsleq	r3, r3, #4
 800ef8a:	3004      	addeq	r0, #4
 800ef8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ef90:	bf04      	itt	eq
 800ef92:	009b      	lsleq	r3, r3, #2
 800ef94:	3002      	addeq	r0, #2
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	db05      	blt.n	800efa6 <__hi0bits+0x3a>
 800ef9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ef9e:	f100 0001 	add.w	r0, r0, #1
 800efa2:	bf08      	it	eq
 800efa4:	2020      	moveq	r0, #32
 800efa6:	4770      	bx	lr
 800efa8:	2000      	movs	r0, #0
 800efaa:	e7e5      	b.n	800ef78 <__hi0bits+0xc>

0800efac <__lo0bits>:
 800efac:	6803      	ldr	r3, [r0, #0]
 800efae:	4602      	mov	r2, r0
 800efb0:	f013 0007 	ands.w	r0, r3, #7
 800efb4:	d00b      	beq.n	800efce <__lo0bits+0x22>
 800efb6:	07d9      	lsls	r1, r3, #31
 800efb8:	d421      	bmi.n	800effe <__lo0bits+0x52>
 800efba:	0798      	lsls	r0, r3, #30
 800efbc:	bf49      	itett	mi
 800efbe:	085b      	lsrmi	r3, r3, #1
 800efc0:	089b      	lsrpl	r3, r3, #2
 800efc2:	2001      	movmi	r0, #1
 800efc4:	6013      	strmi	r3, [r2, #0]
 800efc6:	bf5c      	itt	pl
 800efc8:	2002      	movpl	r0, #2
 800efca:	6013      	strpl	r3, [r2, #0]
 800efcc:	4770      	bx	lr
 800efce:	b299      	uxth	r1, r3
 800efd0:	b909      	cbnz	r1, 800efd6 <__lo0bits+0x2a>
 800efd2:	2010      	movs	r0, #16
 800efd4:	0c1b      	lsrs	r3, r3, #16
 800efd6:	b2d9      	uxtb	r1, r3
 800efd8:	b909      	cbnz	r1, 800efde <__lo0bits+0x32>
 800efda:	3008      	adds	r0, #8
 800efdc:	0a1b      	lsrs	r3, r3, #8
 800efde:	0719      	lsls	r1, r3, #28
 800efe0:	bf04      	itt	eq
 800efe2:	091b      	lsreq	r3, r3, #4
 800efe4:	3004      	addeq	r0, #4
 800efe6:	0799      	lsls	r1, r3, #30
 800efe8:	bf04      	itt	eq
 800efea:	089b      	lsreq	r3, r3, #2
 800efec:	3002      	addeq	r0, #2
 800efee:	07d9      	lsls	r1, r3, #31
 800eff0:	d403      	bmi.n	800effa <__lo0bits+0x4e>
 800eff2:	085b      	lsrs	r3, r3, #1
 800eff4:	f100 0001 	add.w	r0, r0, #1
 800eff8:	d003      	beq.n	800f002 <__lo0bits+0x56>
 800effa:	6013      	str	r3, [r2, #0]
 800effc:	4770      	bx	lr
 800effe:	2000      	movs	r0, #0
 800f000:	4770      	bx	lr
 800f002:	2020      	movs	r0, #32
 800f004:	4770      	bx	lr
	...

0800f008 <__i2b>:
 800f008:	b510      	push	{r4, lr}
 800f00a:	460c      	mov	r4, r1
 800f00c:	2101      	movs	r1, #1
 800f00e:	f7ff febb 	bl	800ed88 <_Balloc>
 800f012:	4602      	mov	r2, r0
 800f014:	b928      	cbnz	r0, 800f022 <__i2b+0x1a>
 800f016:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f01a:	4b04      	ldr	r3, [pc, #16]	; (800f02c <__i2b+0x24>)
 800f01c:	4804      	ldr	r0, [pc, #16]	; (800f030 <__i2b+0x28>)
 800f01e:	f000 fdef 	bl	800fc00 <__assert_func>
 800f022:	2301      	movs	r3, #1
 800f024:	6144      	str	r4, [r0, #20]
 800f026:	6103      	str	r3, [r0, #16]
 800f028:	bd10      	pop	{r4, pc}
 800f02a:	bf00      	nop
 800f02c:	08010a98 	.word	0x08010a98
 800f030:	08010b24 	.word	0x08010b24

0800f034 <__multiply>:
 800f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f038:	4691      	mov	r9, r2
 800f03a:	690a      	ldr	r2, [r1, #16]
 800f03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f040:	460c      	mov	r4, r1
 800f042:	429a      	cmp	r2, r3
 800f044:	bfbe      	ittt	lt
 800f046:	460b      	movlt	r3, r1
 800f048:	464c      	movlt	r4, r9
 800f04a:	4699      	movlt	r9, r3
 800f04c:	6927      	ldr	r7, [r4, #16]
 800f04e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f052:	68a3      	ldr	r3, [r4, #8]
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	eb07 060a 	add.w	r6, r7, sl
 800f05a:	42b3      	cmp	r3, r6
 800f05c:	b085      	sub	sp, #20
 800f05e:	bfb8      	it	lt
 800f060:	3101      	addlt	r1, #1
 800f062:	f7ff fe91 	bl	800ed88 <_Balloc>
 800f066:	b930      	cbnz	r0, 800f076 <__multiply+0x42>
 800f068:	4602      	mov	r2, r0
 800f06a:	f240 115d 	movw	r1, #349	; 0x15d
 800f06e:	4b43      	ldr	r3, [pc, #268]	; (800f17c <__multiply+0x148>)
 800f070:	4843      	ldr	r0, [pc, #268]	; (800f180 <__multiply+0x14c>)
 800f072:	f000 fdc5 	bl	800fc00 <__assert_func>
 800f076:	f100 0514 	add.w	r5, r0, #20
 800f07a:	462b      	mov	r3, r5
 800f07c:	2200      	movs	r2, #0
 800f07e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f082:	4543      	cmp	r3, r8
 800f084:	d321      	bcc.n	800f0ca <__multiply+0x96>
 800f086:	f104 0314 	add.w	r3, r4, #20
 800f08a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f08e:	f109 0314 	add.w	r3, r9, #20
 800f092:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f096:	9202      	str	r2, [sp, #8]
 800f098:	1b3a      	subs	r2, r7, r4
 800f09a:	3a15      	subs	r2, #21
 800f09c:	f022 0203 	bic.w	r2, r2, #3
 800f0a0:	3204      	adds	r2, #4
 800f0a2:	f104 0115 	add.w	r1, r4, #21
 800f0a6:	428f      	cmp	r7, r1
 800f0a8:	bf38      	it	cc
 800f0aa:	2204      	movcc	r2, #4
 800f0ac:	9201      	str	r2, [sp, #4]
 800f0ae:	9a02      	ldr	r2, [sp, #8]
 800f0b0:	9303      	str	r3, [sp, #12]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d80c      	bhi.n	800f0d0 <__multiply+0x9c>
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	dd03      	ble.n	800f0c2 <__multiply+0x8e>
 800f0ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d059      	beq.n	800f176 <__multiply+0x142>
 800f0c2:	6106      	str	r6, [r0, #16]
 800f0c4:	b005      	add	sp, #20
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	f843 2b04 	str.w	r2, [r3], #4
 800f0ce:	e7d8      	b.n	800f082 <__multiply+0x4e>
 800f0d0:	f8b3 a000 	ldrh.w	sl, [r3]
 800f0d4:	f1ba 0f00 	cmp.w	sl, #0
 800f0d8:	d023      	beq.n	800f122 <__multiply+0xee>
 800f0da:	46a9      	mov	r9, r5
 800f0dc:	f04f 0c00 	mov.w	ip, #0
 800f0e0:	f104 0e14 	add.w	lr, r4, #20
 800f0e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0e8:	f8d9 1000 	ldr.w	r1, [r9]
 800f0ec:	fa1f fb82 	uxth.w	fp, r2
 800f0f0:	b289      	uxth	r1, r1
 800f0f2:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0f6:	4461      	add	r1, ip
 800f0f8:	f8d9 c000 	ldr.w	ip, [r9]
 800f0fc:	0c12      	lsrs	r2, r2, #16
 800f0fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f102:	fb0a c202 	mla	r2, sl, r2, ip
 800f106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f10a:	b289      	uxth	r1, r1
 800f10c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f110:	4577      	cmp	r7, lr
 800f112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f116:	f849 1b04 	str.w	r1, [r9], #4
 800f11a:	d8e3      	bhi.n	800f0e4 <__multiply+0xb0>
 800f11c:	9a01      	ldr	r2, [sp, #4]
 800f11e:	f845 c002 	str.w	ip, [r5, r2]
 800f122:	9a03      	ldr	r2, [sp, #12]
 800f124:	3304      	adds	r3, #4
 800f126:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f12a:	f1b9 0f00 	cmp.w	r9, #0
 800f12e:	d020      	beq.n	800f172 <__multiply+0x13e>
 800f130:	46ae      	mov	lr, r5
 800f132:	f04f 0a00 	mov.w	sl, #0
 800f136:	6829      	ldr	r1, [r5, #0]
 800f138:	f104 0c14 	add.w	ip, r4, #20
 800f13c:	f8bc b000 	ldrh.w	fp, [ip]
 800f140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f144:	b289      	uxth	r1, r1
 800f146:	fb09 220b 	mla	r2, r9, fp, r2
 800f14a:	4492      	add	sl, r2
 800f14c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f150:	f84e 1b04 	str.w	r1, [lr], #4
 800f154:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f158:	f8be 1000 	ldrh.w	r1, [lr]
 800f15c:	0c12      	lsrs	r2, r2, #16
 800f15e:	fb09 1102 	mla	r1, r9, r2, r1
 800f162:	4567      	cmp	r7, ip
 800f164:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f168:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f16c:	d8e6      	bhi.n	800f13c <__multiply+0x108>
 800f16e:	9a01      	ldr	r2, [sp, #4]
 800f170:	50a9      	str	r1, [r5, r2]
 800f172:	3504      	adds	r5, #4
 800f174:	e79b      	b.n	800f0ae <__multiply+0x7a>
 800f176:	3e01      	subs	r6, #1
 800f178:	e79d      	b.n	800f0b6 <__multiply+0x82>
 800f17a:	bf00      	nop
 800f17c:	08010a98 	.word	0x08010a98
 800f180:	08010b24 	.word	0x08010b24

0800f184 <__pow5mult>:
 800f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f188:	4615      	mov	r5, r2
 800f18a:	f012 0203 	ands.w	r2, r2, #3
 800f18e:	4606      	mov	r6, r0
 800f190:	460f      	mov	r7, r1
 800f192:	d007      	beq.n	800f1a4 <__pow5mult+0x20>
 800f194:	4c25      	ldr	r4, [pc, #148]	; (800f22c <__pow5mult+0xa8>)
 800f196:	3a01      	subs	r2, #1
 800f198:	2300      	movs	r3, #0
 800f19a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f19e:	f7ff fe55 	bl	800ee4c <__multadd>
 800f1a2:	4607      	mov	r7, r0
 800f1a4:	10ad      	asrs	r5, r5, #2
 800f1a6:	d03d      	beq.n	800f224 <__pow5mult+0xa0>
 800f1a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1aa:	b97c      	cbnz	r4, 800f1cc <__pow5mult+0x48>
 800f1ac:	2010      	movs	r0, #16
 800f1ae:	f7ff fdc3 	bl	800ed38 <malloc>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	6270      	str	r0, [r6, #36]	; 0x24
 800f1b6:	b928      	cbnz	r0, 800f1c4 <__pow5mult+0x40>
 800f1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f1bc:	4b1c      	ldr	r3, [pc, #112]	; (800f230 <__pow5mult+0xac>)
 800f1be:	481d      	ldr	r0, [pc, #116]	; (800f234 <__pow5mult+0xb0>)
 800f1c0:	f000 fd1e 	bl	800fc00 <__assert_func>
 800f1c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1c8:	6004      	str	r4, [r0, #0]
 800f1ca:	60c4      	str	r4, [r0, #12]
 800f1cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1d4:	b94c      	cbnz	r4, 800f1ea <__pow5mult+0x66>
 800f1d6:	f240 2171 	movw	r1, #625	; 0x271
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f7ff ff14 	bl	800f008 <__i2b>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1e8:	6003      	str	r3, [r0, #0]
 800f1ea:	f04f 0900 	mov.w	r9, #0
 800f1ee:	07eb      	lsls	r3, r5, #31
 800f1f0:	d50a      	bpl.n	800f208 <__pow5mult+0x84>
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	4622      	mov	r2, r4
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ff1c 	bl	800f034 <__multiply>
 800f1fc:	4680      	mov	r8, r0
 800f1fe:	4639      	mov	r1, r7
 800f200:	4630      	mov	r0, r6
 800f202:	f7ff fe01 	bl	800ee08 <_Bfree>
 800f206:	4647      	mov	r7, r8
 800f208:	106d      	asrs	r5, r5, #1
 800f20a:	d00b      	beq.n	800f224 <__pow5mult+0xa0>
 800f20c:	6820      	ldr	r0, [r4, #0]
 800f20e:	b938      	cbnz	r0, 800f220 <__pow5mult+0x9c>
 800f210:	4622      	mov	r2, r4
 800f212:	4621      	mov	r1, r4
 800f214:	4630      	mov	r0, r6
 800f216:	f7ff ff0d 	bl	800f034 <__multiply>
 800f21a:	6020      	str	r0, [r4, #0]
 800f21c:	f8c0 9000 	str.w	r9, [r0]
 800f220:	4604      	mov	r4, r0
 800f222:	e7e4      	b.n	800f1ee <__pow5mult+0x6a>
 800f224:	4638      	mov	r0, r7
 800f226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f22a:	bf00      	nop
 800f22c:	08010c70 	.word	0x08010c70
 800f230:	08010a26 	.word	0x08010a26
 800f234:	08010b24 	.word	0x08010b24

0800f238 <__lshift>:
 800f238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f23c:	460c      	mov	r4, r1
 800f23e:	4607      	mov	r7, r0
 800f240:	4691      	mov	r9, r2
 800f242:	6923      	ldr	r3, [r4, #16]
 800f244:	6849      	ldr	r1, [r1, #4]
 800f246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f24a:	68a3      	ldr	r3, [r4, #8]
 800f24c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f250:	f108 0601 	add.w	r6, r8, #1
 800f254:	42b3      	cmp	r3, r6
 800f256:	db0b      	blt.n	800f270 <__lshift+0x38>
 800f258:	4638      	mov	r0, r7
 800f25a:	f7ff fd95 	bl	800ed88 <_Balloc>
 800f25e:	4605      	mov	r5, r0
 800f260:	b948      	cbnz	r0, 800f276 <__lshift+0x3e>
 800f262:	4602      	mov	r2, r0
 800f264:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f268:	4b29      	ldr	r3, [pc, #164]	; (800f310 <__lshift+0xd8>)
 800f26a:	482a      	ldr	r0, [pc, #168]	; (800f314 <__lshift+0xdc>)
 800f26c:	f000 fcc8 	bl	800fc00 <__assert_func>
 800f270:	3101      	adds	r1, #1
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	e7ee      	b.n	800f254 <__lshift+0x1c>
 800f276:	2300      	movs	r3, #0
 800f278:	f100 0114 	add.w	r1, r0, #20
 800f27c:	f100 0210 	add.w	r2, r0, #16
 800f280:	4618      	mov	r0, r3
 800f282:	4553      	cmp	r3, sl
 800f284:	db37      	blt.n	800f2f6 <__lshift+0xbe>
 800f286:	6920      	ldr	r0, [r4, #16]
 800f288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f28c:	f104 0314 	add.w	r3, r4, #20
 800f290:	f019 091f 	ands.w	r9, r9, #31
 800f294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f298:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f29c:	d02f      	beq.n	800f2fe <__lshift+0xc6>
 800f29e:	468a      	mov	sl, r1
 800f2a0:	f04f 0c00 	mov.w	ip, #0
 800f2a4:	f1c9 0e20 	rsb	lr, r9, #32
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	fa02 f209 	lsl.w	r2, r2, r9
 800f2ae:	ea42 020c 	orr.w	r2, r2, ip
 800f2b2:	f84a 2b04 	str.w	r2, [sl], #4
 800f2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ba:	4298      	cmp	r0, r3
 800f2bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f2c0:	d8f2      	bhi.n	800f2a8 <__lshift+0x70>
 800f2c2:	1b03      	subs	r3, r0, r4
 800f2c4:	3b15      	subs	r3, #21
 800f2c6:	f023 0303 	bic.w	r3, r3, #3
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	f104 0215 	add.w	r2, r4, #21
 800f2d0:	4290      	cmp	r0, r2
 800f2d2:	bf38      	it	cc
 800f2d4:	2304      	movcc	r3, #4
 800f2d6:	f841 c003 	str.w	ip, [r1, r3]
 800f2da:	f1bc 0f00 	cmp.w	ip, #0
 800f2de:	d001      	beq.n	800f2e4 <__lshift+0xac>
 800f2e0:	f108 0602 	add.w	r6, r8, #2
 800f2e4:	3e01      	subs	r6, #1
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	612e      	str	r6, [r5, #16]
 800f2ec:	f7ff fd8c 	bl	800ee08 <_Bfree>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	e7c1      	b.n	800f282 <__lshift+0x4a>
 800f2fe:	3904      	subs	r1, #4
 800f300:	f853 2b04 	ldr.w	r2, [r3], #4
 800f304:	4298      	cmp	r0, r3
 800f306:	f841 2f04 	str.w	r2, [r1, #4]!
 800f30a:	d8f9      	bhi.n	800f300 <__lshift+0xc8>
 800f30c:	e7ea      	b.n	800f2e4 <__lshift+0xac>
 800f30e:	bf00      	nop
 800f310:	08010a98 	.word	0x08010a98
 800f314:	08010b24 	.word	0x08010b24

0800f318 <__mcmp>:
 800f318:	4603      	mov	r3, r0
 800f31a:	690a      	ldr	r2, [r1, #16]
 800f31c:	6900      	ldr	r0, [r0, #16]
 800f31e:	b530      	push	{r4, r5, lr}
 800f320:	1a80      	subs	r0, r0, r2
 800f322:	d10d      	bne.n	800f340 <__mcmp+0x28>
 800f324:	3314      	adds	r3, #20
 800f326:	3114      	adds	r1, #20
 800f328:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f32c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f338:	4295      	cmp	r5, r2
 800f33a:	d002      	beq.n	800f342 <__mcmp+0x2a>
 800f33c:	d304      	bcc.n	800f348 <__mcmp+0x30>
 800f33e:	2001      	movs	r0, #1
 800f340:	bd30      	pop	{r4, r5, pc}
 800f342:	42a3      	cmp	r3, r4
 800f344:	d3f4      	bcc.n	800f330 <__mcmp+0x18>
 800f346:	e7fb      	b.n	800f340 <__mcmp+0x28>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f34c:	e7f8      	b.n	800f340 <__mcmp+0x28>
	...

0800f350 <__mdiff>:
 800f350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	460d      	mov	r5, r1
 800f356:	4607      	mov	r7, r0
 800f358:	4611      	mov	r1, r2
 800f35a:	4628      	mov	r0, r5
 800f35c:	4614      	mov	r4, r2
 800f35e:	f7ff ffdb 	bl	800f318 <__mcmp>
 800f362:	1e06      	subs	r6, r0, #0
 800f364:	d111      	bne.n	800f38a <__mdiff+0x3a>
 800f366:	4631      	mov	r1, r6
 800f368:	4638      	mov	r0, r7
 800f36a:	f7ff fd0d 	bl	800ed88 <_Balloc>
 800f36e:	4602      	mov	r2, r0
 800f370:	b928      	cbnz	r0, 800f37e <__mdiff+0x2e>
 800f372:	f240 2132 	movw	r1, #562	; 0x232
 800f376:	4b3a      	ldr	r3, [pc, #232]	; (800f460 <__mdiff+0x110>)
 800f378:	483a      	ldr	r0, [pc, #232]	; (800f464 <__mdiff+0x114>)
 800f37a:	f000 fc41 	bl	800fc00 <__assert_func>
 800f37e:	2301      	movs	r3, #1
 800f380:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f384:	4610      	mov	r0, r2
 800f386:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38a:	bfa4      	itt	ge
 800f38c:	4623      	movge	r3, r4
 800f38e:	462c      	movge	r4, r5
 800f390:	4638      	mov	r0, r7
 800f392:	6861      	ldr	r1, [r4, #4]
 800f394:	bfa6      	itte	ge
 800f396:	461d      	movge	r5, r3
 800f398:	2600      	movge	r6, #0
 800f39a:	2601      	movlt	r6, #1
 800f39c:	f7ff fcf4 	bl	800ed88 <_Balloc>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	b918      	cbnz	r0, 800f3ac <__mdiff+0x5c>
 800f3a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f3a8:	4b2d      	ldr	r3, [pc, #180]	; (800f460 <__mdiff+0x110>)
 800f3aa:	e7e5      	b.n	800f378 <__mdiff+0x28>
 800f3ac:	f102 0814 	add.w	r8, r2, #20
 800f3b0:	46c2      	mov	sl, r8
 800f3b2:	f04f 0c00 	mov.w	ip, #0
 800f3b6:	6927      	ldr	r7, [r4, #16]
 800f3b8:	60c6      	str	r6, [r0, #12]
 800f3ba:	692e      	ldr	r6, [r5, #16]
 800f3bc:	f104 0014 	add.w	r0, r4, #20
 800f3c0:	f105 0914 	add.w	r9, r5, #20
 800f3c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f3c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f3cc:	3410      	adds	r4, #16
 800f3ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f3d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800f3d6:	fa1f f18b 	uxth.w	r1, fp
 800f3da:	448c      	add	ip, r1
 800f3dc:	b299      	uxth	r1, r3
 800f3de:	0c1b      	lsrs	r3, r3, #16
 800f3e0:	ebac 0101 	sub.w	r1, ip, r1
 800f3e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f3ec:	b289      	uxth	r1, r1
 800f3ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f3f2:	454e      	cmp	r6, r9
 800f3f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3f8:	f84a 3b04 	str.w	r3, [sl], #4
 800f3fc:	d8e7      	bhi.n	800f3ce <__mdiff+0x7e>
 800f3fe:	1b73      	subs	r3, r6, r5
 800f400:	3b15      	subs	r3, #21
 800f402:	f023 0303 	bic.w	r3, r3, #3
 800f406:	3515      	adds	r5, #21
 800f408:	3304      	adds	r3, #4
 800f40a:	42ae      	cmp	r6, r5
 800f40c:	bf38      	it	cc
 800f40e:	2304      	movcc	r3, #4
 800f410:	4418      	add	r0, r3
 800f412:	4443      	add	r3, r8
 800f414:	461e      	mov	r6, r3
 800f416:	4605      	mov	r5, r0
 800f418:	4575      	cmp	r5, lr
 800f41a:	d30e      	bcc.n	800f43a <__mdiff+0xea>
 800f41c:	f10e 0103 	add.w	r1, lr, #3
 800f420:	1a09      	subs	r1, r1, r0
 800f422:	f021 0103 	bic.w	r1, r1, #3
 800f426:	3803      	subs	r0, #3
 800f428:	4586      	cmp	lr, r0
 800f42a:	bf38      	it	cc
 800f42c:	2100      	movcc	r1, #0
 800f42e:	4419      	add	r1, r3
 800f430:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f434:	b18b      	cbz	r3, 800f45a <__mdiff+0x10a>
 800f436:	6117      	str	r7, [r2, #16]
 800f438:	e7a4      	b.n	800f384 <__mdiff+0x34>
 800f43a:	f855 8b04 	ldr.w	r8, [r5], #4
 800f43e:	fa1f f188 	uxth.w	r1, r8
 800f442:	4461      	add	r1, ip
 800f444:	140c      	asrs	r4, r1, #16
 800f446:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f44a:	b289      	uxth	r1, r1
 800f44c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f450:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f454:	f846 1b04 	str.w	r1, [r6], #4
 800f458:	e7de      	b.n	800f418 <__mdiff+0xc8>
 800f45a:	3f01      	subs	r7, #1
 800f45c:	e7e8      	b.n	800f430 <__mdiff+0xe0>
 800f45e:	bf00      	nop
 800f460:	08010a98 	.word	0x08010a98
 800f464:	08010b24 	.word	0x08010b24

0800f468 <__ulp>:
 800f468:	4b11      	ldr	r3, [pc, #68]	; (800f4b0 <__ulp+0x48>)
 800f46a:	400b      	ands	r3, r1
 800f46c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f470:	2b00      	cmp	r3, #0
 800f472:	dd02      	ble.n	800f47a <__ulp+0x12>
 800f474:	2000      	movs	r0, #0
 800f476:	4619      	mov	r1, r3
 800f478:	4770      	bx	lr
 800f47a:	425b      	negs	r3, r3
 800f47c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f480:	f04f 0000 	mov.w	r0, #0
 800f484:	f04f 0100 	mov.w	r1, #0
 800f488:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f48c:	da04      	bge.n	800f498 <__ulp+0x30>
 800f48e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f492:	fa43 f102 	asr.w	r1, r3, r2
 800f496:	4770      	bx	lr
 800f498:	f1a2 0314 	sub.w	r3, r2, #20
 800f49c:	2b1e      	cmp	r3, #30
 800f49e:	bfd6      	itet	le
 800f4a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f4a4:	2301      	movgt	r3, #1
 800f4a6:	fa22 f303 	lsrle.w	r3, r2, r3
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	7ff00000 	.word	0x7ff00000

0800f4b4 <__b2d>:
 800f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b8:	6907      	ldr	r7, [r0, #16]
 800f4ba:	f100 0914 	add.w	r9, r0, #20
 800f4be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f4c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f4c6:	f1a7 0804 	sub.w	r8, r7, #4
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f7ff fd4e 	bl	800ef6c <__hi0bits>
 800f4d0:	f1c0 0320 	rsb	r3, r0, #32
 800f4d4:	280a      	cmp	r0, #10
 800f4d6:	600b      	str	r3, [r1, #0]
 800f4d8:	491f      	ldr	r1, [pc, #124]	; (800f558 <__b2d+0xa4>)
 800f4da:	dc17      	bgt.n	800f50c <__b2d+0x58>
 800f4dc:	45c1      	cmp	r9, r8
 800f4de:	bf28      	it	cs
 800f4e0:	2200      	movcs	r2, #0
 800f4e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800f4e6:	fa26 f30c 	lsr.w	r3, r6, ip
 800f4ea:	bf38      	it	cc
 800f4ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f4f0:	ea43 0501 	orr.w	r5, r3, r1
 800f4f4:	f100 0315 	add.w	r3, r0, #21
 800f4f8:	fa06 f303 	lsl.w	r3, r6, r3
 800f4fc:	fa22 f20c 	lsr.w	r2, r2, ip
 800f500:	ea43 0402 	orr.w	r4, r3, r2
 800f504:	4620      	mov	r0, r4
 800f506:	4629      	mov	r1, r5
 800f508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50c:	45c1      	cmp	r9, r8
 800f50e:	bf2e      	itee	cs
 800f510:	2200      	movcs	r2, #0
 800f512:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f516:	f1a7 0808 	subcc.w	r8, r7, #8
 800f51a:	f1b0 030b 	subs.w	r3, r0, #11
 800f51e:	d016      	beq.n	800f54e <__b2d+0x9a>
 800f520:	f1c3 0720 	rsb	r7, r3, #32
 800f524:	fa22 f107 	lsr.w	r1, r2, r7
 800f528:	45c8      	cmp	r8, r9
 800f52a:	fa06 f603 	lsl.w	r6, r6, r3
 800f52e:	ea46 0601 	orr.w	r6, r6, r1
 800f532:	bf94      	ite	ls
 800f534:	2100      	movls	r1, #0
 800f536:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f53a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f53e:	fa02 f003 	lsl.w	r0, r2, r3
 800f542:	40f9      	lsrs	r1, r7
 800f544:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f548:	ea40 0401 	orr.w	r4, r0, r1
 800f54c:	e7da      	b.n	800f504 <__b2d+0x50>
 800f54e:	4614      	mov	r4, r2
 800f550:	ea46 0501 	orr.w	r5, r6, r1
 800f554:	e7d6      	b.n	800f504 <__b2d+0x50>
 800f556:	bf00      	nop
 800f558:	3ff00000 	.word	0x3ff00000

0800f55c <__d2b>:
 800f55c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f560:	2101      	movs	r1, #1
 800f562:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f566:	4690      	mov	r8, r2
 800f568:	461d      	mov	r5, r3
 800f56a:	f7ff fc0d 	bl	800ed88 <_Balloc>
 800f56e:	4604      	mov	r4, r0
 800f570:	b930      	cbnz	r0, 800f580 <__d2b+0x24>
 800f572:	4602      	mov	r2, r0
 800f574:	f240 310a 	movw	r1, #778	; 0x30a
 800f578:	4b24      	ldr	r3, [pc, #144]	; (800f60c <__d2b+0xb0>)
 800f57a:	4825      	ldr	r0, [pc, #148]	; (800f610 <__d2b+0xb4>)
 800f57c:	f000 fb40 	bl	800fc00 <__assert_func>
 800f580:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f584:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f588:	bb2d      	cbnz	r5, 800f5d6 <__d2b+0x7a>
 800f58a:	9301      	str	r3, [sp, #4]
 800f58c:	f1b8 0300 	subs.w	r3, r8, #0
 800f590:	d026      	beq.n	800f5e0 <__d2b+0x84>
 800f592:	4668      	mov	r0, sp
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	f7ff fd09 	bl	800efac <__lo0bits>
 800f59a:	9900      	ldr	r1, [sp, #0]
 800f59c:	b1f0      	cbz	r0, 800f5dc <__d2b+0x80>
 800f59e:	9a01      	ldr	r2, [sp, #4]
 800f5a0:	f1c0 0320 	rsb	r3, r0, #32
 800f5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	40c2      	lsrs	r2, r0
 800f5ac:	6163      	str	r3, [r4, #20]
 800f5ae:	9201      	str	r2, [sp, #4]
 800f5b0:	9b01      	ldr	r3, [sp, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	bf14      	ite	ne
 800f5b6:	2102      	movne	r1, #2
 800f5b8:	2101      	moveq	r1, #1
 800f5ba:	61a3      	str	r3, [r4, #24]
 800f5bc:	6121      	str	r1, [r4, #16]
 800f5be:	b1c5      	cbz	r5, 800f5f2 <__d2b+0x96>
 800f5c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5c4:	4405      	add	r5, r0
 800f5c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5ca:	603d      	str	r5, [r7, #0]
 800f5cc:	6030      	str	r0, [r6, #0]
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	b002      	add	sp, #8
 800f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5da:	e7d6      	b.n	800f58a <__d2b+0x2e>
 800f5dc:	6161      	str	r1, [r4, #20]
 800f5de:	e7e7      	b.n	800f5b0 <__d2b+0x54>
 800f5e0:	a801      	add	r0, sp, #4
 800f5e2:	f7ff fce3 	bl	800efac <__lo0bits>
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	9b01      	ldr	r3, [sp, #4]
 800f5ea:	6121      	str	r1, [r4, #16]
 800f5ec:	6163      	str	r3, [r4, #20]
 800f5ee:	3020      	adds	r0, #32
 800f5f0:	e7e5      	b.n	800f5be <__d2b+0x62>
 800f5f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f5f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5fa:	6038      	str	r0, [r7, #0]
 800f5fc:	6918      	ldr	r0, [r3, #16]
 800f5fe:	f7ff fcb5 	bl	800ef6c <__hi0bits>
 800f602:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f606:	6031      	str	r1, [r6, #0]
 800f608:	e7e1      	b.n	800f5ce <__d2b+0x72>
 800f60a:	bf00      	nop
 800f60c:	08010a98 	.word	0x08010a98
 800f610:	08010b24 	.word	0x08010b24

0800f614 <__ratio>:
 800f614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	4688      	mov	r8, r1
 800f61a:	4669      	mov	r1, sp
 800f61c:	4681      	mov	r9, r0
 800f61e:	f7ff ff49 	bl	800f4b4 <__b2d>
 800f622:	460f      	mov	r7, r1
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	4640      	mov	r0, r8
 800f62a:	a901      	add	r1, sp, #4
 800f62c:	f7ff ff42 	bl	800f4b4 <__b2d>
 800f630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f634:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f638:	468b      	mov	fp, r1
 800f63a:	eba3 0c02 	sub.w	ip, r3, r2
 800f63e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f642:	1a9b      	subs	r3, r3, r2
 800f644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f648:	2b00      	cmp	r3, #0
 800f64a:	bfd5      	itete	le
 800f64c:	460a      	movle	r2, r1
 800f64e:	462a      	movgt	r2, r5
 800f650:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f654:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f658:	bfd8      	it	le
 800f65a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f65e:	465b      	mov	r3, fp
 800f660:	4602      	mov	r2, r0
 800f662:	4639      	mov	r1, r7
 800f664:	4620      	mov	r0, r4
 800f666:	f7f1 f861 	bl	800072c <__aeabi_ddiv>
 800f66a:	b003      	add	sp, #12
 800f66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f670 <__copybits>:
 800f670:	3901      	subs	r1, #1
 800f672:	b570      	push	{r4, r5, r6, lr}
 800f674:	1149      	asrs	r1, r1, #5
 800f676:	6914      	ldr	r4, [r2, #16]
 800f678:	3101      	adds	r1, #1
 800f67a:	f102 0314 	add.w	r3, r2, #20
 800f67e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f682:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f686:	1f05      	subs	r5, r0, #4
 800f688:	42a3      	cmp	r3, r4
 800f68a:	d30c      	bcc.n	800f6a6 <__copybits+0x36>
 800f68c:	1aa3      	subs	r3, r4, r2
 800f68e:	3b11      	subs	r3, #17
 800f690:	f023 0303 	bic.w	r3, r3, #3
 800f694:	3211      	adds	r2, #17
 800f696:	42a2      	cmp	r2, r4
 800f698:	bf88      	it	hi
 800f69a:	2300      	movhi	r3, #0
 800f69c:	4418      	add	r0, r3
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4288      	cmp	r0, r1
 800f6a2:	d305      	bcc.n	800f6b0 <__copybits+0x40>
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
 800f6a6:	f853 6b04 	ldr.w	r6, [r3], #4
 800f6aa:	f845 6f04 	str.w	r6, [r5, #4]!
 800f6ae:	e7eb      	b.n	800f688 <__copybits+0x18>
 800f6b0:	f840 3b04 	str.w	r3, [r0], #4
 800f6b4:	e7f4      	b.n	800f6a0 <__copybits+0x30>

0800f6b6 <__any_on>:
 800f6b6:	f100 0214 	add.w	r2, r0, #20
 800f6ba:	6900      	ldr	r0, [r0, #16]
 800f6bc:	114b      	asrs	r3, r1, #5
 800f6be:	4298      	cmp	r0, r3
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	db11      	blt.n	800f6e8 <__any_on+0x32>
 800f6c4:	dd0a      	ble.n	800f6dc <__any_on+0x26>
 800f6c6:	f011 011f 	ands.w	r1, r1, #31
 800f6ca:	d007      	beq.n	800f6dc <__any_on+0x26>
 800f6cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f6d0:	fa24 f001 	lsr.w	r0, r4, r1
 800f6d4:	fa00 f101 	lsl.w	r1, r0, r1
 800f6d8:	428c      	cmp	r4, r1
 800f6da:	d10b      	bne.n	800f6f4 <__any_on+0x3e>
 800f6dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d803      	bhi.n	800f6ec <__any_on+0x36>
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	bd10      	pop	{r4, pc}
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e7f7      	b.n	800f6dc <__any_on+0x26>
 800f6ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	d0f5      	beq.n	800f6e0 <__any_on+0x2a>
 800f6f4:	2001      	movs	r0, #1
 800f6f6:	e7f6      	b.n	800f6e6 <__any_on+0x30>

0800f6f8 <_calloc_r>:
 800f6f8:	b570      	push	{r4, r5, r6, lr}
 800f6fa:	fba1 5402 	umull	r5, r4, r1, r2
 800f6fe:	b934      	cbnz	r4, 800f70e <_calloc_r+0x16>
 800f700:	4629      	mov	r1, r5
 800f702:	f000 f875 	bl	800f7f0 <_malloc_r>
 800f706:	4606      	mov	r6, r0
 800f708:	b928      	cbnz	r0, 800f716 <_calloc_r+0x1e>
 800f70a:	4630      	mov	r0, r6
 800f70c:	bd70      	pop	{r4, r5, r6, pc}
 800f70e:	220c      	movs	r2, #12
 800f710:	2600      	movs	r6, #0
 800f712:	6002      	str	r2, [r0, #0]
 800f714:	e7f9      	b.n	800f70a <_calloc_r+0x12>
 800f716:	462a      	mov	r2, r5
 800f718:	4621      	mov	r1, r4
 800f71a:	f7fc fbcb 	bl	800beb4 <memset>
 800f71e:	e7f4      	b.n	800f70a <_calloc_r+0x12>

0800f720 <_free_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4605      	mov	r5, r0
 800f724:	2900      	cmp	r1, #0
 800f726:	d040      	beq.n	800f7aa <_free_r+0x8a>
 800f728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f72c:	1f0c      	subs	r4, r1, #4
 800f72e:	2b00      	cmp	r3, #0
 800f730:	bfb8      	it	lt
 800f732:	18e4      	addlt	r4, r4, r3
 800f734:	f000 faae 	bl	800fc94 <__malloc_lock>
 800f738:	4a1c      	ldr	r2, [pc, #112]	; (800f7ac <_free_r+0x8c>)
 800f73a:	6813      	ldr	r3, [r2, #0]
 800f73c:	b933      	cbnz	r3, 800f74c <_free_r+0x2c>
 800f73e:	6063      	str	r3, [r4, #4]
 800f740:	6014      	str	r4, [r2, #0]
 800f742:	4628      	mov	r0, r5
 800f744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f748:	f000 baaa 	b.w	800fca0 <__malloc_unlock>
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	d908      	bls.n	800f762 <_free_r+0x42>
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	1821      	adds	r1, r4, r0
 800f754:	428b      	cmp	r3, r1
 800f756:	bf01      	itttt	eq
 800f758:	6819      	ldreq	r1, [r3, #0]
 800f75a:	685b      	ldreq	r3, [r3, #4]
 800f75c:	1809      	addeq	r1, r1, r0
 800f75e:	6021      	streq	r1, [r4, #0]
 800f760:	e7ed      	b.n	800f73e <_free_r+0x1e>
 800f762:	461a      	mov	r2, r3
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b10b      	cbz	r3, 800f76c <_free_r+0x4c>
 800f768:	42a3      	cmp	r3, r4
 800f76a:	d9fa      	bls.n	800f762 <_free_r+0x42>
 800f76c:	6811      	ldr	r1, [r2, #0]
 800f76e:	1850      	adds	r0, r2, r1
 800f770:	42a0      	cmp	r0, r4
 800f772:	d10b      	bne.n	800f78c <_free_r+0x6c>
 800f774:	6820      	ldr	r0, [r4, #0]
 800f776:	4401      	add	r1, r0
 800f778:	1850      	adds	r0, r2, r1
 800f77a:	4283      	cmp	r3, r0
 800f77c:	6011      	str	r1, [r2, #0]
 800f77e:	d1e0      	bne.n	800f742 <_free_r+0x22>
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4401      	add	r1, r0
 800f786:	6011      	str	r1, [r2, #0]
 800f788:	6053      	str	r3, [r2, #4]
 800f78a:	e7da      	b.n	800f742 <_free_r+0x22>
 800f78c:	d902      	bls.n	800f794 <_free_r+0x74>
 800f78e:	230c      	movs	r3, #12
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	e7d6      	b.n	800f742 <_free_r+0x22>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	1821      	adds	r1, r4, r0
 800f798:	428b      	cmp	r3, r1
 800f79a:	bf01      	itttt	eq
 800f79c:	6819      	ldreq	r1, [r3, #0]
 800f79e:	685b      	ldreq	r3, [r3, #4]
 800f7a0:	1809      	addeq	r1, r1, r0
 800f7a2:	6021      	streq	r1, [r4, #0]
 800f7a4:	6063      	str	r3, [r4, #4]
 800f7a6:	6054      	str	r4, [r2, #4]
 800f7a8:	e7cb      	b.n	800f742 <_free_r+0x22>
 800f7aa:	bd38      	pop	{r3, r4, r5, pc}
 800f7ac:	20001a9c 	.word	0x20001a9c

0800f7b0 <sbrk_aligned>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	4e0e      	ldr	r6, [pc, #56]	; (800f7ec <sbrk_aligned+0x3c>)
 800f7b4:	460c      	mov	r4, r1
 800f7b6:	6831      	ldr	r1, [r6, #0]
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	b911      	cbnz	r1, 800f7c2 <sbrk_aligned+0x12>
 800f7bc:	f000 f9ee 	bl	800fb9c <_sbrk_r>
 800f7c0:	6030      	str	r0, [r6, #0]
 800f7c2:	4621      	mov	r1, r4
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	f000 f9e9 	bl	800fb9c <_sbrk_r>
 800f7ca:	1c43      	adds	r3, r0, #1
 800f7cc:	d00a      	beq.n	800f7e4 <sbrk_aligned+0x34>
 800f7ce:	1cc4      	adds	r4, r0, #3
 800f7d0:	f024 0403 	bic.w	r4, r4, #3
 800f7d4:	42a0      	cmp	r0, r4
 800f7d6:	d007      	beq.n	800f7e8 <sbrk_aligned+0x38>
 800f7d8:	1a21      	subs	r1, r4, r0
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f000 f9de 	bl	800fb9c <_sbrk_r>
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d101      	bne.n	800f7e8 <sbrk_aligned+0x38>
 800f7e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	bd70      	pop	{r4, r5, r6, pc}
 800f7ec:	20001aa0 	.word	0x20001aa0

0800f7f0 <_malloc_r>:
 800f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f4:	1ccd      	adds	r5, r1, #3
 800f7f6:	f025 0503 	bic.w	r5, r5, #3
 800f7fa:	3508      	adds	r5, #8
 800f7fc:	2d0c      	cmp	r5, #12
 800f7fe:	bf38      	it	cc
 800f800:	250c      	movcc	r5, #12
 800f802:	2d00      	cmp	r5, #0
 800f804:	4607      	mov	r7, r0
 800f806:	db01      	blt.n	800f80c <_malloc_r+0x1c>
 800f808:	42a9      	cmp	r1, r5
 800f80a:	d905      	bls.n	800f818 <_malloc_r+0x28>
 800f80c:	230c      	movs	r3, #12
 800f80e:	2600      	movs	r6, #0
 800f810:	603b      	str	r3, [r7, #0]
 800f812:	4630      	mov	r0, r6
 800f814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f818:	4e2e      	ldr	r6, [pc, #184]	; (800f8d4 <_malloc_r+0xe4>)
 800f81a:	f000 fa3b 	bl	800fc94 <__malloc_lock>
 800f81e:	6833      	ldr	r3, [r6, #0]
 800f820:	461c      	mov	r4, r3
 800f822:	bb34      	cbnz	r4, 800f872 <_malloc_r+0x82>
 800f824:	4629      	mov	r1, r5
 800f826:	4638      	mov	r0, r7
 800f828:	f7ff ffc2 	bl	800f7b0 <sbrk_aligned>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	4604      	mov	r4, r0
 800f830:	d14d      	bne.n	800f8ce <_malloc_r+0xde>
 800f832:	6834      	ldr	r4, [r6, #0]
 800f834:	4626      	mov	r6, r4
 800f836:	2e00      	cmp	r6, #0
 800f838:	d140      	bne.n	800f8bc <_malloc_r+0xcc>
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	4631      	mov	r1, r6
 800f83e:	4638      	mov	r0, r7
 800f840:	eb04 0803 	add.w	r8, r4, r3
 800f844:	f000 f9aa 	bl	800fb9c <_sbrk_r>
 800f848:	4580      	cmp	r8, r0
 800f84a:	d13a      	bne.n	800f8c2 <_malloc_r+0xd2>
 800f84c:	6821      	ldr	r1, [r4, #0]
 800f84e:	3503      	adds	r5, #3
 800f850:	1a6d      	subs	r5, r5, r1
 800f852:	f025 0503 	bic.w	r5, r5, #3
 800f856:	3508      	adds	r5, #8
 800f858:	2d0c      	cmp	r5, #12
 800f85a:	bf38      	it	cc
 800f85c:	250c      	movcc	r5, #12
 800f85e:	4638      	mov	r0, r7
 800f860:	4629      	mov	r1, r5
 800f862:	f7ff ffa5 	bl	800f7b0 <sbrk_aligned>
 800f866:	3001      	adds	r0, #1
 800f868:	d02b      	beq.n	800f8c2 <_malloc_r+0xd2>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	442b      	add	r3, r5
 800f86e:	6023      	str	r3, [r4, #0]
 800f870:	e00e      	b.n	800f890 <_malloc_r+0xa0>
 800f872:	6822      	ldr	r2, [r4, #0]
 800f874:	1b52      	subs	r2, r2, r5
 800f876:	d41e      	bmi.n	800f8b6 <_malloc_r+0xc6>
 800f878:	2a0b      	cmp	r2, #11
 800f87a:	d916      	bls.n	800f8aa <_malloc_r+0xba>
 800f87c:	1961      	adds	r1, r4, r5
 800f87e:	42a3      	cmp	r3, r4
 800f880:	6025      	str	r5, [r4, #0]
 800f882:	bf18      	it	ne
 800f884:	6059      	strne	r1, [r3, #4]
 800f886:	6863      	ldr	r3, [r4, #4]
 800f888:	bf08      	it	eq
 800f88a:	6031      	streq	r1, [r6, #0]
 800f88c:	5162      	str	r2, [r4, r5]
 800f88e:	604b      	str	r3, [r1, #4]
 800f890:	4638      	mov	r0, r7
 800f892:	f104 060b 	add.w	r6, r4, #11
 800f896:	f000 fa03 	bl	800fca0 <__malloc_unlock>
 800f89a:	f026 0607 	bic.w	r6, r6, #7
 800f89e:	1d23      	adds	r3, r4, #4
 800f8a0:	1af2      	subs	r2, r6, r3
 800f8a2:	d0b6      	beq.n	800f812 <_malloc_r+0x22>
 800f8a4:	1b9b      	subs	r3, r3, r6
 800f8a6:	50a3      	str	r3, [r4, r2]
 800f8a8:	e7b3      	b.n	800f812 <_malloc_r+0x22>
 800f8aa:	6862      	ldr	r2, [r4, #4]
 800f8ac:	42a3      	cmp	r3, r4
 800f8ae:	bf0c      	ite	eq
 800f8b0:	6032      	streq	r2, [r6, #0]
 800f8b2:	605a      	strne	r2, [r3, #4]
 800f8b4:	e7ec      	b.n	800f890 <_malloc_r+0xa0>
 800f8b6:	4623      	mov	r3, r4
 800f8b8:	6864      	ldr	r4, [r4, #4]
 800f8ba:	e7b2      	b.n	800f822 <_malloc_r+0x32>
 800f8bc:	4634      	mov	r4, r6
 800f8be:	6876      	ldr	r6, [r6, #4]
 800f8c0:	e7b9      	b.n	800f836 <_malloc_r+0x46>
 800f8c2:	230c      	movs	r3, #12
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	603b      	str	r3, [r7, #0]
 800f8c8:	f000 f9ea 	bl	800fca0 <__malloc_unlock>
 800f8cc:	e7a1      	b.n	800f812 <_malloc_r+0x22>
 800f8ce:	6025      	str	r5, [r4, #0]
 800f8d0:	e7de      	b.n	800f890 <_malloc_r+0xa0>
 800f8d2:	bf00      	nop
 800f8d4:	20001a9c 	.word	0x20001a9c

0800f8d8 <__ssputs_r>:
 800f8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8dc:	688e      	ldr	r6, [r1, #8]
 800f8de:	4682      	mov	sl, r0
 800f8e0:	429e      	cmp	r6, r3
 800f8e2:	460c      	mov	r4, r1
 800f8e4:	4690      	mov	r8, r2
 800f8e6:	461f      	mov	r7, r3
 800f8e8:	d838      	bhi.n	800f95c <__ssputs_r+0x84>
 800f8ea:	898a      	ldrh	r2, [r1, #12]
 800f8ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8f0:	d032      	beq.n	800f958 <__ssputs_r+0x80>
 800f8f2:	6825      	ldr	r5, [r4, #0]
 800f8f4:	6909      	ldr	r1, [r1, #16]
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	eba5 0901 	sub.w	r9, r5, r1
 800f8fc:	6965      	ldr	r5, [r4, #20]
 800f8fe:	444b      	add	r3, r9
 800f900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f908:	106d      	asrs	r5, r5, #1
 800f90a:	429d      	cmp	r5, r3
 800f90c:	bf38      	it	cc
 800f90e:	461d      	movcc	r5, r3
 800f910:	0553      	lsls	r3, r2, #21
 800f912:	d531      	bpl.n	800f978 <__ssputs_r+0xa0>
 800f914:	4629      	mov	r1, r5
 800f916:	f7ff ff6b 	bl	800f7f0 <_malloc_r>
 800f91a:	4606      	mov	r6, r0
 800f91c:	b950      	cbnz	r0, 800f934 <__ssputs_r+0x5c>
 800f91e:	230c      	movs	r3, #12
 800f920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f924:	f8ca 3000 	str.w	r3, [sl]
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f92e:	81a3      	strh	r3, [r4, #12]
 800f930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f934:	464a      	mov	r2, r9
 800f936:	6921      	ldr	r1, [r4, #16]
 800f938:	f7fc faae 	bl	800be98 <memcpy>
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	6126      	str	r6, [r4, #16]
 800f94a:	444e      	add	r6, r9
 800f94c:	6026      	str	r6, [r4, #0]
 800f94e:	463e      	mov	r6, r7
 800f950:	6165      	str	r5, [r4, #20]
 800f952:	eba5 0509 	sub.w	r5, r5, r9
 800f956:	60a5      	str	r5, [r4, #8]
 800f958:	42be      	cmp	r6, r7
 800f95a:	d900      	bls.n	800f95e <__ssputs_r+0x86>
 800f95c:	463e      	mov	r6, r7
 800f95e:	4632      	mov	r2, r6
 800f960:	4641      	mov	r1, r8
 800f962:	6820      	ldr	r0, [r4, #0]
 800f964:	f000 f97c 	bl	800fc60 <memmove>
 800f968:	68a3      	ldr	r3, [r4, #8]
 800f96a:	2000      	movs	r0, #0
 800f96c:	1b9b      	subs	r3, r3, r6
 800f96e:	60a3      	str	r3, [r4, #8]
 800f970:	6823      	ldr	r3, [r4, #0]
 800f972:	4433      	add	r3, r6
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	e7db      	b.n	800f930 <__ssputs_r+0x58>
 800f978:	462a      	mov	r2, r5
 800f97a:	f000 f997 	bl	800fcac <_realloc_r>
 800f97e:	4606      	mov	r6, r0
 800f980:	2800      	cmp	r0, #0
 800f982:	d1e1      	bne.n	800f948 <__ssputs_r+0x70>
 800f984:	4650      	mov	r0, sl
 800f986:	6921      	ldr	r1, [r4, #16]
 800f988:	f7ff feca 	bl	800f720 <_free_r>
 800f98c:	e7c7      	b.n	800f91e <__ssputs_r+0x46>
	...

0800f990 <_svfiprintf_r>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	4698      	mov	r8, r3
 800f996:	898b      	ldrh	r3, [r1, #12]
 800f998:	4607      	mov	r7, r0
 800f99a:	061b      	lsls	r3, r3, #24
 800f99c:	460d      	mov	r5, r1
 800f99e:	4614      	mov	r4, r2
 800f9a0:	b09d      	sub	sp, #116	; 0x74
 800f9a2:	d50e      	bpl.n	800f9c2 <_svfiprintf_r+0x32>
 800f9a4:	690b      	ldr	r3, [r1, #16]
 800f9a6:	b963      	cbnz	r3, 800f9c2 <_svfiprintf_r+0x32>
 800f9a8:	2140      	movs	r1, #64	; 0x40
 800f9aa:	f7ff ff21 	bl	800f7f0 <_malloc_r>
 800f9ae:	6028      	str	r0, [r5, #0]
 800f9b0:	6128      	str	r0, [r5, #16]
 800f9b2:	b920      	cbnz	r0, 800f9be <_svfiprintf_r+0x2e>
 800f9b4:	230c      	movs	r3, #12
 800f9b6:	603b      	str	r3, [r7, #0]
 800f9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9bc:	e0d1      	b.n	800fb62 <_svfiprintf_r+0x1d2>
 800f9be:	2340      	movs	r3, #64	; 0x40
 800f9c0:	616b      	str	r3, [r5, #20]
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c6:	2320      	movs	r3, #32
 800f9c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9cc:	2330      	movs	r3, #48	; 0x30
 800f9ce:	f04f 0901 	mov.w	r9, #1
 800f9d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb7c <_svfiprintf_r+0x1ec>
 800f9da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9de:	4623      	mov	r3, r4
 800f9e0:	469a      	mov	sl, r3
 800f9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9e6:	b10a      	cbz	r2, 800f9ec <_svfiprintf_r+0x5c>
 800f9e8:	2a25      	cmp	r2, #37	; 0x25
 800f9ea:	d1f9      	bne.n	800f9e0 <_svfiprintf_r+0x50>
 800f9ec:	ebba 0b04 	subs.w	fp, sl, r4
 800f9f0:	d00b      	beq.n	800fa0a <_svfiprintf_r+0x7a>
 800f9f2:	465b      	mov	r3, fp
 800f9f4:	4622      	mov	r2, r4
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f7ff ff6d 	bl	800f8d8 <__ssputs_r>
 800f9fe:	3001      	adds	r0, #1
 800fa00:	f000 80aa 	beq.w	800fb58 <_svfiprintf_r+0x1c8>
 800fa04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa06:	445a      	add	r2, fp
 800fa08:	9209      	str	r2, [sp, #36]	; 0x24
 800fa0a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f000 80a2 	beq.w	800fb58 <_svfiprintf_r+0x1c8>
 800fa14:	2300      	movs	r3, #0
 800fa16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa1e:	f10a 0a01 	add.w	sl, sl, #1
 800fa22:	9304      	str	r3, [sp, #16]
 800fa24:	9307      	str	r3, [sp, #28]
 800fa26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa2a:	931a      	str	r3, [sp, #104]	; 0x68
 800fa2c:	4654      	mov	r4, sl
 800fa2e:	2205      	movs	r2, #5
 800fa30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa34:	4851      	ldr	r0, [pc, #324]	; (800fb7c <_svfiprintf_r+0x1ec>)
 800fa36:	f7ff f999 	bl	800ed6c <memchr>
 800fa3a:	9a04      	ldr	r2, [sp, #16]
 800fa3c:	b9d8      	cbnz	r0, 800fa76 <_svfiprintf_r+0xe6>
 800fa3e:	06d0      	lsls	r0, r2, #27
 800fa40:	bf44      	itt	mi
 800fa42:	2320      	movmi	r3, #32
 800fa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa48:	0711      	lsls	r1, r2, #28
 800fa4a:	bf44      	itt	mi
 800fa4c:	232b      	movmi	r3, #43	; 0x2b
 800fa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa52:	f89a 3000 	ldrb.w	r3, [sl]
 800fa56:	2b2a      	cmp	r3, #42	; 0x2a
 800fa58:	d015      	beq.n	800fa86 <_svfiprintf_r+0xf6>
 800fa5a:	4654      	mov	r4, sl
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	f04f 0c0a 	mov.w	ip, #10
 800fa62:	9a07      	ldr	r2, [sp, #28]
 800fa64:	4621      	mov	r1, r4
 800fa66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa6a:	3b30      	subs	r3, #48	; 0x30
 800fa6c:	2b09      	cmp	r3, #9
 800fa6e:	d94e      	bls.n	800fb0e <_svfiprintf_r+0x17e>
 800fa70:	b1b0      	cbz	r0, 800faa0 <_svfiprintf_r+0x110>
 800fa72:	9207      	str	r2, [sp, #28]
 800fa74:	e014      	b.n	800faa0 <_svfiprintf_r+0x110>
 800fa76:	eba0 0308 	sub.w	r3, r0, r8
 800fa7a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	46a2      	mov	sl, r4
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	e7d2      	b.n	800fa2c <_svfiprintf_r+0x9c>
 800fa86:	9b03      	ldr	r3, [sp, #12]
 800fa88:	1d19      	adds	r1, r3, #4
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	9103      	str	r1, [sp, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	bfbb      	ittet	lt
 800fa92:	425b      	neglt	r3, r3
 800fa94:	f042 0202 	orrlt.w	r2, r2, #2
 800fa98:	9307      	strge	r3, [sp, #28]
 800fa9a:	9307      	strlt	r3, [sp, #28]
 800fa9c:	bfb8      	it	lt
 800fa9e:	9204      	strlt	r2, [sp, #16]
 800faa0:	7823      	ldrb	r3, [r4, #0]
 800faa2:	2b2e      	cmp	r3, #46	; 0x2e
 800faa4:	d10c      	bne.n	800fac0 <_svfiprintf_r+0x130>
 800faa6:	7863      	ldrb	r3, [r4, #1]
 800faa8:	2b2a      	cmp	r3, #42	; 0x2a
 800faaa:	d135      	bne.n	800fb18 <_svfiprintf_r+0x188>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	3402      	adds	r4, #2
 800fab0:	1d1a      	adds	r2, r3, #4
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	9203      	str	r2, [sp, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	bfb8      	it	lt
 800faba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fabe:	9305      	str	r3, [sp, #20]
 800fac0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800fb80 <_svfiprintf_r+0x1f0>
 800fac4:	2203      	movs	r2, #3
 800fac6:	4650      	mov	r0, sl
 800fac8:	7821      	ldrb	r1, [r4, #0]
 800faca:	f7ff f94f 	bl	800ed6c <memchr>
 800face:	b140      	cbz	r0, 800fae2 <_svfiprintf_r+0x152>
 800fad0:	2340      	movs	r3, #64	; 0x40
 800fad2:	eba0 000a 	sub.w	r0, r0, sl
 800fad6:	fa03 f000 	lsl.w	r0, r3, r0
 800fada:	9b04      	ldr	r3, [sp, #16]
 800fadc:	3401      	adds	r4, #1
 800fade:	4303      	orrs	r3, r0
 800fae0:	9304      	str	r3, [sp, #16]
 800fae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fae6:	2206      	movs	r2, #6
 800fae8:	4826      	ldr	r0, [pc, #152]	; (800fb84 <_svfiprintf_r+0x1f4>)
 800faea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faee:	f7ff f93d 	bl	800ed6c <memchr>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	d038      	beq.n	800fb68 <_svfiprintf_r+0x1d8>
 800faf6:	4b24      	ldr	r3, [pc, #144]	; (800fb88 <_svfiprintf_r+0x1f8>)
 800faf8:	bb1b      	cbnz	r3, 800fb42 <_svfiprintf_r+0x1b2>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	3307      	adds	r3, #7
 800fafe:	f023 0307 	bic.w	r3, r3, #7
 800fb02:	3308      	adds	r3, #8
 800fb04:	9303      	str	r3, [sp, #12]
 800fb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb08:	4433      	add	r3, r6
 800fb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb0c:	e767      	b.n	800f9de <_svfiprintf_r+0x4e>
 800fb0e:	460c      	mov	r4, r1
 800fb10:	2001      	movs	r0, #1
 800fb12:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb16:	e7a5      	b.n	800fa64 <_svfiprintf_r+0xd4>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f04f 0c0a 	mov.w	ip, #10
 800fb1e:	4619      	mov	r1, r3
 800fb20:	3401      	adds	r4, #1
 800fb22:	9305      	str	r3, [sp, #20]
 800fb24:	4620      	mov	r0, r4
 800fb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb2a:	3a30      	subs	r2, #48	; 0x30
 800fb2c:	2a09      	cmp	r2, #9
 800fb2e:	d903      	bls.n	800fb38 <_svfiprintf_r+0x1a8>
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0c5      	beq.n	800fac0 <_svfiprintf_r+0x130>
 800fb34:	9105      	str	r1, [sp, #20]
 800fb36:	e7c3      	b.n	800fac0 <_svfiprintf_r+0x130>
 800fb38:	4604      	mov	r4, r0
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb40:	e7f0      	b.n	800fb24 <_svfiprintf_r+0x194>
 800fb42:	ab03      	add	r3, sp, #12
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	462a      	mov	r2, r5
 800fb48:	4638      	mov	r0, r7
 800fb4a:	4b10      	ldr	r3, [pc, #64]	; (800fb8c <_svfiprintf_r+0x1fc>)
 800fb4c:	a904      	add	r1, sp, #16
 800fb4e:	f7fc fa57 	bl	800c000 <_printf_float>
 800fb52:	1c42      	adds	r2, r0, #1
 800fb54:	4606      	mov	r6, r0
 800fb56:	d1d6      	bne.n	800fb06 <_svfiprintf_r+0x176>
 800fb58:	89ab      	ldrh	r3, [r5, #12]
 800fb5a:	065b      	lsls	r3, r3, #25
 800fb5c:	f53f af2c 	bmi.w	800f9b8 <_svfiprintf_r+0x28>
 800fb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb62:	b01d      	add	sp, #116	; 0x74
 800fb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb68:	ab03      	add	r3, sp, #12
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	462a      	mov	r2, r5
 800fb6e:	4638      	mov	r0, r7
 800fb70:	4b06      	ldr	r3, [pc, #24]	; (800fb8c <_svfiprintf_r+0x1fc>)
 800fb72:	a904      	add	r1, sp, #16
 800fb74:	f7fc fce0 	bl	800c538 <_printf_i>
 800fb78:	e7eb      	b.n	800fb52 <_svfiprintf_r+0x1c2>
 800fb7a:	bf00      	nop
 800fb7c:	08010c7c 	.word	0x08010c7c
 800fb80:	08010c82 	.word	0x08010c82
 800fb84:	08010c86 	.word	0x08010c86
 800fb88:	0800c001 	.word	0x0800c001
 800fb8c:	0800f8d9 	.word	0x0800f8d9

0800fb90 <nan>:
 800fb90:	2000      	movs	r0, #0
 800fb92:	4901      	ldr	r1, [pc, #4]	; (800fb98 <nan+0x8>)
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	7ff80000 	.word	0x7ff80000

0800fb9c <_sbrk_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	2300      	movs	r3, #0
 800fba0:	4d05      	ldr	r5, [pc, #20]	; (800fbb8 <_sbrk_r+0x1c>)
 800fba2:	4604      	mov	r4, r0
 800fba4:	4608      	mov	r0, r1
 800fba6:	602b      	str	r3, [r5, #0]
 800fba8:	f7f2 f86c 	bl	8001c84 <_sbrk>
 800fbac:	1c43      	adds	r3, r0, #1
 800fbae:	d102      	bne.n	800fbb6 <_sbrk_r+0x1a>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	b103      	cbz	r3, 800fbb6 <_sbrk_r+0x1a>
 800fbb4:	6023      	str	r3, [r4, #0]
 800fbb6:	bd38      	pop	{r3, r4, r5, pc}
 800fbb8:	20001aa4 	.word	0x20001aa4

0800fbbc <strncmp>:
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	b172      	cbz	r2, 800fbe0 <strncmp+0x24>
 800fbc2:	3901      	subs	r1, #1
 800fbc4:	1884      	adds	r4, r0, r2
 800fbc6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbce:	4290      	cmp	r0, r2
 800fbd0:	d101      	bne.n	800fbd6 <strncmp+0x1a>
 800fbd2:	42a3      	cmp	r3, r4
 800fbd4:	d101      	bne.n	800fbda <strncmp+0x1e>
 800fbd6:	1a80      	subs	r0, r0, r2
 800fbd8:	bd10      	pop	{r4, pc}
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d1f3      	bne.n	800fbc6 <strncmp+0xa>
 800fbde:	e7fa      	b.n	800fbd6 <strncmp+0x1a>
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	e7f9      	b.n	800fbd8 <strncmp+0x1c>

0800fbe4 <__ascii_wctomb>:
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	4608      	mov	r0, r1
 800fbe8:	b141      	cbz	r1, 800fbfc <__ascii_wctomb+0x18>
 800fbea:	2aff      	cmp	r2, #255	; 0xff
 800fbec:	d904      	bls.n	800fbf8 <__ascii_wctomb+0x14>
 800fbee:	228a      	movs	r2, #138	; 0x8a
 800fbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	4770      	bx	lr
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	700a      	strb	r2, [r1, #0]
 800fbfc:	4770      	bx	lr
	...

0800fc00 <__assert_func>:
 800fc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc02:	4614      	mov	r4, r2
 800fc04:	461a      	mov	r2, r3
 800fc06:	4b09      	ldr	r3, [pc, #36]	; (800fc2c <__assert_func+0x2c>)
 800fc08:	4605      	mov	r5, r0
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68d8      	ldr	r0, [r3, #12]
 800fc0e:	b14c      	cbz	r4, 800fc24 <__assert_func+0x24>
 800fc10:	4b07      	ldr	r3, [pc, #28]	; (800fc30 <__assert_func+0x30>)
 800fc12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc16:	9100      	str	r1, [sp, #0]
 800fc18:	462b      	mov	r3, r5
 800fc1a:	4906      	ldr	r1, [pc, #24]	; (800fc34 <__assert_func+0x34>)
 800fc1c:	f000 f80e 	bl	800fc3c <fiprintf>
 800fc20:	f000 fa8a 	bl	8010138 <abort>
 800fc24:	4b04      	ldr	r3, [pc, #16]	; (800fc38 <__assert_func+0x38>)
 800fc26:	461c      	mov	r4, r3
 800fc28:	e7f3      	b.n	800fc12 <__assert_func+0x12>
 800fc2a:	bf00      	nop
 800fc2c:	2000017c 	.word	0x2000017c
 800fc30:	08010c8d 	.word	0x08010c8d
 800fc34:	08010c9a 	.word	0x08010c9a
 800fc38:	08010cc8 	.word	0x08010cc8

0800fc3c <fiprintf>:
 800fc3c:	b40e      	push	{r1, r2, r3}
 800fc3e:	b503      	push	{r0, r1, lr}
 800fc40:	4601      	mov	r1, r0
 800fc42:	ab03      	add	r3, sp, #12
 800fc44:	4805      	ldr	r0, [pc, #20]	; (800fc5c <fiprintf+0x20>)
 800fc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc4a:	6800      	ldr	r0, [r0, #0]
 800fc4c:	9301      	str	r3, [sp, #4]
 800fc4e:	f000 f883 	bl	800fd58 <_vfiprintf_r>
 800fc52:	b002      	add	sp, #8
 800fc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc58:	b003      	add	sp, #12
 800fc5a:	4770      	bx	lr
 800fc5c:	2000017c 	.word	0x2000017c

0800fc60 <memmove>:
 800fc60:	4288      	cmp	r0, r1
 800fc62:	b510      	push	{r4, lr}
 800fc64:	eb01 0402 	add.w	r4, r1, r2
 800fc68:	d902      	bls.n	800fc70 <memmove+0x10>
 800fc6a:	4284      	cmp	r4, r0
 800fc6c:	4623      	mov	r3, r4
 800fc6e:	d807      	bhi.n	800fc80 <memmove+0x20>
 800fc70:	1e43      	subs	r3, r0, #1
 800fc72:	42a1      	cmp	r1, r4
 800fc74:	d008      	beq.n	800fc88 <memmove+0x28>
 800fc76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc7e:	e7f8      	b.n	800fc72 <memmove+0x12>
 800fc80:	4601      	mov	r1, r0
 800fc82:	4402      	add	r2, r0
 800fc84:	428a      	cmp	r2, r1
 800fc86:	d100      	bne.n	800fc8a <memmove+0x2a>
 800fc88:	bd10      	pop	{r4, pc}
 800fc8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc92:	e7f7      	b.n	800fc84 <memmove+0x24>

0800fc94 <__malloc_lock>:
 800fc94:	4801      	ldr	r0, [pc, #4]	; (800fc9c <__malloc_lock+0x8>)
 800fc96:	f000 bc0b 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 800fc9a:	bf00      	nop
 800fc9c:	20001aa8 	.word	0x20001aa8

0800fca0 <__malloc_unlock>:
 800fca0:	4801      	ldr	r0, [pc, #4]	; (800fca8 <__malloc_unlock+0x8>)
 800fca2:	f000 bc06 	b.w	80104b2 <__retarget_lock_release_recursive>
 800fca6:	bf00      	nop
 800fca8:	20001aa8 	.word	0x20001aa8

0800fcac <_realloc_r>:
 800fcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb0:	4680      	mov	r8, r0
 800fcb2:	4614      	mov	r4, r2
 800fcb4:	460e      	mov	r6, r1
 800fcb6:	b921      	cbnz	r1, 800fcc2 <_realloc_r+0x16>
 800fcb8:	4611      	mov	r1, r2
 800fcba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcbe:	f7ff bd97 	b.w	800f7f0 <_malloc_r>
 800fcc2:	b92a      	cbnz	r2, 800fcd0 <_realloc_r+0x24>
 800fcc4:	f7ff fd2c 	bl	800f720 <_free_r>
 800fcc8:	4625      	mov	r5, r4
 800fcca:	4628      	mov	r0, r5
 800fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd0:	f000 fc56 	bl	8010580 <_malloc_usable_size_r>
 800fcd4:	4284      	cmp	r4, r0
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	d802      	bhi.n	800fce0 <_realloc_r+0x34>
 800fcda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcde:	d812      	bhi.n	800fd06 <_realloc_r+0x5a>
 800fce0:	4621      	mov	r1, r4
 800fce2:	4640      	mov	r0, r8
 800fce4:	f7ff fd84 	bl	800f7f0 <_malloc_r>
 800fce8:	4605      	mov	r5, r0
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d0ed      	beq.n	800fcca <_realloc_r+0x1e>
 800fcee:	42bc      	cmp	r4, r7
 800fcf0:	4622      	mov	r2, r4
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	bf28      	it	cs
 800fcf6:	463a      	movcs	r2, r7
 800fcf8:	f7fc f8ce 	bl	800be98 <memcpy>
 800fcfc:	4631      	mov	r1, r6
 800fcfe:	4640      	mov	r0, r8
 800fd00:	f7ff fd0e 	bl	800f720 <_free_r>
 800fd04:	e7e1      	b.n	800fcca <_realloc_r+0x1e>
 800fd06:	4635      	mov	r5, r6
 800fd08:	e7df      	b.n	800fcca <_realloc_r+0x1e>

0800fd0a <__sfputc_r>:
 800fd0a:	6893      	ldr	r3, [r2, #8]
 800fd0c:	b410      	push	{r4}
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	6093      	str	r3, [r2, #8]
 800fd14:	da07      	bge.n	800fd26 <__sfputc_r+0x1c>
 800fd16:	6994      	ldr	r4, [r2, #24]
 800fd18:	42a3      	cmp	r3, r4
 800fd1a:	db01      	blt.n	800fd20 <__sfputc_r+0x16>
 800fd1c:	290a      	cmp	r1, #10
 800fd1e:	d102      	bne.n	800fd26 <__sfputc_r+0x1c>
 800fd20:	bc10      	pop	{r4}
 800fd22:	f000 b949 	b.w	800ffb8 <__swbuf_r>
 800fd26:	6813      	ldr	r3, [r2, #0]
 800fd28:	1c58      	adds	r0, r3, #1
 800fd2a:	6010      	str	r0, [r2, #0]
 800fd2c:	7019      	strb	r1, [r3, #0]
 800fd2e:	4608      	mov	r0, r1
 800fd30:	bc10      	pop	{r4}
 800fd32:	4770      	bx	lr

0800fd34 <__sfputs_r>:
 800fd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd36:	4606      	mov	r6, r0
 800fd38:	460f      	mov	r7, r1
 800fd3a:	4614      	mov	r4, r2
 800fd3c:	18d5      	adds	r5, r2, r3
 800fd3e:	42ac      	cmp	r4, r5
 800fd40:	d101      	bne.n	800fd46 <__sfputs_r+0x12>
 800fd42:	2000      	movs	r0, #0
 800fd44:	e007      	b.n	800fd56 <__sfputs_r+0x22>
 800fd46:	463a      	mov	r2, r7
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4e:	f7ff ffdc 	bl	800fd0a <__sfputc_r>
 800fd52:	1c43      	adds	r3, r0, #1
 800fd54:	d1f3      	bne.n	800fd3e <__sfputs_r+0xa>
 800fd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd58 <_vfiprintf_r>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	460d      	mov	r5, r1
 800fd5e:	4614      	mov	r4, r2
 800fd60:	4698      	mov	r8, r3
 800fd62:	4606      	mov	r6, r0
 800fd64:	b09d      	sub	sp, #116	; 0x74
 800fd66:	b118      	cbz	r0, 800fd70 <_vfiprintf_r+0x18>
 800fd68:	6983      	ldr	r3, [r0, #24]
 800fd6a:	b90b      	cbnz	r3, 800fd70 <_vfiprintf_r+0x18>
 800fd6c:	f000 fb02 	bl	8010374 <__sinit>
 800fd70:	4b89      	ldr	r3, [pc, #548]	; (800ff98 <_vfiprintf_r+0x240>)
 800fd72:	429d      	cmp	r5, r3
 800fd74:	d11b      	bne.n	800fdae <_vfiprintf_r+0x56>
 800fd76:	6875      	ldr	r5, [r6, #4]
 800fd78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd7a:	07d9      	lsls	r1, r3, #31
 800fd7c:	d405      	bmi.n	800fd8a <_vfiprintf_r+0x32>
 800fd7e:	89ab      	ldrh	r3, [r5, #12]
 800fd80:	059a      	lsls	r2, r3, #22
 800fd82:	d402      	bmi.n	800fd8a <_vfiprintf_r+0x32>
 800fd84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd86:	f000 fb93 	bl	80104b0 <__retarget_lock_acquire_recursive>
 800fd8a:	89ab      	ldrh	r3, [r5, #12]
 800fd8c:	071b      	lsls	r3, r3, #28
 800fd8e:	d501      	bpl.n	800fd94 <_vfiprintf_r+0x3c>
 800fd90:	692b      	ldr	r3, [r5, #16]
 800fd92:	b9eb      	cbnz	r3, 800fdd0 <_vfiprintf_r+0x78>
 800fd94:	4629      	mov	r1, r5
 800fd96:	4630      	mov	r0, r6
 800fd98:	f000 f960 	bl	801005c <__swsetup_r>
 800fd9c:	b1c0      	cbz	r0, 800fdd0 <_vfiprintf_r+0x78>
 800fd9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fda0:	07dc      	lsls	r4, r3, #31
 800fda2:	d50e      	bpl.n	800fdc2 <_vfiprintf_r+0x6a>
 800fda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fda8:	b01d      	add	sp, #116	; 0x74
 800fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdae:	4b7b      	ldr	r3, [pc, #492]	; (800ff9c <_vfiprintf_r+0x244>)
 800fdb0:	429d      	cmp	r5, r3
 800fdb2:	d101      	bne.n	800fdb8 <_vfiprintf_r+0x60>
 800fdb4:	68b5      	ldr	r5, [r6, #8]
 800fdb6:	e7df      	b.n	800fd78 <_vfiprintf_r+0x20>
 800fdb8:	4b79      	ldr	r3, [pc, #484]	; (800ffa0 <_vfiprintf_r+0x248>)
 800fdba:	429d      	cmp	r5, r3
 800fdbc:	bf08      	it	eq
 800fdbe:	68f5      	ldreq	r5, [r6, #12]
 800fdc0:	e7da      	b.n	800fd78 <_vfiprintf_r+0x20>
 800fdc2:	89ab      	ldrh	r3, [r5, #12]
 800fdc4:	0598      	lsls	r0, r3, #22
 800fdc6:	d4ed      	bmi.n	800fda4 <_vfiprintf_r+0x4c>
 800fdc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdca:	f000 fb72 	bl	80104b2 <__retarget_lock_release_recursive>
 800fdce:	e7e9      	b.n	800fda4 <_vfiprintf_r+0x4c>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd4:	2320      	movs	r3, #32
 800fdd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdda:	2330      	movs	r3, #48	; 0x30
 800fddc:	f04f 0901 	mov.w	r9, #1
 800fde0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fde4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ffa4 <_vfiprintf_r+0x24c>
 800fde8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdec:	4623      	mov	r3, r4
 800fdee:	469a      	mov	sl, r3
 800fdf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdf4:	b10a      	cbz	r2, 800fdfa <_vfiprintf_r+0xa2>
 800fdf6:	2a25      	cmp	r2, #37	; 0x25
 800fdf8:	d1f9      	bne.n	800fdee <_vfiprintf_r+0x96>
 800fdfa:	ebba 0b04 	subs.w	fp, sl, r4
 800fdfe:	d00b      	beq.n	800fe18 <_vfiprintf_r+0xc0>
 800fe00:	465b      	mov	r3, fp
 800fe02:	4622      	mov	r2, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ff94 	bl	800fd34 <__sfputs_r>
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	f000 80aa 	beq.w	800ff66 <_vfiprintf_r+0x20e>
 800fe12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe14:	445a      	add	r2, fp
 800fe16:	9209      	str	r2, [sp, #36]	; 0x24
 800fe18:	f89a 3000 	ldrb.w	r3, [sl]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	f000 80a2 	beq.w	800ff66 <_vfiprintf_r+0x20e>
 800fe22:	2300      	movs	r3, #0
 800fe24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe2c:	f10a 0a01 	add.w	sl, sl, #1
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	9307      	str	r3, [sp, #28]
 800fe34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe38:	931a      	str	r3, [sp, #104]	; 0x68
 800fe3a:	4654      	mov	r4, sl
 800fe3c:	2205      	movs	r2, #5
 800fe3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe42:	4858      	ldr	r0, [pc, #352]	; (800ffa4 <_vfiprintf_r+0x24c>)
 800fe44:	f7fe ff92 	bl	800ed6c <memchr>
 800fe48:	9a04      	ldr	r2, [sp, #16]
 800fe4a:	b9d8      	cbnz	r0, 800fe84 <_vfiprintf_r+0x12c>
 800fe4c:	06d1      	lsls	r1, r2, #27
 800fe4e:	bf44      	itt	mi
 800fe50:	2320      	movmi	r3, #32
 800fe52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe56:	0713      	lsls	r3, r2, #28
 800fe58:	bf44      	itt	mi
 800fe5a:	232b      	movmi	r3, #43	; 0x2b
 800fe5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe60:	f89a 3000 	ldrb.w	r3, [sl]
 800fe64:	2b2a      	cmp	r3, #42	; 0x2a
 800fe66:	d015      	beq.n	800fe94 <_vfiprintf_r+0x13c>
 800fe68:	4654      	mov	r4, sl
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	f04f 0c0a 	mov.w	ip, #10
 800fe70:	9a07      	ldr	r2, [sp, #28]
 800fe72:	4621      	mov	r1, r4
 800fe74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe78:	3b30      	subs	r3, #48	; 0x30
 800fe7a:	2b09      	cmp	r3, #9
 800fe7c:	d94e      	bls.n	800ff1c <_vfiprintf_r+0x1c4>
 800fe7e:	b1b0      	cbz	r0, 800feae <_vfiprintf_r+0x156>
 800fe80:	9207      	str	r2, [sp, #28]
 800fe82:	e014      	b.n	800feae <_vfiprintf_r+0x156>
 800fe84:	eba0 0308 	sub.w	r3, r0, r8
 800fe88:	fa09 f303 	lsl.w	r3, r9, r3
 800fe8c:	4313      	orrs	r3, r2
 800fe8e:	46a2      	mov	sl, r4
 800fe90:	9304      	str	r3, [sp, #16]
 800fe92:	e7d2      	b.n	800fe3a <_vfiprintf_r+0xe2>
 800fe94:	9b03      	ldr	r3, [sp, #12]
 800fe96:	1d19      	adds	r1, r3, #4
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	9103      	str	r1, [sp, #12]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	bfbb      	ittet	lt
 800fea0:	425b      	neglt	r3, r3
 800fea2:	f042 0202 	orrlt.w	r2, r2, #2
 800fea6:	9307      	strge	r3, [sp, #28]
 800fea8:	9307      	strlt	r3, [sp, #28]
 800feaa:	bfb8      	it	lt
 800feac:	9204      	strlt	r2, [sp, #16]
 800feae:	7823      	ldrb	r3, [r4, #0]
 800feb0:	2b2e      	cmp	r3, #46	; 0x2e
 800feb2:	d10c      	bne.n	800fece <_vfiprintf_r+0x176>
 800feb4:	7863      	ldrb	r3, [r4, #1]
 800feb6:	2b2a      	cmp	r3, #42	; 0x2a
 800feb8:	d135      	bne.n	800ff26 <_vfiprintf_r+0x1ce>
 800feba:	9b03      	ldr	r3, [sp, #12]
 800febc:	3402      	adds	r4, #2
 800febe:	1d1a      	adds	r2, r3, #4
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	9203      	str	r2, [sp, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	bfb8      	it	lt
 800fec8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fecc:	9305      	str	r3, [sp, #20]
 800fece:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ffa8 <_vfiprintf_r+0x250>
 800fed2:	2203      	movs	r2, #3
 800fed4:	4650      	mov	r0, sl
 800fed6:	7821      	ldrb	r1, [r4, #0]
 800fed8:	f7fe ff48 	bl	800ed6c <memchr>
 800fedc:	b140      	cbz	r0, 800fef0 <_vfiprintf_r+0x198>
 800fede:	2340      	movs	r3, #64	; 0x40
 800fee0:	eba0 000a 	sub.w	r0, r0, sl
 800fee4:	fa03 f000 	lsl.w	r0, r3, r0
 800fee8:	9b04      	ldr	r3, [sp, #16]
 800feea:	3401      	adds	r4, #1
 800feec:	4303      	orrs	r3, r0
 800feee:	9304      	str	r3, [sp, #16]
 800fef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fef4:	2206      	movs	r2, #6
 800fef6:	482d      	ldr	r0, [pc, #180]	; (800ffac <_vfiprintf_r+0x254>)
 800fef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fefc:	f7fe ff36 	bl	800ed6c <memchr>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d03f      	beq.n	800ff84 <_vfiprintf_r+0x22c>
 800ff04:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <_vfiprintf_r+0x258>)
 800ff06:	bb1b      	cbnz	r3, 800ff50 <_vfiprintf_r+0x1f8>
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	3307      	adds	r3, #7
 800ff0c:	f023 0307 	bic.w	r3, r3, #7
 800ff10:	3308      	adds	r3, #8
 800ff12:	9303      	str	r3, [sp, #12]
 800ff14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff16:	443b      	add	r3, r7
 800ff18:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1a:	e767      	b.n	800fdec <_vfiprintf_r+0x94>
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	2001      	movs	r0, #1
 800ff20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff24:	e7a5      	b.n	800fe72 <_vfiprintf_r+0x11a>
 800ff26:	2300      	movs	r3, #0
 800ff28:	f04f 0c0a 	mov.w	ip, #10
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	3401      	adds	r4, #1
 800ff30:	9305      	str	r3, [sp, #20]
 800ff32:	4620      	mov	r0, r4
 800ff34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff38:	3a30      	subs	r2, #48	; 0x30
 800ff3a:	2a09      	cmp	r2, #9
 800ff3c:	d903      	bls.n	800ff46 <_vfiprintf_r+0x1ee>
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0c5      	beq.n	800fece <_vfiprintf_r+0x176>
 800ff42:	9105      	str	r1, [sp, #20]
 800ff44:	e7c3      	b.n	800fece <_vfiprintf_r+0x176>
 800ff46:	4604      	mov	r4, r0
 800ff48:	2301      	movs	r3, #1
 800ff4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff4e:	e7f0      	b.n	800ff32 <_vfiprintf_r+0x1da>
 800ff50:	ab03      	add	r3, sp, #12
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	462a      	mov	r2, r5
 800ff56:	4630      	mov	r0, r6
 800ff58:	4b16      	ldr	r3, [pc, #88]	; (800ffb4 <_vfiprintf_r+0x25c>)
 800ff5a:	a904      	add	r1, sp, #16
 800ff5c:	f7fc f850 	bl	800c000 <_printf_float>
 800ff60:	4607      	mov	r7, r0
 800ff62:	1c78      	adds	r0, r7, #1
 800ff64:	d1d6      	bne.n	800ff14 <_vfiprintf_r+0x1bc>
 800ff66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff68:	07d9      	lsls	r1, r3, #31
 800ff6a:	d405      	bmi.n	800ff78 <_vfiprintf_r+0x220>
 800ff6c:	89ab      	ldrh	r3, [r5, #12]
 800ff6e:	059a      	lsls	r2, r3, #22
 800ff70:	d402      	bmi.n	800ff78 <_vfiprintf_r+0x220>
 800ff72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff74:	f000 fa9d 	bl	80104b2 <__retarget_lock_release_recursive>
 800ff78:	89ab      	ldrh	r3, [r5, #12]
 800ff7a:	065b      	lsls	r3, r3, #25
 800ff7c:	f53f af12 	bmi.w	800fda4 <_vfiprintf_r+0x4c>
 800ff80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff82:	e711      	b.n	800fda8 <_vfiprintf_r+0x50>
 800ff84:	ab03      	add	r3, sp, #12
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	462a      	mov	r2, r5
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	4b09      	ldr	r3, [pc, #36]	; (800ffb4 <_vfiprintf_r+0x25c>)
 800ff8e:	a904      	add	r1, sp, #16
 800ff90:	f7fc fad2 	bl	800c538 <_printf_i>
 800ff94:	e7e4      	b.n	800ff60 <_vfiprintf_r+0x208>
 800ff96:	bf00      	nop
 800ff98:	08010cec 	.word	0x08010cec
 800ff9c:	08010d0c 	.word	0x08010d0c
 800ffa0:	08010ccc 	.word	0x08010ccc
 800ffa4:	08010c7c 	.word	0x08010c7c
 800ffa8:	08010c82 	.word	0x08010c82
 800ffac:	08010c86 	.word	0x08010c86
 800ffb0:	0800c001 	.word	0x0800c001
 800ffb4:	0800fd35 	.word	0x0800fd35

0800ffb8 <__swbuf_r>:
 800ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffba:	460e      	mov	r6, r1
 800ffbc:	4614      	mov	r4, r2
 800ffbe:	4605      	mov	r5, r0
 800ffc0:	b118      	cbz	r0, 800ffca <__swbuf_r+0x12>
 800ffc2:	6983      	ldr	r3, [r0, #24]
 800ffc4:	b90b      	cbnz	r3, 800ffca <__swbuf_r+0x12>
 800ffc6:	f000 f9d5 	bl	8010374 <__sinit>
 800ffca:	4b21      	ldr	r3, [pc, #132]	; (8010050 <__swbuf_r+0x98>)
 800ffcc:	429c      	cmp	r4, r3
 800ffce:	d12b      	bne.n	8010028 <__swbuf_r+0x70>
 800ffd0:	686c      	ldr	r4, [r5, #4]
 800ffd2:	69a3      	ldr	r3, [r4, #24]
 800ffd4:	60a3      	str	r3, [r4, #8]
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	071a      	lsls	r2, r3, #28
 800ffda:	d52f      	bpl.n	801003c <__swbuf_r+0x84>
 800ffdc:	6923      	ldr	r3, [r4, #16]
 800ffde:	b36b      	cbz	r3, 801003c <__swbuf_r+0x84>
 800ffe0:	6923      	ldr	r3, [r4, #16]
 800ffe2:	6820      	ldr	r0, [r4, #0]
 800ffe4:	b2f6      	uxtb	r6, r6
 800ffe6:	1ac0      	subs	r0, r0, r3
 800ffe8:	6963      	ldr	r3, [r4, #20]
 800ffea:	4637      	mov	r7, r6
 800ffec:	4283      	cmp	r3, r0
 800ffee:	dc04      	bgt.n	800fffa <__swbuf_r+0x42>
 800fff0:	4621      	mov	r1, r4
 800fff2:	4628      	mov	r0, r5
 800fff4:	f000 f92a 	bl	801024c <_fflush_r>
 800fff8:	bb30      	cbnz	r0, 8010048 <__swbuf_r+0x90>
 800fffa:	68a3      	ldr	r3, [r4, #8]
 800fffc:	3001      	adds	r0, #1
 800fffe:	3b01      	subs	r3, #1
 8010000:	60a3      	str	r3, [r4, #8]
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	1c5a      	adds	r2, r3, #1
 8010006:	6022      	str	r2, [r4, #0]
 8010008:	701e      	strb	r6, [r3, #0]
 801000a:	6963      	ldr	r3, [r4, #20]
 801000c:	4283      	cmp	r3, r0
 801000e:	d004      	beq.n	801001a <__swbuf_r+0x62>
 8010010:	89a3      	ldrh	r3, [r4, #12]
 8010012:	07db      	lsls	r3, r3, #31
 8010014:	d506      	bpl.n	8010024 <__swbuf_r+0x6c>
 8010016:	2e0a      	cmp	r6, #10
 8010018:	d104      	bne.n	8010024 <__swbuf_r+0x6c>
 801001a:	4621      	mov	r1, r4
 801001c:	4628      	mov	r0, r5
 801001e:	f000 f915 	bl	801024c <_fflush_r>
 8010022:	b988      	cbnz	r0, 8010048 <__swbuf_r+0x90>
 8010024:	4638      	mov	r0, r7
 8010026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010028:	4b0a      	ldr	r3, [pc, #40]	; (8010054 <__swbuf_r+0x9c>)
 801002a:	429c      	cmp	r4, r3
 801002c:	d101      	bne.n	8010032 <__swbuf_r+0x7a>
 801002e:	68ac      	ldr	r4, [r5, #8]
 8010030:	e7cf      	b.n	800ffd2 <__swbuf_r+0x1a>
 8010032:	4b09      	ldr	r3, [pc, #36]	; (8010058 <__swbuf_r+0xa0>)
 8010034:	429c      	cmp	r4, r3
 8010036:	bf08      	it	eq
 8010038:	68ec      	ldreq	r4, [r5, #12]
 801003a:	e7ca      	b.n	800ffd2 <__swbuf_r+0x1a>
 801003c:	4621      	mov	r1, r4
 801003e:	4628      	mov	r0, r5
 8010040:	f000 f80c 	bl	801005c <__swsetup_r>
 8010044:	2800      	cmp	r0, #0
 8010046:	d0cb      	beq.n	800ffe0 <__swbuf_r+0x28>
 8010048:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801004c:	e7ea      	b.n	8010024 <__swbuf_r+0x6c>
 801004e:	bf00      	nop
 8010050:	08010cec 	.word	0x08010cec
 8010054:	08010d0c 	.word	0x08010d0c
 8010058:	08010ccc 	.word	0x08010ccc

0801005c <__swsetup_r>:
 801005c:	4b32      	ldr	r3, [pc, #200]	; (8010128 <__swsetup_r+0xcc>)
 801005e:	b570      	push	{r4, r5, r6, lr}
 8010060:	681d      	ldr	r5, [r3, #0]
 8010062:	4606      	mov	r6, r0
 8010064:	460c      	mov	r4, r1
 8010066:	b125      	cbz	r5, 8010072 <__swsetup_r+0x16>
 8010068:	69ab      	ldr	r3, [r5, #24]
 801006a:	b913      	cbnz	r3, 8010072 <__swsetup_r+0x16>
 801006c:	4628      	mov	r0, r5
 801006e:	f000 f981 	bl	8010374 <__sinit>
 8010072:	4b2e      	ldr	r3, [pc, #184]	; (801012c <__swsetup_r+0xd0>)
 8010074:	429c      	cmp	r4, r3
 8010076:	d10f      	bne.n	8010098 <__swsetup_r+0x3c>
 8010078:	686c      	ldr	r4, [r5, #4]
 801007a:	89a3      	ldrh	r3, [r4, #12]
 801007c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010080:	0719      	lsls	r1, r3, #28
 8010082:	d42c      	bmi.n	80100de <__swsetup_r+0x82>
 8010084:	06dd      	lsls	r5, r3, #27
 8010086:	d411      	bmi.n	80100ac <__swsetup_r+0x50>
 8010088:	2309      	movs	r3, #9
 801008a:	6033      	str	r3, [r6, #0]
 801008c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010094:	81a3      	strh	r3, [r4, #12]
 8010096:	e03e      	b.n	8010116 <__swsetup_r+0xba>
 8010098:	4b25      	ldr	r3, [pc, #148]	; (8010130 <__swsetup_r+0xd4>)
 801009a:	429c      	cmp	r4, r3
 801009c:	d101      	bne.n	80100a2 <__swsetup_r+0x46>
 801009e:	68ac      	ldr	r4, [r5, #8]
 80100a0:	e7eb      	b.n	801007a <__swsetup_r+0x1e>
 80100a2:	4b24      	ldr	r3, [pc, #144]	; (8010134 <__swsetup_r+0xd8>)
 80100a4:	429c      	cmp	r4, r3
 80100a6:	bf08      	it	eq
 80100a8:	68ec      	ldreq	r4, [r5, #12]
 80100aa:	e7e6      	b.n	801007a <__swsetup_r+0x1e>
 80100ac:	0758      	lsls	r0, r3, #29
 80100ae:	d512      	bpl.n	80100d6 <__swsetup_r+0x7a>
 80100b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100b2:	b141      	cbz	r1, 80100c6 <__swsetup_r+0x6a>
 80100b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100b8:	4299      	cmp	r1, r3
 80100ba:	d002      	beq.n	80100c2 <__swsetup_r+0x66>
 80100bc:	4630      	mov	r0, r6
 80100be:	f7ff fb2f 	bl	800f720 <_free_r>
 80100c2:	2300      	movs	r3, #0
 80100c4:	6363      	str	r3, [r4, #52]	; 0x34
 80100c6:	89a3      	ldrh	r3, [r4, #12]
 80100c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100cc:	81a3      	strh	r3, [r4, #12]
 80100ce:	2300      	movs	r3, #0
 80100d0:	6063      	str	r3, [r4, #4]
 80100d2:	6923      	ldr	r3, [r4, #16]
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	f043 0308 	orr.w	r3, r3, #8
 80100dc:	81a3      	strh	r3, [r4, #12]
 80100de:	6923      	ldr	r3, [r4, #16]
 80100e0:	b94b      	cbnz	r3, 80100f6 <__swsetup_r+0x9a>
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ec:	d003      	beq.n	80100f6 <__swsetup_r+0x9a>
 80100ee:	4621      	mov	r1, r4
 80100f0:	4630      	mov	r0, r6
 80100f2:	f000 fa05 	bl	8010500 <__smakebuf_r>
 80100f6:	89a0      	ldrh	r0, [r4, #12]
 80100f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100fc:	f010 0301 	ands.w	r3, r0, #1
 8010100:	d00a      	beq.n	8010118 <__swsetup_r+0xbc>
 8010102:	2300      	movs	r3, #0
 8010104:	60a3      	str	r3, [r4, #8]
 8010106:	6963      	ldr	r3, [r4, #20]
 8010108:	425b      	negs	r3, r3
 801010a:	61a3      	str	r3, [r4, #24]
 801010c:	6923      	ldr	r3, [r4, #16]
 801010e:	b943      	cbnz	r3, 8010122 <__swsetup_r+0xc6>
 8010110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010114:	d1ba      	bne.n	801008c <__swsetup_r+0x30>
 8010116:	bd70      	pop	{r4, r5, r6, pc}
 8010118:	0781      	lsls	r1, r0, #30
 801011a:	bf58      	it	pl
 801011c:	6963      	ldrpl	r3, [r4, #20]
 801011e:	60a3      	str	r3, [r4, #8]
 8010120:	e7f4      	b.n	801010c <__swsetup_r+0xb0>
 8010122:	2000      	movs	r0, #0
 8010124:	e7f7      	b.n	8010116 <__swsetup_r+0xba>
 8010126:	bf00      	nop
 8010128:	2000017c 	.word	0x2000017c
 801012c:	08010cec 	.word	0x08010cec
 8010130:	08010d0c 	.word	0x08010d0c
 8010134:	08010ccc 	.word	0x08010ccc

08010138 <abort>:
 8010138:	2006      	movs	r0, #6
 801013a:	b508      	push	{r3, lr}
 801013c:	f000 fa50 	bl	80105e0 <raise>
 8010140:	2001      	movs	r0, #1
 8010142:	f7f1 fd2c 	bl	8001b9e <_exit>
	...

08010148 <__sflush_r>:
 8010148:	898a      	ldrh	r2, [r1, #12]
 801014a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014c:	4605      	mov	r5, r0
 801014e:	0710      	lsls	r0, r2, #28
 8010150:	460c      	mov	r4, r1
 8010152:	d457      	bmi.n	8010204 <__sflush_r+0xbc>
 8010154:	684b      	ldr	r3, [r1, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	dc04      	bgt.n	8010164 <__sflush_r+0x1c>
 801015a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801015c:	2b00      	cmp	r3, #0
 801015e:	dc01      	bgt.n	8010164 <__sflush_r+0x1c>
 8010160:	2000      	movs	r0, #0
 8010162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010166:	2e00      	cmp	r6, #0
 8010168:	d0fa      	beq.n	8010160 <__sflush_r+0x18>
 801016a:	2300      	movs	r3, #0
 801016c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010170:	682f      	ldr	r7, [r5, #0]
 8010172:	602b      	str	r3, [r5, #0]
 8010174:	d032      	beq.n	80101dc <__sflush_r+0x94>
 8010176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	075a      	lsls	r2, r3, #29
 801017c:	d505      	bpl.n	801018a <__sflush_r+0x42>
 801017e:	6863      	ldr	r3, [r4, #4]
 8010180:	1ac0      	subs	r0, r0, r3
 8010182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010184:	b10b      	cbz	r3, 801018a <__sflush_r+0x42>
 8010186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010188:	1ac0      	subs	r0, r0, r3
 801018a:	2300      	movs	r3, #0
 801018c:	4602      	mov	r2, r0
 801018e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010190:	4628      	mov	r0, r5
 8010192:	6a21      	ldr	r1, [r4, #32]
 8010194:	47b0      	blx	r6
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	d106      	bne.n	80101aa <__sflush_r+0x62>
 801019c:	6829      	ldr	r1, [r5, #0]
 801019e:	291d      	cmp	r1, #29
 80101a0:	d82c      	bhi.n	80101fc <__sflush_r+0xb4>
 80101a2:	4a29      	ldr	r2, [pc, #164]	; (8010248 <__sflush_r+0x100>)
 80101a4:	40ca      	lsrs	r2, r1
 80101a6:	07d6      	lsls	r6, r2, #31
 80101a8:	d528      	bpl.n	80101fc <__sflush_r+0xb4>
 80101aa:	2200      	movs	r2, #0
 80101ac:	6062      	str	r2, [r4, #4]
 80101ae:	6922      	ldr	r2, [r4, #16]
 80101b0:	04d9      	lsls	r1, r3, #19
 80101b2:	6022      	str	r2, [r4, #0]
 80101b4:	d504      	bpl.n	80101c0 <__sflush_r+0x78>
 80101b6:	1c42      	adds	r2, r0, #1
 80101b8:	d101      	bne.n	80101be <__sflush_r+0x76>
 80101ba:	682b      	ldr	r3, [r5, #0]
 80101bc:	b903      	cbnz	r3, 80101c0 <__sflush_r+0x78>
 80101be:	6560      	str	r0, [r4, #84]	; 0x54
 80101c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101c2:	602f      	str	r7, [r5, #0]
 80101c4:	2900      	cmp	r1, #0
 80101c6:	d0cb      	beq.n	8010160 <__sflush_r+0x18>
 80101c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101cc:	4299      	cmp	r1, r3
 80101ce:	d002      	beq.n	80101d6 <__sflush_r+0x8e>
 80101d0:	4628      	mov	r0, r5
 80101d2:	f7ff faa5 	bl	800f720 <_free_r>
 80101d6:	2000      	movs	r0, #0
 80101d8:	6360      	str	r0, [r4, #52]	; 0x34
 80101da:	e7c2      	b.n	8010162 <__sflush_r+0x1a>
 80101dc:	6a21      	ldr	r1, [r4, #32]
 80101de:	2301      	movs	r3, #1
 80101e0:	4628      	mov	r0, r5
 80101e2:	47b0      	blx	r6
 80101e4:	1c41      	adds	r1, r0, #1
 80101e6:	d1c7      	bne.n	8010178 <__sflush_r+0x30>
 80101e8:	682b      	ldr	r3, [r5, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0c4      	beq.n	8010178 <__sflush_r+0x30>
 80101ee:	2b1d      	cmp	r3, #29
 80101f0:	d001      	beq.n	80101f6 <__sflush_r+0xae>
 80101f2:	2b16      	cmp	r3, #22
 80101f4:	d101      	bne.n	80101fa <__sflush_r+0xb2>
 80101f6:	602f      	str	r7, [r5, #0]
 80101f8:	e7b2      	b.n	8010160 <__sflush_r+0x18>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	e7ae      	b.n	8010162 <__sflush_r+0x1a>
 8010204:	690f      	ldr	r7, [r1, #16]
 8010206:	2f00      	cmp	r7, #0
 8010208:	d0aa      	beq.n	8010160 <__sflush_r+0x18>
 801020a:	0793      	lsls	r3, r2, #30
 801020c:	bf18      	it	ne
 801020e:	2300      	movne	r3, #0
 8010210:	680e      	ldr	r6, [r1, #0]
 8010212:	bf08      	it	eq
 8010214:	694b      	ldreq	r3, [r1, #20]
 8010216:	1bf6      	subs	r6, r6, r7
 8010218:	600f      	str	r7, [r1, #0]
 801021a:	608b      	str	r3, [r1, #8]
 801021c:	2e00      	cmp	r6, #0
 801021e:	dd9f      	ble.n	8010160 <__sflush_r+0x18>
 8010220:	4633      	mov	r3, r6
 8010222:	463a      	mov	r2, r7
 8010224:	4628      	mov	r0, r5
 8010226:	6a21      	ldr	r1, [r4, #32]
 8010228:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801022c:	47e0      	blx	ip
 801022e:	2800      	cmp	r0, #0
 8010230:	dc06      	bgt.n	8010240 <__sflush_r+0xf8>
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801023c:	81a3      	strh	r3, [r4, #12]
 801023e:	e790      	b.n	8010162 <__sflush_r+0x1a>
 8010240:	4407      	add	r7, r0
 8010242:	1a36      	subs	r6, r6, r0
 8010244:	e7ea      	b.n	801021c <__sflush_r+0xd4>
 8010246:	bf00      	nop
 8010248:	20400001 	.word	0x20400001

0801024c <_fflush_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	690b      	ldr	r3, [r1, #16]
 8010250:	4605      	mov	r5, r0
 8010252:	460c      	mov	r4, r1
 8010254:	b913      	cbnz	r3, 801025c <_fflush_r+0x10>
 8010256:	2500      	movs	r5, #0
 8010258:	4628      	mov	r0, r5
 801025a:	bd38      	pop	{r3, r4, r5, pc}
 801025c:	b118      	cbz	r0, 8010266 <_fflush_r+0x1a>
 801025e:	6983      	ldr	r3, [r0, #24]
 8010260:	b90b      	cbnz	r3, 8010266 <_fflush_r+0x1a>
 8010262:	f000 f887 	bl	8010374 <__sinit>
 8010266:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <_fflush_r+0x6c>)
 8010268:	429c      	cmp	r4, r3
 801026a:	d11b      	bne.n	80102a4 <_fflush_r+0x58>
 801026c:	686c      	ldr	r4, [r5, #4]
 801026e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0ef      	beq.n	8010256 <_fflush_r+0xa>
 8010276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010278:	07d0      	lsls	r0, r2, #31
 801027a:	d404      	bmi.n	8010286 <_fflush_r+0x3a>
 801027c:	0599      	lsls	r1, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fflush_r+0x3a>
 8010280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010282:	f000 f915 	bl	80104b0 <__retarget_lock_acquire_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff ff5d 	bl	8010148 <__sflush_r>
 801028e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010290:	4605      	mov	r5, r0
 8010292:	07da      	lsls	r2, r3, #31
 8010294:	d4e0      	bmi.n	8010258 <_fflush_r+0xc>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	d4dd      	bmi.n	8010258 <_fflush_r+0xc>
 801029c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801029e:	f000 f908 	bl	80104b2 <__retarget_lock_release_recursive>
 80102a2:	e7d9      	b.n	8010258 <_fflush_r+0xc>
 80102a4:	4b05      	ldr	r3, [pc, #20]	; (80102bc <_fflush_r+0x70>)
 80102a6:	429c      	cmp	r4, r3
 80102a8:	d101      	bne.n	80102ae <_fflush_r+0x62>
 80102aa:	68ac      	ldr	r4, [r5, #8]
 80102ac:	e7df      	b.n	801026e <_fflush_r+0x22>
 80102ae:	4b04      	ldr	r3, [pc, #16]	; (80102c0 <_fflush_r+0x74>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	bf08      	it	eq
 80102b4:	68ec      	ldreq	r4, [r5, #12]
 80102b6:	e7da      	b.n	801026e <_fflush_r+0x22>
 80102b8:	08010cec 	.word	0x08010cec
 80102bc:	08010d0c 	.word	0x08010d0c
 80102c0:	08010ccc 	.word	0x08010ccc

080102c4 <std>:
 80102c4:	2300      	movs	r3, #0
 80102c6:	b510      	push	{r4, lr}
 80102c8:	4604      	mov	r4, r0
 80102ca:	e9c0 3300 	strd	r3, r3, [r0]
 80102ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102d2:	6083      	str	r3, [r0, #8]
 80102d4:	8181      	strh	r1, [r0, #12]
 80102d6:	6643      	str	r3, [r0, #100]	; 0x64
 80102d8:	81c2      	strh	r2, [r0, #14]
 80102da:	6183      	str	r3, [r0, #24]
 80102dc:	4619      	mov	r1, r3
 80102de:	2208      	movs	r2, #8
 80102e0:	305c      	adds	r0, #92	; 0x5c
 80102e2:	f7fb fde7 	bl	800beb4 <memset>
 80102e6:	4b05      	ldr	r3, [pc, #20]	; (80102fc <std+0x38>)
 80102e8:	6224      	str	r4, [r4, #32]
 80102ea:	6263      	str	r3, [r4, #36]	; 0x24
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <std+0x3c>)
 80102ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80102f0:	4b04      	ldr	r3, [pc, #16]	; (8010304 <std+0x40>)
 80102f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102f4:	4b04      	ldr	r3, [pc, #16]	; (8010308 <std+0x44>)
 80102f6:	6323      	str	r3, [r4, #48]	; 0x30
 80102f8:	bd10      	pop	{r4, pc}
 80102fa:	bf00      	nop
 80102fc:	08010619 	.word	0x08010619
 8010300:	0801063b 	.word	0x0801063b
 8010304:	08010673 	.word	0x08010673
 8010308:	08010697 	.word	0x08010697

0801030c <_cleanup_r>:
 801030c:	4901      	ldr	r1, [pc, #4]	; (8010314 <_cleanup_r+0x8>)
 801030e:	f000 b8af 	b.w	8010470 <_fwalk_reent>
 8010312:	bf00      	nop
 8010314:	0801024d 	.word	0x0801024d

08010318 <__sfmoreglue>:
 8010318:	2268      	movs	r2, #104	; 0x68
 801031a:	b570      	push	{r4, r5, r6, lr}
 801031c:	1e4d      	subs	r5, r1, #1
 801031e:	4355      	muls	r5, r2
 8010320:	460e      	mov	r6, r1
 8010322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010326:	f7ff fa63 	bl	800f7f0 <_malloc_r>
 801032a:	4604      	mov	r4, r0
 801032c:	b140      	cbz	r0, 8010340 <__sfmoreglue+0x28>
 801032e:	2100      	movs	r1, #0
 8010330:	e9c0 1600 	strd	r1, r6, [r0]
 8010334:	300c      	adds	r0, #12
 8010336:	60a0      	str	r0, [r4, #8]
 8010338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801033c:	f7fb fdba 	bl	800beb4 <memset>
 8010340:	4620      	mov	r0, r4
 8010342:	bd70      	pop	{r4, r5, r6, pc}

08010344 <__sfp_lock_acquire>:
 8010344:	4801      	ldr	r0, [pc, #4]	; (801034c <__sfp_lock_acquire+0x8>)
 8010346:	f000 b8b3 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 801034a:	bf00      	nop
 801034c:	20001aa9 	.word	0x20001aa9

08010350 <__sfp_lock_release>:
 8010350:	4801      	ldr	r0, [pc, #4]	; (8010358 <__sfp_lock_release+0x8>)
 8010352:	f000 b8ae 	b.w	80104b2 <__retarget_lock_release_recursive>
 8010356:	bf00      	nop
 8010358:	20001aa9 	.word	0x20001aa9

0801035c <__sinit_lock_acquire>:
 801035c:	4801      	ldr	r0, [pc, #4]	; (8010364 <__sinit_lock_acquire+0x8>)
 801035e:	f000 b8a7 	b.w	80104b0 <__retarget_lock_acquire_recursive>
 8010362:	bf00      	nop
 8010364:	20001aaa 	.word	0x20001aaa

08010368 <__sinit_lock_release>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__sinit_lock_release+0x8>)
 801036a:	f000 b8a2 	b.w	80104b2 <__retarget_lock_release_recursive>
 801036e:	bf00      	nop
 8010370:	20001aaa 	.word	0x20001aaa

08010374 <__sinit>:
 8010374:	b510      	push	{r4, lr}
 8010376:	4604      	mov	r4, r0
 8010378:	f7ff fff0 	bl	801035c <__sinit_lock_acquire>
 801037c:	69a3      	ldr	r3, [r4, #24]
 801037e:	b11b      	cbz	r3, 8010388 <__sinit+0x14>
 8010380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010384:	f7ff bff0 	b.w	8010368 <__sinit_lock_release>
 8010388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801038c:	6523      	str	r3, [r4, #80]	; 0x50
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <__sinit+0x68>)
 8010390:	4a13      	ldr	r2, [pc, #76]	; (80103e0 <__sinit+0x6c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	62a2      	str	r2, [r4, #40]	; 0x28
 8010396:	42a3      	cmp	r3, r4
 8010398:	bf08      	it	eq
 801039a:	2301      	moveq	r3, #1
 801039c:	4620      	mov	r0, r4
 801039e:	bf08      	it	eq
 80103a0:	61a3      	streq	r3, [r4, #24]
 80103a2:	f000 f81f 	bl	80103e4 <__sfp>
 80103a6:	6060      	str	r0, [r4, #4]
 80103a8:	4620      	mov	r0, r4
 80103aa:	f000 f81b 	bl	80103e4 <__sfp>
 80103ae:	60a0      	str	r0, [r4, #8]
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 f817 	bl	80103e4 <__sfp>
 80103b6:	2200      	movs	r2, #0
 80103b8:	2104      	movs	r1, #4
 80103ba:	60e0      	str	r0, [r4, #12]
 80103bc:	6860      	ldr	r0, [r4, #4]
 80103be:	f7ff ff81 	bl	80102c4 <std>
 80103c2:	2201      	movs	r2, #1
 80103c4:	2109      	movs	r1, #9
 80103c6:	68a0      	ldr	r0, [r4, #8]
 80103c8:	f7ff ff7c 	bl	80102c4 <std>
 80103cc:	2202      	movs	r2, #2
 80103ce:	2112      	movs	r1, #18
 80103d0:	68e0      	ldr	r0, [r4, #12]
 80103d2:	f7ff ff77 	bl	80102c4 <std>
 80103d6:	2301      	movs	r3, #1
 80103d8:	61a3      	str	r3, [r4, #24]
 80103da:	e7d1      	b.n	8010380 <__sinit+0xc>
 80103dc:	08010884 	.word	0x08010884
 80103e0:	0801030d 	.word	0x0801030d

080103e4 <__sfp>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	4607      	mov	r7, r0
 80103e8:	f7ff ffac 	bl	8010344 <__sfp_lock_acquire>
 80103ec:	4b1e      	ldr	r3, [pc, #120]	; (8010468 <__sfp+0x84>)
 80103ee:	681e      	ldr	r6, [r3, #0]
 80103f0:	69b3      	ldr	r3, [r6, #24]
 80103f2:	b913      	cbnz	r3, 80103fa <__sfp+0x16>
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7ff ffbd 	bl	8010374 <__sinit>
 80103fa:	3648      	adds	r6, #72	; 0x48
 80103fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010400:	3b01      	subs	r3, #1
 8010402:	d503      	bpl.n	801040c <__sfp+0x28>
 8010404:	6833      	ldr	r3, [r6, #0]
 8010406:	b30b      	cbz	r3, 801044c <__sfp+0x68>
 8010408:	6836      	ldr	r6, [r6, #0]
 801040a:	e7f7      	b.n	80103fc <__sfp+0x18>
 801040c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010410:	b9d5      	cbnz	r5, 8010448 <__sfp+0x64>
 8010412:	4b16      	ldr	r3, [pc, #88]	; (801046c <__sfp+0x88>)
 8010414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010418:	60e3      	str	r3, [r4, #12]
 801041a:	6665      	str	r5, [r4, #100]	; 0x64
 801041c:	f000 f847 	bl	80104ae <__retarget_lock_init_recursive>
 8010420:	f7ff ff96 	bl	8010350 <__sfp_lock_release>
 8010424:	2208      	movs	r2, #8
 8010426:	4629      	mov	r1, r5
 8010428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801042c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010430:	6025      	str	r5, [r4, #0]
 8010432:	61a5      	str	r5, [r4, #24]
 8010434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010438:	f7fb fd3c 	bl	800beb4 <memset>
 801043c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010444:	4620      	mov	r0, r4
 8010446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010448:	3468      	adds	r4, #104	; 0x68
 801044a:	e7d9      	b.n	8010400 <__sfp+0x1c>
 801044c:	2104      	movs	r1, #4
 801044e:	4638      	mov	r0, r7
 8010450:	f7ff ff62 	bl	8010318 <__sfmoreglue>
 8010454:	4604      	mov	r4, r0
 8010456:	6030      	str	r0, [r6, #0]
 8010458:	2800      	cmp	r0, #0
 801045a:	d1d5      	bne.n	8010408 <__sfp+0x24>
 801045c:	f7ff ff78 	bl	8010350 <__sfp_lock_release>
 8010460:	230c      	movs	r3, #12
 8010462:	603b      	str	r3, [r7, #0]
 8010464:	e7ee      	b.n	8010444 <__sfp+0x60>
 8010466:	bf00      	nop
 8010468:	08010884 	.word	0x08010884
 801046c:	ffff0001 	.word	0xffff0001

08010470 <_fwalk_reent>:
 8010470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010474:	4606      	mov	r6, r0
 8010476:	4688      	mov	r8, r1
 8010478:	2700      	movs	r7, #0
 801047a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801047e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010482:	f1b9 0901 	subs.w	r9, r9, #1
 8010486:	d505      	bpl.n	8010494 <_fwalk_reent+0x24>
 8010488:	6824      	ldr	r4, [r4, #0]
 801048a:	2c00      	cmp	r4, #0
 801048c:	d1f7      	bne.n	801047e <_fwalk_reent+0xe>
 801048e:	4638      	mov	r0, r7
 8010490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010494:	89ab      	ldrh	r3, [r5, #12]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d907      	bls.n	80104aa <_fwalk_reent+0x3a>
 801049a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801049e:	3301      	adds	r3, #1
 80104a0:	d003      	beq.n	80104aa <_fwalk_reent+0x3a>
 80104a2:	4629      	mov	r1, r5
 80104a4:	4630      	mov	r0, r6
 80104a6:	47c0      	blx	r8
 80104a8:	4307      	orrs	r7, r0
 80104aa:	3568      	adds	r5, #104	; 0x68
 80104ac:	e7e9      	b.n	8010482 <_fwalk_reent+0x12>

080104ae <__retarget_lock_init_recursive>:
 80104ae:	4770      	bx	lr

080104b0 <__retarget_lock_acquire_recursive>:
 80104b0:	4770      	bx	lr

080104b2 <__retarget_lock_release_recursive>:
 80104b2:	4770      	bx	lr

080104b4 <__swhatbuf_r>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	460e      	mov	r6, r1
 80104b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104bc:	4614      	mov	r4, r2
 80104be:	2900      	cmp	r1, #0
 80104c0:	461d      	mov	r5, r3
 80104c2:	b096      	sub	sp, #88	; 0x58
 80104c4:	da08      	bge.n	80104d8 <__swhatbuf_r+0x24>
 80104c6:	2200      	movs	r2, #0
 80104c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104cc:	602a      	str	r2, [r5, #0]
 80104ce:	061a      	lsls	r2, r3, #24
 80104d0:	d410      	bmi.n	80104f4 <__swhatbuf_r+0x40>
 80104d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d6:	e00e      	b.n	80104f6 <__swhatbuf_r+0x42>
 80104d8:	466a      	mov	r2, sp
 80104da:	f000 f903 	bl	80106e4 <_fstat_r>
 80104de:	2800      	cmp	r0, #0
 80104e0:	dbf1      	blt.n	80104c6 <__swhatbuf_r+0x12>
 80104e2:	9a01      	ldr	r2, [sp, #4]
 80104e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104ec:	425a      	negs	r2, r3
 80104ee:	415a      	adcs	r2, r3
 80104f0:	602a      	str	r2, [r5, #0]
 80104f2:	e7ee      	b.n	80104d2 <__swhatbuf_r+0x1e>
 80104f4:	2340      	movs	r3, #64	; 0x40
 80104f6:	2000      	movs	r0, #0
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	b016      	add	sp, #88	; 0x58
 80104fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08010500 <__smakebuf_r>:
 8010500:	898b      	ldrh	r3, [r1, #12]
 8010502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010504:	079d      	lsls	r5, r3, #30
 8010506:	4606      	mov	r6, r0
 8010508:	460c      	mov	r4, r1
 801050a:	d507      	bpl.n	801051c <__smakebuf_r+0x1c>
 801050c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	6123      	str	r3, [r4, #16]
 8010514:	2301      	movs	r3, #1
 8010516:	6163      	str	r3, [r4, #20]
 8010518:	b002      	add	sp, #8
 801051a:	bd70      	pop	{r4, r5, r6, pc}
 801051c:	466a      	mov	r2, sp
 801051e:	ab01      	add	r3, sp, #4
 8010520:	f7ff ffc8 	bl	80104b4 <__swhatbuf_r>
 8010524:	9900      	ldr	r1, [sp, #0]
 8010526:	4605      	mov	r5, r0
 8010528:	4630      	mov	r0, r6
 801052a:	f7ff f961 	bl	800f7f0 <_malloc_r>
 801052e:	b948      	cbnz	r0, 8010544 <__smakebuf_r+0x44>
 8010530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010534:	059a      	lsls	r2, r3, #22
 8010536:	d4ef      	bmi.n	8010518 <__smakebuf_r+0x18>
 8010538:	f023 0303 	bic.w	r3, r3, #3
 801053c:	f043 0302 	orr.w	r3, r3, #2
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	e7e3      	b.n	801050c <__smakebuf_r+0xc>
 8010544:	4b0d      	ldr	r3, [pc, #52]	; (801057c <__smakebuf_r+0x7c>)
 8010546:	62b3      	str	r3, [r6, #40]	; 0x28
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	6020      	str	r0, [r4, #0]
 801054c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	9b00      	ldr	r3, [sp, #0]
 8010554:	6120      	str	r0, [r4, #16]
 8010556:	6163      	str	r3, [r4, #20]
 8010558:	9b01      	ldr	r3, [sp, #4]
 801055a:	b15b      	cbz	r3, 8010574 <__smakebuf_r+0x74>
 801055c:	4630      	mov	r0, r6
 801055e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010562:	f000 f8d1 	bl	8010708 <_isatty_r>
 8010566:	b128      	cbz	r0, 8010574 <__smakebuf_r+0x74>
 8010568:	89a3      	ldrh	r3, [r4, #12]
 801056a:	f023 0303 	bic.w	r3, r3, #3
 801056e:	f043 0301 	orr.w	r3, r3, #1
 8010572:	81a3      	strh	r3, [r4, #12]
 8010574:	89a0      	ldrh	r0, [r4, #12]
 8010576:	4305      	orrs	r5, r0
 8010578:	81a5      	strh	r5, [r4, #12]
 801057a:	e7cd      	b.n	8010518 <__smakebuf_r+0x18>
 801057c:	0801030d 	.word	0x0801030d

08010580 <_malloc_usable_size_r>:
 8010580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010584:	1f18      	subs	r0, r3, #4
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfbc      	itt	lt
 801058a:	580b      	ldrlt	r3, [r1, r0]
 801058c:	18c0      	addlt	r0, r0, r3
 801058e:	4770      	bx	lr

08010590 <_raise_r>:
 8010590:	291f      	cmp	r1, #31
 8010592:	b538      	push	{r3, r4, r5, lr}
 8010594:	4604      	mov	r4, r0
 8010596:	460d      	mov	r5, r1
 8010598:	d904      	bls.n	80105a4 <_raise_r+0x14>
 801059a:	2316      	movs	r3, #22
 801059c:	6003      	str	r3, [r0, #0]
 801059e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105a2:	bd38      	pop	{r3, r4, r5, pc}
 80105a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105a6:	b112      	cbz	r2, 80105ae <_raise_r+0x1e>
 80105a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105ac:	b94b      	cbnz	r3, 80105c2 <_raise_r+0x32>
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 f830 	bl	8010614 <_getpid_r>
 80105b4:	462a      	mov	r2, r5
 80105b6:	4601      	mov	r1, r0
 80105b8:	4620      	mov	r0, r4
 80105ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105be:	f000 b817 	b.w	80105f0 <_kill_r>
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d00a      	beq.n	80105dc <_raise_r+0x4c>
 80105c6:	1c59      	adds	r1, r3, #1
 80105c8:	d103      	bne.n	80105d2 <_raise_r+0x42>
 80105ca:	2316      	movs	r3, #22
 80105cc:	6003      	str	r3, [r0, #0]
 80105ce:	2001      	movs	r0, #1
 80105d0:	e7e7      	b.n	80105a2 <_raise_r+0x12>
 80105d2:	2400      	movs	r4, #0
 80105d4:	4628      	mov	r0, r5
 80105d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105da:	4798      	blx	r3
 80105dc:	2000      	movs	r0, #0
 80105de:	e7e0      	b.n	80105a2 <_raise_r+0x12>

080105e0 <raise>:
 80105e0:	4b02      	ldr	r3, [pc, #8]	; (80105ec <raise+0xc>)
 80105e2:	4601      	mov	r1, r0
 80105e4:	6818      	ldr	r0, [r3, #0]
 80105e6:	f7ff bfd3 	b.w	8010590 <_raise_r>
 80105ea:	bf00      	nop
 80105ec:	2000017c 	.word	0x2000017c

080105f0 <_kill_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	2300      	movs	r3, #0
 80105f4:	4d06      	ldr	r5, [pc, #24]	; (8010610 <_kill_r+0x20>)
 80105f6:	4604      	mov	r4, r0
 80105f8:	4608      	mov	r0, r1
 80105fa:	4611      	mov	r1, r2
 80105fc:	602b      	str	r3, [r5, #0]
 80105fe:	f7f1 fabe 	bl	8001b7e <_kill>
 8010602:	1c43      	adds	r3, r0, #1
 8010604:	d102      	bne.n	801060c <_kill_r+0x1c>
 8010606:	682b      	ldr	r3, [r5, #0]
 8010608:	b103      	cbz	r3, 801060c <_kill_r+0x1c>
 801060a:	6023      	str	r3, [r4, #0]
 801060c:	bd38      	pop	{r3, r4, r5, pc}
 801060e:	bf00      	nop
 8010610:	20001aa4 	.word	0x20001aa4

08010614 <_getpid_r>:
 8010614:	f7f1 baac 	b.w	8001b70 <_getpid>

08010618 <__sread>:
 8010618:	b510      	push	{r4, lr}
 801061a:	460c      	mov	r4, r1
 801061c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010620:	f000 f894 	bl	801074c <_read_r>
 8010624:	2800      	cmp	r0, #0
 8010626:	bfab      	itete	ge
 8010628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801062a:	89a3      	ldrhlt	r3, [r4, #12]
 801062c:	181b      	addge	r3, r3, r0
 801062e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010632:	bfac      	ite	ge
 8010634:	6563      	strge	r3, [r4, #84]	; 0x54
 8010636:	81a3      	strhlt	r3, [r4, #12]
 8010638:	bd10      	pop	{r4, pc}

0801063a <__swrite>:
 801063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063e:	461f      	mov	r7, r3
 8010640:	898b      	ldrh	r3, [r1, #12]
 8010642:	4605      	mov	r5, r0
 8010644:	05db      	lsls	r3, r3, #23
 8010646:	460c      	mov	r4, r1
 8010648:	4616      	mov	r6, r2
 801064a:	d505      	bpl.n	8010658 <__swrite+0x1e>
 801064c:	2302      	movs	r3, #2
 801064e:	2200      	movs	r2, #0
 8010650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010654:	f000 f868 	bl	8010728 <_lseek_r>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	4632      	mov	r2, r6
 801065c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010660:	81a3      	strh	r3, [r4, #12]
 8010662:	4628      	mov	r0, r5
 8010664:	463b      	mov	r3, r7
 8010666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801066a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066e:	f000 b817 	b.w	80106a0 <_write_r>

08010672 <__sseek>:
 8010672:	b510      	push	{r4, lr}
 8010674:	460c      	mov	r4, r1
 8010676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801067a:	f000 f855 	bl	8010728 <_lseek_r>
 801067e:	1c43      	adds	r3, r0, #1
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	bf15      	itete	ne
 8010684:	6560      	strne	r0, [r4, #84]	; 0x54
 8010686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801068a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801068e:	81a3      	strheq	r3, [r4, #12]
 8010690:	bf18      	it	ne
 8010692:	81a3      	strhne	r3, [r4, #12]
 8010694:	bd10      	pop	{r4, pc}

08010696 <__sclose>:
 8010696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069a:	f000 b813 	b.w	80106c4 <_close_r>
	...

080106a0 <_write_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4604      	mov	r4, r0
 80106a4:	4608      	mov	r0, r1
 80106a6:	4611      	mov	r1, r2
 80106a8:	2200      	movs	r2, #0
 80106aa:	4d05      	ldr	r5, [pc, #20]	; (80106c0 <_write_r+0x20>)
 80106ac:	602a      	str	r2, [r5, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	f7f1 fa9c 	bl	8001bec <_write>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_write_r+0x1e>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b103      	cbz	r3, 80106be <_write_r+0x1e>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	20001aa4 	.word	0x20001aa4

080106c4 <_close_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	2300      	movs	r3, #0
 80106c8:	4d05      	ldr	r5, [pc, #20]	; (80106e0 <_close_r+0x1c>)
 80106ca:	4604      	mov	r4, r0
 80106cc:	4608      	mov	r0, r1
 80106ce:	602b      	str	r3, [r5, #0]
 80106d0:	f7f1 faa8 	bl	8001c24 <_close>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_close_r+0x1a>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_close_r+0x1a>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	20001aa4 	.word	0x20001aa4

080106e4 <_fstat_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	2300      	movs	r3, #0
 80106e8:	4d06      	ldr	r5, [pc, #24]	; (8010704 <_fstat_r+0x20>)
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	4611      	mov	r1, r2
 80106f0:	602b      	str	r3, [r5, #0]
 80106f2:	f7f1 faa2 	bl	8001c3a <_fstat>
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	d102      	bne.n	8010700 <_fstat_r+0x1c>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	b103      	cbz	r3, 8010700 <_fstat_r+0x1c>
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	bd38      	pop	{r3, r4, r5, pc}
 8010702:	bf00      	nop
 8010704:	20001aa4 	.word	0x20001aa4

08010708 <_isatty_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	2300      	movs	r3, #0
 801070c:	4d05      	ldr	r5, [pc, #20]	; (8010724 <_isatty_r+0x1c>)
 801070e:	4604      	mov	r4, r0
 8010710:	4608      	mov	r0, r1
 8010712:	602b      	str	r3, [r5, #0]
 8010714:	f7f1 faa0 	bl	8001c58 <_isatty>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_isatty_r+0x1a>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_isatty_r+0x1a>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20001aa4 	.word	0x20001aa4

08010728 <_lseek_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	4604      	mov	r4, r0
 801072c:	4608      	mov	r0, r1
 801072e:	4611      	mov	r1, r2
 8010730:	2200      	movs	r2, #0
 8010732:	4d05      	ldr	r5, [pc, #20]	; (8010748 <_lseek_r+0x20>)
 8010734:	602a      	str	r2, [r5, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	f7f1 fa98 	bl	8001c6c <_lseek>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_lseek_r+0x1e>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_lseek_r+0x1e>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20001aa4 	.word	0x20001aa4

0801074c <_read_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4604      	mov	r4, r0
 8010750:	4608      	mov	r0, r1
 8010752:	4611      	mov	r1, r2
 8010754:	2200      	movs	r2, #0
 8010756:	4d05      	ldr	r5, [pc, #20]	; (801076c <_read_r+0x20>)
 8010758:	602a      	str	r2, [r5, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f1 fa29 	bl	8001bb2 <_read>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_read_r+0x1e>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b103      	cbz	r3, 801076a <_read_r+0x1e>
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	20001aa4 	.word	0x20001aa4

08010770 <_init>:
 8010770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010772:	bf00      	nop
 8010774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010776:	bc08      	pop	{r3}
 8010778:	469e      	mov	lr, r3
 801077a:	4770      	bx	lr

0801077c <_fini>:
 801077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077e:	bf00      	nop
 8010780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010782:	bc08      	pop	{r3}
 8010784:	469e      	mov	lr, r3
 8010786:	4770      	bx	lr
